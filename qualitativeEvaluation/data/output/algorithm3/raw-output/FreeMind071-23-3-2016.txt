
!ENTRY org.eclipse.ui 4 0 2016-03-23 19:42:50.016
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException
	at org.eclipse.core.runtime.Path.<init>(Path.java:206)
	at org.eclipse.core.internal.resources.WorkspaceRoot.getProject(WorkspaceRoot.java:145)
	at ffeatureextractor.actions.FeatureExtractionAction.run(FeatureExtractionAction.java:101)
	at org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:247)
	at org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:228)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:595)
	at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:511)
	at org.eclipse.jface.action.ActionContributionItem$6.handleEvent(ActionContributionItem.java:462)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4362)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4180)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3769)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:654)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:598)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
processing compilation unit: NodeDropListener.java
processing compilation unit: ColorSwatch.java
processing compilation unit: LastOpenedList.java
processing compilation unit: MapMouseMotionListener.java
processing compilation unit: MindMapNodesSelection.java
processing compilation unit: NodeMouseMotionListener.java
processing compilation unit: Controller.java
processing compilation unit: MapMouseWheelListener.java
processing compilation unit: NodeKeyListener.java
processing compilation unit: MenuBar.java
processing compilation unit: NodeDragListener.java
processing compilation unit: MainToolBar.java
processing compilation unit: Tools.java
processing compilation unit: XMLElement.java
processing compilation unit: ExampleFileFilter.java
processing compilation unit: XMLParseException.java
processing compilation unit: FreeMind.java
processing compilation unit: FreeMindApplet.java
processing compilation unit: FreeMindMain.java
processing compilation unit: MindMapNode.java
processing compilation unit: NodeAdapter.java
processing compilation unit: MindMapLinkRegistry.java
processing compilation unit: MindMapArrowLink.java
processing compilation unit: MindMapEdge.java
processing compilation unit: ControllerAdapter.java
processing compilation unit: ArrowLinkAdapter.java
processing compilation unit: LinkAdapter.java
processing compilation unit: MindMapLine.java
processing compilation unit: LineAdapter.java
processing compilation unit: CloudAdapter.java
processing compilation unit: MapAdapter.java
processing compilation unit: MindMapLink.java
processing compilation unit: MindIcon.java
processing compilation unit: EdgeAdapter.java
processing compilation unit: MindMapCloud.java
processing compilation unit: ModesCreator.java
processing compilation unit: Mode.java
processing compilation unit: XMLElementAdapter.java
processing compilation unit: LinkRegistryAdapter.java
processing compilation unit: StylePattern.java
processing compilation unit: MindMap.java
processing compilation unit: ModeController.java
processing compilation unit: BrowseEdgeModel.java
processing compilation unit: BrowseController.java
processing compilation unit: BrowseMapModel.java
processing compilation unit: BrowseArrowLinkModel.java
processing compilation unit: BrowsePopupMenu.java
processing compilation unit: BrowseToolBar.java
processing compilation unit: BrowseNodeModel.java
processing compilation unit: BrowseCloudModel.java
processing compilation unit: BrowseMode.java
processing compilation unit: BrowseXMLElement.java
processing compilation unit: FileToolBar.java
processing compilation unit: FilePopupMenu.java
processing compilation unit: FileNodeModel.java
processing compilation unit: FileEdgeModel.java
processing compilation unit: FileMode.java
processing compilation unit: FileController.java
processing compilation unit: FileMapModel.java
processing compilation unit: MindMapEdgeModel.java
processing compilation unit: MindMapArrowLinkModel.java
processing compilation unit: MindMapMode.java
processing compilation unit: MindMapNodeModel.java
processing compilation unit: MindMapPopupMenu.java
processing compilation unit: MindMapXMLElement.java
processing compilation unit: MindMapController.java
processing compilation unit: MindMapToolBar.java
processing compilation unit: MindMapCloudModel.java
processing compilation unit: MindMapMapModel.java
processing compilation unit: SchemePopupMenu.java
processing compilation unit: SchemeMode.java
processing compilation unit: SchemeMapModel.java
processing compilation unit: SchemeToolBar.java
processing compilation unit: SchemeNodeModel.java
processing compilation unit: SchemeController.java
processing compilation unit: SchemeEdgeModel.java
processing compilation unit: MapModule.java
processing compilation unit: BezierEdgeView.java
processing compilation unit: MapView.java
processing compilation unit: ArrowLinkView.java
processing compilation unit: ConvexHull.java
processing compilation unit: MultipleImage.java
processing compilation unit: ForkNodeView.java
processing compilation unit: NodeView.java
processing compilation unit: MindMapLayout.java
processing compilation unit: RootNodeView.java
processing compilation unit: SharpBezierEdgeView.java
processing compilation unit: CloudView.java
processing compilation unit: BubbleNodeView.java
processing compilation unit: SharpLinearEdgeView.java
processing compilation unit: LinearEdgeView.java
processing compilation unit: EdgeView.java
Project FreeMind0.7.1 has : 92 compilation units, and 198 defined types
Printing the relation
freemind.controller.ColorSwatch =====> [ void ColorSwatch(), void ColorSwatch(Color color), Color getColor() ]
freemind.controller.Controller =====> [ void informationMessage(Object message), void Controller(FreeMindMain frame), FreeMindMain getFrame(), Mode getMode(), LastOpenedList getLastOpenedList(), boolean getAntialiasEdges(), void setAllActions(boolean enabled), void setLeftToolbarVisible(boolean visible), void setTitle(), void obtainFocusForSelected(), MindMap getModel(), void checkJavaVersion(), URL getResource(String resource), void setAntialiasAll(boolean antialiasAll), MapModule getMapModule(), boolean getAntialiasAll(), void setZoom(float zoom), void errorMessage(Object message, JComponent component), MapView getView(), Font getDefaultFont(), void setFrame(FreeMindMain frame), void setAntialiasEdges(boolean antialiasEdges), NodeKeyListener getNodeKeyListener(), MapMouseMotionListener getMapMouseMotionListener(), void errorMessage(Object message), NodeDragListener getNodeDragListener(), void informationMessage(Object message, JComponent component), boolean acquirePrinterJobAndPageFormat(), void moveToRoot(), JToolBar getToolBar(), MapMouseWheelListener getMapMouseWheelListener(), NodeDropListener getNodeDropListener(), MapModuleManager getMapModuleManager(), NodeMouseMotionListener getNodeMouseMotionListener(), String[] getZooms(), Font getFontThroughMap(Font font), boolean changeToMode(String mode), void setMenubarVisible(boolean visible), void setToolbarVisible(boolean visible), String getProperty(String property), void setProperty(String property, String value), String getResourceString(String resource), Map getModes(), void quit() ]
freemind.controller.Controller.AboutAction =====> [ void AboutAction(Controller controller) ]
freemind.controller.Controller.BackgroundAction =====> [ void BackgroundAction(Controller controller, Icon icon) ]
freemind.controller.Controller.BackgroundSwatch =====> [ Color getColor() ]
freemind.controller.Controller.CloseAction =====> [ void CloseAction(Controller controller) ]
freemind.controller.Controller.DocumentationAction =====> [ void DocumentationAction(Controller controller) ]
freemind.controller.Controller.HistoryManager =====> [ void mapChanged(MapModule map), void previousMap(), void HistoryManager(), void nextMap() ]
freemind.controller.Controller.HistoryNextMapAction =====> [ void HistoryNextMapAction(Controller controller) ]
freemind.controller.Controller.HistoryPreviousMapAction =====> [ void HistoryPreviousMapAction(Controller controller) ]
freemind.controller.Controller.LicenseAction =====> [ void LicenseAction(Controller controller) ]
freemind.controller.Controller.MapModuleManager =====> [ void newMapModule(MindMap map), void addToMapModules(String key, MapModule value), void setMapModule(MapModule mapModule), boolean close(), void changeToMapOfMode(Mode mode), void updateNavigationActions(), boolean tryToChangeToMapModule(String mapModule), void MapModuleManager(Controller c), Map getMapModules(), void changeToMapModule(String mapModule), MapModule getMapModule(), void updateMapModuleName(), void previousMapModule(), void changeToMapModuleWithoutHistory(MapModule map), void updateZoomBar(), void nextMapModule(), void mapModuleChanged(), void changeToAnotherMap(String toBeClosed) ]
freemind.controller.Controller.MoveToRootAction =====> [ void MoveToRootAction(Controller controller) ]
freemind.controller.Controller.NavigationNextMapAction =====> [ void NavigationNextMapAction(Controller controller) ]
freemind.controller.Controller.NavigationPreviousMapAction =====> [ void NavigationPreviousMapAction(Controller controller) ]
freemind.controller.Controller.OpenFAQAction =====> [ void OpenFAQAction(Controller controller) ]
freemind.controller.Controller.OptionAntialiasAction =====> [ void OptionAntialiasAction(Controller controller) ]
freemind.controller.Controller.OptionHTMLExportFoldingAction =====> [ void OptionHTMLExportFoldingAction(Controller controller) ]
freemind.controller.Controller.OptionSelectionMechanismAction =====> [ void OptionSelectionMechanismAction(Controller controller) ]
freemind.controller.Controller.PageAction =====> [ void PageAction(Controller controller) ]
freemind.controller.Controller.PrintAction =====> [ void PrintAction(Controller controller, boolean isDlg) ]
freemind.controller.Controller.QuitAction =====> [ void QuitAction(Controller controller) ]
freemind.controller.Controller.ToggleLeftToolbarAction =====> [ void ToggleLeftToolbarAction(Controller controller) ]
freemind.controller.Controller.ToggleMenubarAction =====> [ void ToggleMenubarAction(Controller controller) ]
freemind.controller.Controller.ToggleToolbarAction =====> [ void ToggleToolbarAction(Controller controller) ]
freemind.controller.Controller.ZoomInAction =====> [ void ZoomInAction(Controller controller) ]
freemind.controller.Controller.ZoomOutAction =====> [ void ZoomOutAction(Controller controller) ]
freemind.controller.LastOpenedList =====> [ String save(), ListIterator listIterator(), void load(String data), void open(String restoreable), void LastOpenedList(Controller c, String restored), void mapClosed(MapModule map), void mapOpened(MapModule map) ]
freemind.controller.MainToolBar =====> [ void MainToolBar(Controller c), String getItemForZoom(float f), void setZoomByItem(Object item), void zoomIn(), void setZoomComboBox(float f), void zoomOut(), void setAllActions(boolean enabled) ]
freemind.controller.MapMouseMotionListener =====> [ void MapMouseMotionListener(Controller controller), void handlePopup(MouseEvent e) ]
freemind.controller.MapMouseWheelListener =====> [ void MapMouseWheelListener(Controller controller) ]
freemind.controller.MenuBar =====> [ void copyMenuItems(JMenu source, JMenu dest), JPopupMenu getMapsPopupMenu(), void updateFileMenu(), void updateLastOpenedList(), void updateMapsMenu(), void addOptionSet(Action action, String[] textIDs, JMenu menu, String selectedTextID), void MenuBar(Controller controller), void updateEditMenu() ]
freemind.controller.MindMapNodesSelection =====> [ void MindMapNodesSelection(String nodesContent, String stringContent, String rtfContent, String dropActionContent), void setDropAction(String dropActionContent) ]
freemind.controller.NodeDragListener =====> [ void NodeDragListener(Controller controller), Cursor getCursorByAction(int dragAction) ]
freemind.controller.NodeDropListener =====> [ void NodeDropListener(Controller controller), boolean isDropAcceptable(DropTargetDropEvent event), boolean isDragAcceptable(DropTargetDragEvent ev), void dragScroll(DropTargetDragEvent e) ]
freemind.controller.NodeKeyListener =====> [ void NodeKeyListener(Controller controller) ]
freemind.controller.NodeMouseMotionListener =====> [ void updateSelectionMethod(Controller c), void stopTimerForDelayedSelection(), Rectangle getControlRegion(Point2D p), void createTimer(MouseEvent e), void NodeMouseMotionListener(Controller controller) ]
freemind.controller.NodeMouseMotionListener.timeDelayedSelection =====> [ void timeDelayedSelection(Controller c, MouseEvent e) ]
freemind.main.ExampleFileFilter =====> [ void ExampleFileFilter(String[] filters, String description), String getExtension(File f), void addExtension(String extension), void ExampleFileFilter(String extension), boolean isExtensionListInDescription(), void ExampleFileFilter(), void setExtensionListInDescription(boolean b), void ExampleFileFilter(String[] filters), void ExampleFileFilter(String extension, String description), void setDescription(String description) ]
freemind.main.FreeMind =====> [ int getWinWidth(), void setProperty(String key, String value), java.util.logging.Logger getLogger(String forClass), Container getViewport(), File getPatternsFile(), void saveProperties(), void setWaitingCursor(boolean waiting), String getProperty(String key), String getFreemindVersion(), Controller getController(), void out(String msg), String transpose(String input, char findChar, String replaceString), String getFreemindDirectory(), void err(String msg), void FreeMind(), MapView getView(), String getProgramForFile(String type), ResourceBundle getResources(), int getWinState(), URL getResource(String name), boolean isApplet(), void setView(MapView view), int getWinHeight(), void openDocument(URL url), void main(String[] args), MenuBar getFreeMindMenuBar() ]
freemind.main.FreeMindApplet =====> [ int getWinWidth(), void setProperty(String key, String value), java.util.logging.Logger getLogger(String forClass), Container getViewport(), File getPatternsFile(), void saveProperties(), void setWaitingCursor(boolean waiting), String getProperty(String key), int getMaxNodeWidth(), Controller getController(), String getFreemindVersion(), void out(String msg), String getFreemindDirectory(), void err(String msg), MapView getView(), ResourceBundle getResources(), int getWinState(), URL getResource(String name), void FreeMindApplet(), boolean isApplet(), void setView(MapView view), void setTitle(String title), int getWinHeight(), MenuBar getFreeMindMenuBar(), void openDocument(URL doc) ]
freemind.main.FreeMindMain =====> [ void setProperty(String key, String value), int getWinWidth(), java.util.logging.Logger getLogger(String forClass), Container getContentPane(), Container getViewport(), File getPatternsFile(), void saveProperties(), void setWaitingCursor(boolean waiting), String getProperty(String key), int getMaxNodeWidth(), Controller getController(), String getFreemindVersion(), void out(String msg), String transpose(String input, char findChar, String replaceString), String getFreemindDirectory(), void err(String msg), void FreeMind(), MapView getView(), void openDocument(URL location), String getProgramForFile(String type), ResourceBundle getResources(), int getWinState(), URL getResource(String name), boolean isApplet(), void FreeMindApplet(), void setView(MapView view), void setTitle(String title), int getWinHeight(), void repaint(), void openDocument(URL url), void main(String[] args), MenuBar getFreeMindMenuBar(), JLayeredPane getLayeredPane(), void openDocument(URL doc) ]
freemind.main.Tools =====> [ List stringToList(String string), String PointToXml(Point col), String expandFileName(String file), String colorToXml(Color col), Vector getAvailableFontFamilyNamesAsVector(), String BooleanToXml(boolean col), boolean isAvailableFontFamily(String fontFamilyName), boolean executableByExtension(String file), String expandPlaceholders(String message, String s1), String getExtension(String s), String toXMLUnescapedText(String text), boolean safeEquals(String string1, String string2), String expandPlaceholders(String message, String s1, String s2), String expandPlaceholders(String message, String s1, String s2, String s3), String firstLetterCapitalized(String text), boolean xmlToBoolean(String string), String urlGetFile(URL url), void setHidden(File file, boolean hidden, boolean synchronously), String removeExtension(String s), String toRelativeURL(URL base, URL target), String toXMLEscapedText(String text), String listToString(List list), Set getAvailableFontFamilyNames(), String getExtension(File f), Color xmlToColor(String string), String toXMLEscapedTextWithNBSPizedSpaces(String text), Point xmlToPoint(String string), boolean isAbsolutePath(String path) ]
freemind.main.Tools.BooleanHolder =====> [ boolean getValue(), void setValue(boolean value), void BooleanHolder() ]
freemind.main.Tools.IntHolder =====> [ int getValue(), void IntHolder(), void setValue(int value), void IntHolder(int value) ]
freemind.main.Tools.ObjectHolder =====> [ void setObject(Object object), Object getObject(), void ObjectHolder() ]
freemind.main.Tools.Pair =====> [ void Pair(Object first, Object second), Object getSecond(), Object getFirst() ]
freemind.main.XMLElement =====> [ Object getAttribute(String name, Object defaultValue), double getDoubleAttribute(String name), NodeAdapter createNodeAdapter(FreeMindMain frame), char scanWhitespace(StringBuffer result), Enumeration enumerateAttributeNames(), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void parseString(String string, int offset, int end, int startingLineNr), void parseString(String string), void removeAttribute(String name), XMLParseException invalidValueSet(String name), void setTagName(String name), XMLParseException unexpectedEndOfData(), String getStringAttribute(String name), double getSpecialDoubleProperty(String name, Hashtable valueSet, String defaultKey), void scanString(StringBuffer string), void processUnfinishedLinks(MindMapLinkRegistry registry), void removeChild(String name), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), Object getProperty(String name, Hashtable valueSet, String defaultKey), Vector getChildren(), int countChildren(), void skipComment(), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace, boolean fillBasicConversionTable, boolean ignoreCase), String getProperty(String name, String defaultValue), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), void removeChild(XMLElement child), Object getUserObject(), FreeMindMain getFrame(), void XMLElement(Hashtable entities), int getLineNr(), int getIntAttribute(String name), void XMLElementAdapter(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), XMLParseException expectedInput(String charSet), void parseCharArray(char[] input, int offset, int end), void scanElement(XMLElement elt), int getIntAttribute(String name, int defaultValue), void setName(String name), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace, boolean ignoreCase), void setDoubleAttribute(String name, double value), void skipSpecialTag(int bracketLevel), void setContent(String content), void XMLElement(), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), void resolveEntity(StringBuffer buf), XMLParseException syntaxError(String context), void parseCharArray(char[] input, int offset, int end, int startingLineNr), void setAttribute(String name, Object value), void writeClosingTag(Writer writer), void write(Writer writer, boolean withClosingTag), void parseFromReader(Reader reader), ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), String getStringProperty(String name, Hashtable valueSet, String defaultKey), boolean getProperty(String key, String trueValue, String falseValue, boolean defaultValue), String getStringAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiterals), void scanIdentifier(StringBuffer result), NodeAdapter getMapChild(), void writeEncoded(Writer writer, String str), int getIntAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiteralNumbers), boolean getBooleanAttribute(String name, String trueValue, String falseValue, boolean defaultValue), void parseString(String string, int offset, int end), void addProperty(String key, int value), void writeWithoutClosingTag(Writer writer), double getDoubleAttribute(String name, double defaultValue), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace), XMLParseException unknownEntity(String name), void setIntAttribute(String name, int value), void unreadChar(char ch), String getName(), String getTagName(), void XMLElement(boolean skipLeadingWhitespace), XMLParseException invalidValue(String name, String value), void addProperty(String name, double value), void write(Writer writer), void addChild(XMLElement child), void parseFromReader(Reader reader, int startingLineNr), void removeProperty(String name), double getDoubleAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiteralNumbers), int getIntProperty(String name, Hashtable valueSet, String defaultKey), Object getAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiterals), void addProperty(String name, Object value), char scanWhitespace(), boolean checkLiteral(String literal), void BrowseXMLElement(FreeMindMain frame), boolean checkCDATA(StringBuffer buf), void parseString(String string, int offset), Object getAttribute(String name), String getStringAttribute(String name, String defaultValue), XMLElement createAnotherElement(), int getSpecialIntProperty(String name, Hashtable valueSet, String defaultKey), void XMLElementAdapter(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame), String getProperty(String name), String getContent(), void setIDs(HashMap IDToTarget, MindMapLinkRegistry registry), void scanPCData(StringBuffer data), char readChar(), String getContents(), void completeElement(), Enumeration enumerateChildren(), int getProperty(String name, int defaultValue), Enumeration enumeratePropertyNames(), double getProperty(String name, double defaultValue) ]
freemind.main.XMLParseException =====> [ void XMLParseException(String name, String message), void XMLParseException(String name, int lineNr, String message), int getLineNr() ]
freemind.modes.ArrowLinkAdapter =====> [ void setEndArrow(String endArrow), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), Point getStartInclination(), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), Point getEndInclination(), String getEndArrow(), XMLElement save(), String getStartArrow(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void setStartArrow(String startArrow), void setStartInclination(Point startInclination), void setEndInclination(Point endInclination) ]
freemind.modes.CloudAdapter =====> [ void BrowseCloudModel(MindMapNode node, FreeMindMain frame), void MindMapCloudModel(MindMapNode node, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame), Color getExteriorColor(), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), XMLElement save() ]
freemind.modes.ControllerAdapter =====> [ Mode getMode(), String getLinkByFileChooser(FileFilter fileFilter), NodeAdapter getSelected(), void doubleClick(), JMenuItem add(JMenu menu, Action action, String keystroke), boolean close(), String getText(String textId), void setBlocked(boolean isBlocked), boolean binOptionIsTrue(String option), MindMapToolBar getToolBar(), MapAdapter getModel(), void anotherNodeSelected(MindMapNode n), void open(), Controller getController(), MapModule getMapModule(), MapAdapter newModel(), MindMapNode newNode(), void SchemeController(Mode mode), boolean extendSelection(MouseEvent e), JMenu getNodeMenu(), void setFontSize(int fontSize), LinkedList getSelecteds(), void load(File file), JPopupMenu getPopupMenu(), void showPopupMenu(MouseEvent e), void newMap(MindMap map), void ControllerAdapter(Mode mode), void BrowseController(Mode mode), void setMode(Mode mode), void mapOpened(boolean open), boolean saveAs(), MindMapNode getSelected(), void setFontFamily(String fontFamily), MapAdapter getMap(), MindMapMapModel getModel(), void edit(KeyEvent e, boolean addNew, boolean editLong), void editLong(NodeView node, String text, KeyEvent firstEvent), void toggleChildrenFolded(), void select(NodeView node), BrowseToolBar getToolBar(), void addNew(NodeView target, int newNodeMode, KeyEvent e), void load(URL url), MindMapNodeModel getSelected(), void edit(NodeView node, NodeView prevSelected, KeyEvent firstEvent, boolean isNewNode, boolean parentFolded, boolean editLong), void loadURL(String relative), FreeMindMain getFrame(), void setAllActions(boolean enabled), boolean save(), void createIconActions(), JMenu getBranchMenu(), void doubleClick(MouseEvent e), MindMap getModel(), void ControllerAdapter(), void updateMapModuleName(), void nodeChanged(MindMapNode n), JMenu getFileMenu(), void newMap(), MapView getView(), boolean isBlocked(), void loadPatterns(Reader reader), boolean save(File file), void createPatterns(List patternsList), JMenu getIconMenu(), void FileController(Mode mode), String getWidthTitle(int width), void add(JMenu menu, Action action), void handleLoadingException(Exception ex), BrowseMapModel getModel(), void loadURL(), URL getResource(String name), FileFilter getFileFilter(), void setImageByFileChooser(), void mouseWheelMoved(MouseWheelEvent e), void closeEdit(), JMenu getEditMenu(), void loadPatterns(File file), JMenu getEdgeMenu(), void setLinkByFileChooser(), void plainClick(MouseEvent e), BrowseNodeModel getSelected(), void toggleFolded(), JPopupMenu getPopupForModel(java.lang.Object obj), void changeComponentHeight(JComponent component, int difference, int minimum), void MindMapController(Mode mode), JMenu getLeadingNodeMenu(), void setLinkByTextField(), JToolBar getLeftToolBar(), JMenu getExtensionMenu() ]
freemind.modes.ControllerAdapter.CopyAction =====> [ void CopyAction(Object controller) ]
freemind.modes.ControllerAdapter.CopySingleAction =====> [ void CopySingleAction(Object controller) ]
freemind.modes.ControllerAdapter.CutAction =====> [ void CutAction(Object controller) ]
freemind.modes.ControllerAdapter.EditAction =====> [ void EditAction() ]
freemind.modes.ControllerAdapter.EditCopyAction =====> [ void EditCopyAction(JTextComponent textComponent) ]
freemind.modes.ControllerAdapter.EditLongAction =====> [ void EditLongAction() ]
freemind.modes.ControllerAdapter.EditPopupMenu =====> [ void EditPopupMenu(JTextComponent textComponent) ]
freemind.modes.ControllerAdapter.FileOpener =====> [ boolean isDropAcceptable(DropTargetDropEvent event), boolean isDragAcceptable(DropTargetDragEvent event), void dragScroll(DropTargetDragEvent e) ]
freemind.modes.ControllerAdapter.FindAction =====> [ void FindAction() ]
freemind.modes.ControllerAdapter.FindNextAction =====> [ void FindNextAction() ]
freemind.modes.ControllerAdapter.FollowLinkAction =====> [ void FollowLinkAction() ]
freemind.modes.ControllerAdapter.GotoLinkNodeAction =====> [ void GotoLinkNodeAction(String text, MindMapNode source) ]
freemind.modes.ControllerAdapter.NewChildAction =====> [ void NewChildAction() ]
freemind.modes.ControllerAdapter.NewChildWithoutFocusAction =====> [ void NewChildWithoutFocusAction() ]
freemind.modes.ControllerAdapter.NewMapAction =====> [ void NewMapAction(ControllerAdapter controller) ]
freemind.modes.ControllerAdapter.NewPreviousSiblingAction =====> [ void NewPreviousSiblingAction() ]
freemind.modes.ControllerAdapter.NewSiblingAction =====> [ void NewSiblingAction() ]
freemind.modes.ControllerAdapter.NodeDownAction =====> [ void NodeDownAction() ]
freemind.modes.ControllerAdapter.NodeUpAction =====> [ void NodeUpAction() ]
freemind.modes.ControllerAdapter.OpenAction =====> [ void OpenAction(ControllerAdapter modeController) ]
freemind.modes.ControllerAdapter.PasteAction =====> [ void PasteAction(Object controller) ]
freemind.modes.ControllerAdapter.RemoveAction =====> [ void RemoveAction() ]
freemind.modes.ControllerAdapter.SaveAction =====> [ void SaveAction(ControllerAdapter modeController) ]
freemind.modes.ControllerAdapter.SaveAsAction =====> [ void SaveAsAction(ControllerAdapter modeController) ]
freemind.modes.ControllerAdapter.SetImageByFileChooserAction =====> [ void SetImageByFileChooserAction() ]
freemind.modes.ControllerAdapter.SetLinkByFileChooserAction =====> [ void SetLinkByFileChooserAction() ]
freemind.modes.ControllerAdapter.SetLinkByTextFieldAction =====> [ void SetLinkByTextFieldAction() ]
freemind.modes.ControllerAdapter.ToggleChildrenFoldedAction =====> [ void ToggleChildrenFoldedAction() ]
freemind.modes.ControllerAdapter.ToggleFoldedAction =====> [ void ToggleFoldedAction() ]
freemind.modes.EdgeAdapter =====> [ void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void setWidth(int width), void setStyle(String style), MindMapNode getSource(), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), String getStyle(), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), XMLElement save(), Stroke getStroke(), void EdgeAdapter(MindMapNode target, FreeMindMain frame), Color getColor(), int getWidth() ]
freemind.modes.LineAdapter =====> [ void setReferenceText(String referenceText), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), FreeMindMain getFrame(), void setStyle(String style), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), Color getExteriorColor(), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void setTarget(MindMapNode target), void setDestinationLabel(String destinationLabel), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void setSource(MindMapNode source), String getStyle(), void setEndArrow(String endArrow), String getDestinationLabel(), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), XMLElement save(), String getEndArrow(), void setStartArrow(String startArrow), Color getColor(), int getWidth(), void EdgeAdapter(MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapCloudModel(MindMapNode node, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void setWidth(int width), void CloudAdapter(MindMapNode target, FreeMindMain frame), MindMapNode getSource(), MindMapNode getTarget(), String getReferenceText(), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), String getStartArrow(), void setStartInclination(Point startInclination), void setEndInclination(Point endInclination), void BrowseCloudModel(MindMapNode node, FreeMindMain frame), Point getStartInclination(), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void LineAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), Point getEndInclination(), Stroke getStroke() ]
freemind.modes.LinkAdapter =====> [ void setReferenceText(String referenceText), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), MindMapNode getSource(), String getReferenceText(), void setDestinationLabel(String destinationLabel), String getStartArrow(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void setSource(MindMapNode source), void setStartInclination(Point startInclination), void setEndInclination(Point endInclination), void setEndArrow(String endArrow), String getDestinationLabel(), Point getStartInclination(), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), Point getEndInclination(), String getEndArrow(), XMLElement save(), void setStartArrow(String startArrow) ]
freemind.modes.LinkRegistryAdapter =====> [ Vector getAllLinksIntoMe(MindMapNode target), Vector getCuttedNode(String oldTargetID), void deregisterLink(MindMapLink link), MindMapNode getTargetForID(String ID), ID_Registered registerLinkTarget(MindMapNode target), Vector getAssignedLinksVector(ID_Registered state), void clearCuttedNodeBuffer(), Vector getAllLinks(MindMapNode node), void cutNode(MindMapNode target), String getLabel(MindMapNode target), void LinkRegistryAdapter(), String generateUniqueID(String proposedID), void registerLink(MindMapLink link), ID_BasicState getState(MindMapNode node), ID_Registered registerLinkTarget(MindMapNode target, String proposedID), String getIDString(MindMapNode node), Vector getAllLinksFromMe(MindMapNode source), Vector getAllSources(MindMapNode target), void deregisterLinkTarget(MindMapNode target) ]
freemind.modes.LinkRegistryAdapter.ID_BasicStateAdapter =====> [ void ID_UsedStateAdapter(MindMapNode target, String ID), String getID(), MindMapNode getTarget(), void ID_UsedStateAdapter(), void ID_RegisteredAdapter(MindMapNode target, String ID), void clone(ID_UsedStateAdapter state) ]
freemind.modes.LinkRegistryAdapter.ID_RegisteredAdapter =====> [ void ID_RegisteredAdapter(MindMapNode target, String ID) ]
freemind.modes.LinkRegistryAdapter.ID_UsedStateAdapter =====> [ void ID_UsedStateAdapter(MindMapNode target, String ID), MindMapNode getTarget(), void ID_UsedStateAdapter(), void ID_RegisteredAdapter(MindMapNode target, String ID), void clone(ID_UsedStateAdapter state) ]
freemind.modes.MapAdapter =====> [ void removeNodeFromParent(MutableTreeNode node), int removeLastIcon(MindMapNodeModel node), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent, boolean asSibling), String getText(String textId), Transferable cut(), void SchemeMapModel(FreeMindMain frame), void setFile(), String tryToLock(File file), Object[] getPathToRoot(TreeNode node), boolean find(LinkedList nodes, String what, boolean caseSensitive), void nodesWereInserted(TreeNode node, int[] childIndices), void setEdgeColor(MindMapNodeModel node, Color color), void setNormalFont(MindMapNodeModel node), void setBold(MindMapNodeModel node), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void addLink(MindMapNodeModel source, MindMapNodeModel target), void setUnderlined(MindMapNodeModel node), Transferable copy(ArrayList selectedNodes, String inPlainText), boolean isReadOnly(), void BrowseMapModel(FreeMindMain frame), void setFontFamily(MindMapNodeModel node, String fontFamily), String getFindFromText(), void changeNode(MindMapNode node, String newText), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), void setNodeStyle(MindMapNodeModel node, String style), void setFolded(MindMapNode node, boolean folded), Transferable copySingle(), void MindMapMapModel(FreeMindMain frame), String getLink(NodeAdapter node), void nodeChanged(TreeNode node), void setFontSize(MindMapNodeModel node, int fontSize), MindMapNodeModel loadTree(File file), FreeMindMain getFrame(), void fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children), void FileMapModel(FreeMindMain frame), boolean isSaved(), String getAsRTF(List mindMapNodes), int getNumberOfChangesSinceLastSave(), void blendNodeColor(MindMapNodeModel node), void paste(MindMapNode node, MindMapNode parent), boolean save(File file), void fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent), void splitNode(MindMapNode node, int caretPosition, String newText), Transferable copy(MindMapNode node), String getFindWhat(), void setNodeColor(MindMapNodeModel node, Color color), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), boolean saveInternal(File file, boolean isInternal), void setRoot(MindMapNode root), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), MindMapLinkRegistry getLinkRegistry(), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void increaseFontSize(MindMapNodeModel node, int increment), void removeNodeFromParent(MutableTreeNode node, boolean notify), Color getBackgroundColor(), int moveNodeTo(MindMapNode newChild, MindMapNode parent, int index, int direction), void FileMapModel(File root, FreeMindMain frame), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), void setBackgroundColor(Color backgroundColor), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), void applyPattern(NodeAdapter node, StylePattern pattern, boolean visible), void nodeStructureChanged(TreeNode node), void fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children), void insertNodeInto(MindMapNode newChild, MindMapNode parent), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), void fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children), void load(File file), boolean find(MindMapNode node, String what, boolean caseSensitive), void setItalic(MindMapNodeModel node), void MapAdapter(FreeMindMain frame), void paste(Transferable t, MindMapNode parent), Transferable copy(), File getFile(), String getRestoreable(), void insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index), void setEdgeWidth(MindMapNodeModel node, int width), String getAsPlainText(List mindMapNodes), void nodesWereRemoved(TreeNode parent, int[] childIndices, Object[] removedChildren), void setFile(File file), void nodesChanged(TreeNode node, int[] childIndices), void load(URL url), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void setCloudWidth(MindMapNodeModel node, int width), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void destroy(), void reload(TreeNode node), void displayNode(MindMapNode node, ArrayList NodesUnfoldedByDisplay), void setCloudColor(MindMapNodeModel node, Color color), void addIcon(MindMapNodeModel node, MindIcon icon), void applyPattern(NodeAdapter node, StylePattern pattern), void setLink(NodeAdapter node, String link), String getCode(), void loadMathStyle(Reader re), URL getURL(), void setURL(URL v), void setCloud(MindMapNodeModel node), BrowseNodeModel loadTree(URL url), boolean findNext(), void setCloudStyle(MindMapNodeModel node, String style), void joinNodes(), Transferable cut(MindMapNode node), void setNodeFont(MindMapNodeModel node, Font font), void setSaved(boolean saved), void setEdgeStyle(MindMapNodeModel node, String style) ]
freemind.modes.MindIcon =====> [ void setName(String name), String getName(), String getIconFileName(), String getDescription(FreeMindMain frame), Icon getIcon(FreeMindMain frame), void setIcon(Icon _associatedIcon), void MindIcon(String name), Vector getAllIconNames() ]
freemind.modes.MindMap =====> [ void removeNodeFromParent(MutableTreeNode node), int removeLastIcon(MindMapNodeModel node), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent, boolean asSibling), Transferable cut(), String getText(String textId), void SchemeMapModel(FreeMindMain frame), void setFile(), String tryToLock(File file), Object[] getPathToRoot(TreeNode node), boolean find(LinkedList nodes, String what, boolean caseSensitive), void nodesWereInserted(TreeNode node, int[] childIndices), void setEdgeColor(MindMapNodeModel node, Color color), void setNormalFont(MindMapNodeModel node), void setBold(MindMapNodeModel node), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void addLink(MindMapNodeModel source, MindMapNodeModel target), void setUnderlined(MindMapNodeModel node), Transferable copy(ArrayList selectedNodes, String inPlainText), boolean isReadOnly(), void BrowseMapModel(FreeMindMain frame), void setFontFamily(MindMapNodeModel node, String fontFamily), String getFindFromText(), void changeNode(MindMapNode node, String newText), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), void setNodeStyle(MindMapNodeModel node, String style), void setFolded(MindMapNode node, boolean folded), Transferable copySingle(), void MindMapMapModel(FreeMindMain frame), String getLink(NodeAdapter node), void nodeChanged(TreeNode node), void setFontSize(MindMapNodeModel node, int fontSize), MindMapNodeModel loadTree(File file), FreeMindMain getFrame(), void fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children), void FileMapModel(FreeMindMain frame), boolean isSaved(), String getAsRTF(List mindMapNodes), int getNumberOfChangesSinceLastSave(), void blendNodeColor(MindMapNodeModel node), void paste(MindMapNode node, MindMapNode parent), boolean save(File file), void fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent), void splitNode(MindMapNode node, int caretPosition, String newText), Transferable copy(MindMapNode node), String getFindWhat(), void setNodeColor(MindMapNodeModel node, Color color), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), boolean saveInternal(File file, boolean isInternal), void setRoot(MindMapNode root), void setBackgroundColor(Color color), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), MindMapLinkRegistry getLinkRegistry(), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void increaseFontSize(MindMapNodeModel node, int increment), void removeNodeFromParent(MutableTreeNode node, boolean notify), Color getBackgroundColor(), int moveNodeTo(MindMapNode newChild, MindMapNode parent, int index, int direction), void FileMapModel(File root, FreeMindMain frame), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), void setBackgroundColor(Color backgroundColor), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), void applyPattern(NodeAdapter node, StylePattern pattern, boolean visible), void nodeStructureChanged(TreeNode node), void fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children), void insertNodeInto(MindMapNode newChild, MindMapNode parent), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), void fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children), void load(File file), boolean find(MindMapNode node, String what, boolean caseSensitive), void setItalic(MindMapNodeModel node), void MapAdapter(FreeMindMain frame), void paste(Transferable t, MindMapNode parent), Transferable copy(), File getFile(), String getRestoreable(), void insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index), void setEdgeWidth(MindMapNodeModel node, int width), String getAsPlainText(List mindMapNodes), void nodesWereRemoved(TreeNode parent, int[] childIndices, Object[] removedChildren), void setFile(File file), void nodesChanged(TreeNode node, int[] childIndices), void load(URL url), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void setCloudWidth(MindMapNodeModel node, int width), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void destroy(), void reload(TreeNode node), void displayNode(MindMapNode node, ArrayList NodesUnfoldedByDisplay), void setCloudColor(MindMapNodeModel node, Color color), void addIcon(MindMapNodeModel node, MindIcon icon), void applyPattern(NodeAdapter node, StylePattern pattern), void setLink(NodeAdapter node, String link), String getCode(), void loadMathStyle(Reader re), URL getURL(), void setURL(URL v), void setCloud(MindMapNodeModel node), BrowseNodeModel loadTree(URL url), boolean findNext(), void setCloudStyle(MindMapNodeModel node, String style), void joinNodes(), Transferable cut(MindMapNode node), void setNodeFont(MindMapNodeModel node, Font font), void setSaved(boolean saved), void setEdgeStyle(MindMapNodeModel node, String style) ]
freemind.modes.MindMapArrowLink =====> [ void setEndArrow(String endArrow), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), Point getStartInclination(), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), Point getEndInclination(), String getEndArrow(), XMLElement save(), String getStartArrow(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void setStartArrow(String startArrow), void setStartInclination(Point startInclination), void setEndInclination(Point endInclination) ]
freemind.modes.MindMapCloud =====> [ void BrowseCloudModel(MindMapNode node, FreeMindMain frame), void MindMapCloudModel(MindMapNode node, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame), Color getExteriorColor(), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), XMLElement save() ]
freemind.modes.MindMapEdge =====> [ void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void setWidth(int width), void setStyle(String style), MindMapNode getSource(), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), String getStyle(), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), XMLElement save(), Stroke getStroke(), void EdgeAdapter(MindMapNode target, FreeMindMain frame), Color getColor(), int getWidth() ]
freemind.modes.MindMapLine =====> [ void setReferenceText(String referenceText), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), FreeMindMain getFrame(), void setStyle(String style), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), Color getExteriorColor(), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void setTarget(MindMapNode target), void setDestinationLabel(String destinationLabel), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), String toString(), void setSource(MindMapNode source), String getStyle(), void setEndArrow(String endArrow), String getDestinationLabel(), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), XMLElement save(), String getEndArrow(), void setStartArrow(String startArrow), Object clone(), Color getColor(), int getWidth(), void EdgeAdapter(MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapCloudModel(MindMapNode node, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void setWidth(int width), void CloudAdapter(MindMapNode target, FreeMindMain frame), MindMapNode getSource(), MindMapNode getTarget(), String getReferenceText(), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), String getStartArrow(), void setTarget(MindMapNode node), void setStartInclination(Point startInclination), void setEndInclination(Point endInclination), void BrowseCloudModel(MindMapNode node, FreeMindMain frame), Point getStartInclination(), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void LineAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), Point getEndInclination(), Stroke getStroke() ]
freemind.modes.MindMapLink =====> [ void setReferenceText(String referenceText), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), MindMapNode getSource(), MindMapNode getTarget(), String getReferenceText(), void setDestinationLabel(String destinationLabel), String getStartArrow(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void setSource(MindMapNode source), void setStartInclination(Point startInclination), void setEndInclination(Point endInclination), void setEndArrow(String endArrow), String getDestinationLabel(), Point getStartInclination(), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), Point getEndInclination(), String getEndArrow(), XMLElement save(), void setStartArrow(String startArrow) ]
freemind.modes.MindMapLinkRegistry =====> [ Vector getCuttedNode(String oldTargetID), Vector getAllLinksIntoMe(MindMapNode target), void deregisterLink(MindMapLink link), MindMapNode getTargetForID(String ID), ID_Registered registerLinkTarget(MindMapNode target), void clearCuttedNodeBuffer(), Vector getAssignedLinksVector(ID_Registered state), Vector getAllLinks(MindMapNode node), void cutNode(MindMapNode target), String getLabel(MindMapNode target), void LinkRegistryAdapter(), void registerLink(MindMapLink link), String generateUniqueID(String proposedID), ID_BasicState getState(MindMapNode node), ID_Registered registerLinkTarget(MindMapNode target, String proposedID), String getIDString(MindMapNode node), Vector getAllLinksFromMe(MindMapNode source), Vector getAllSources(MindMapNode target), void deregisterLinkTarget(MindMapNode target) ]
freemind.modes.MindMapLinkRegistry.ID_BasicState =====> [ void ID_UsedStateAdapter(MindMapNode target, String ID), String getID(), MindMapNode getTarget(), void ID_UsedStateAdapter(), void ID_RegisteredAdapter(MindMapNode target, String ID), String toString(), void clone(ID_UsedStateAdapter state) ]
freemind.modes.MindMapLinkRegistry.ID_Registered =====> [ void ID_RegisteredAdapter(MindMapNode target, String ID) ]
freemind.modes.MindMapLinkRegistry.ID_UsedState =====> [ void ID_UsedStateAdapter(MindMapNode target, String ID), MindMapNode getTarget(), void ID_UsedStateAdapter(), void ID_RegisteredAdapter(MindMapNode target, String ID), void clone(ID_UsedStateAdapter state) ]
freemind.modes.MindMapNode =====> [ boolean isRoot(), void setLink(String link), String getCodeClassicStyle(), MindMapNode getPreferredChild(), MindMapNode getParentNode(), void estabilishOwnFont(), ListIterator childrenUnfolded(), void addToPathVector(Vector pathVector), Vector getIcons(), MindMapNode basicCopy(), void MindMapNodeModel(Object userObject, FreeMindMain frame), String getFontSize(), void setFolded(boolean folded), void setColor(Color color), int removeLastIcon(), XMLElement save(), Color getColor(), void save(Writer writer, MindMapMapModel model), void setFontSize(int fontSize), void SchemeNodeModel(FreeMindMain frame), int getNodeLevel(), String getFontFamilyName(), void collectColors(HashSet colors), void setEdge(MindMapEdge edge), Font getFont(), freemind.main.Tools.BooleanHolder isLeft(), void toggleBold(), boolean hasFoldedStrictDescendant(), void FileNodeModel(File file, FreeMindMain frame), File getFile(), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), boolean isItalic(), String getCodeMathStyle(), void BrowseNodeModel(FreeMindMain frame), void addIcon(MindIcon _icon), void setParent(MindMapNode newParent), boolean isDescendantOf(MindMapNode node), FreeMindMain getFrame(), void setStyle(String style), void setPreferredChild(MindMapNode node), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), int getChildPosition(MindMapNode childNode), MindMapEdge getEdge(), NodeView getViewer(), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), String toString(), ListIterator childrenFolded(), String getStyle(), void setLeft(boolean isLeft), TreePath getPath(), void NodeAdapter(Object userObject, FreeMindMain frame), boolean isUnderlined(), void NodeAdapter(FreeMindMain frame), void addIcon(MindIcon icon), void setFont(Font font), void setBold(boolean bold), boolean isFolded(), void setUnderlined(boolean underlined), void setItalic(boolean italic), boolean hasChildren(), void BrowseNodeModel(Object userObject, FreeMindMain frame), MindMapNode shallowCopy(), String getLink(), boolean isBold(), void toggleItalic(), MindMapCloud getCloud(), void saveTXT(Writer fileout, int depth), void setCloud(MindMapCloud cloud), Tools.BooleanHolder isLeft(), void saveRTF(Writer fileout, int depth, HashMap colorTable), void MindMapNodeModel(FreeMindMain frame), void setViewer(NodeView viewer) ]
freemind.modes.Mode =====> [ MindMapController getMindMapController(), JMenu getModeFileMenu(), FreeMindMain getFrame(), void init(Controller c), void FileMode(), String toString(), Controller getController(), JMenu getModeEditMenu(), void restore(String restoreable), void SchemeMode(), JToolBar getModeToolBar(), void activate(), ModeController getModeController(), void restore(String restorable), void BrowseMode(), BrowseController getBrowseController(), JToolBar getLeftToolBar(), void MindMapMode() ]
freemind.modes.ModeController =====> [ Mode getMode(), String getLinkByFileChooser(FileFilter fileFilter), NodeAdapter getSelected(), void doubleClick(), boolean close(), JMenuItem add(JMenu menu, Action action, String keystroke), String getText(String textId), void setBlocked(boolean isBlocked), boolean binOptionIsTrue(String option), MindMapToolBar getToolBar(), MapAdapter getModel(), void open(), void anotherNodeSelected(MindMapNode n), Controller getController(), MapModule getMapModule(), MapAdapter newModel(), MindMapNode newNode(), void SchemeController(Mode mode), boolean extendSelection(MouseEvent e), JMenu getNodeMenu(), void setFontSize(int fontSize), LinkedList getSelecteds(), void load(File file), JPopupMenu getPopupMenu(), void showPopupMenu(MouseEvent e), void newMap(MindMap map), void ControllerAdapter(Mode mode), void BrowseController(Mode mode), void setMode(Mode mode), void mapOpened(boolean open), boolean saveAs(), MindMapNode getSelected(), void setFontFamily(String fontFamily), MapAdapter getMap(), MindMapMapModel getModel(), void edit(KeyEvent e, boolean addNew, boolean editLong), void editLong(NodeView node, String text, KeyEvent firstEvent), void toggleChildrenFolded(), void select(NodeView node), BrowseToolBar getToolBar(), void addNew(NodeView target, int newNodeMode, KeyEvent e), void load(URL url), MindMapNodeModel getSelected(), void edit(NodeView node, NodeView prevSelected, KeyEvent firstEvent, boolean isNewNode, boolean parentFolded, boolean editLong), void loadURL(String relative), FreeMindMain getFrame(), void setAllActions(boolean enabled), boolean save(), void createIconActions(), JMenu getBranchMenu(), void doubleClick(MouseEvent e), MindMap getModel(), void ControllerAdapter(), void updateMapModuleName(), void nodeChanged(MindMapNode n), JMenu getFileMenu(), void newMap(), MapView getView(), boolean isBlocked(), void loadPatterns(Reader reader), boolean save(File file), void createPatterns(List patternsList), JMenu getIconMenu(), void FileController(Mode mode), String getWidthTitle(int width), void add(JMenu menu, Action action), void handleLoadingException(Exception ex), BrowseMapModel getModel(), void loadURL(), URL getResource(String name), FileFilter getFileFilter(), void setImageByFileChooser(), void mouseWheelMoved(MouseWheelEvent e), void closeEdit(), JMenu getEditMenu(), void loadPatterns(File file), JMenu getEdgeMenu(), void setLinkByFileChooser(), void plainClick(MouseEvent e), BrowseNodeModel getSelected(), void toggleFolded(), JPopupMenu getPopupForModel(java.lang.Object obj), void changeComponentHeight(JComponent component, int difference, int minimum), void MindMapController(Mode mode), JMenu getLeadingNodeMenu(), void setLinkByTextField(), JToolBar getLeftToolBar(), JMenu getExtensionMenu() ]
freemind.modes.ModesCreator =====> [ Map getAllModes(), void ModesCreator(Controller c) ]
freemind.modes.NodeAdapter =====> [ boolean isRoot(), void setLink(String link), String getCodeClassicStyle(), MindMapNode getPreferredChild(), void estabilishOwnFont(), MindMapNode getParentNode(), ListIterator childrenUnfolded(), void addToPathVector(Vector pathVector), Vector getIcons(), MindMapNode basicCopy(), void MindMapNodeModel(Object userObject, FreeMindMain frame), String getFontSize(), void setFolded(boolean folded), void setColor(Color color), int removeLastIcon(), XMLElement save(), Color getColor(), void save(Writer writer, MindMapMapModel model), void setFontSize(int fontSize), void SchemeNodeModel(FreeMindMain frame), int getNodeLevel(), String getFontFamilyName(), void collectColors(HashSet colors), void setEdge(MindMapEdge edge), void toggleBold(), Font getFont(), boolean hasFoldedStrictDescendant(), void FileNodeModel(File file, FreeMindMain frame), File getFile(), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), boolean isItalic(), String getCodeMathStyle(), void BrowseNodeModel(FreeMindMain frame), void addIcon(MindIcon _icon), void setParent(MindMapNode newParent), boolean isDescendantOf(MindMapNode node), FreeMindMain getFrame(), void setStyle(String style), void setPreferredChild(MindMapNode node), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), NodeView getViewer(), MindMapEdge getEdge(), int getChildPosition(MindMapNode childNode), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), String getStyle(), ListIterator childrenFolded(), void setLeft(boolean isLeft), TreePath getPath(), void NodeAdapter(Object userObject, FreeMindMain frame), boolean isUnderlined(), void NodeAdapter(FreeMindMain frame), void setFont(Font font), void setBold(boolean bold), boolean isFolded(), void setUnderlined(boolean underlined), void setItalic(boolean italic), boolean hasChildren(), void BrowseNodeModel(Object userObject, FreeMindMain frame), MindMapNode shallowCopy(), String getLink(), void toggleItalic(), boolean isBold(), MindMapCloud getCloud(), void saveTXT(Writer fileout, int depth), void setCloud(MindMapCloud cloud), Tools.BooleanHolder isLeft(), void saveRTF(Writer fileout, int depth, HashMap colorTable), void MindMapNodeModel(FreeMindMain frame), void setViewer(NodeView viewer) ]
freemind.modes.StylePattern =====> [ String getEdgeStyle(), StylePattern getChildrenStylePattern(), void setNodeColor(Color v), void setNodeStyle(String nodeStyle), int getEdgeWidth(), Color getNodeColor(), boolean getAppliesToNodeFont(), String getNodeStyle(), List loadPatterns(File file), void setRecursive(boolean v), void setChildrenStylePattern(StylePattern ChildrenStylePattern), Font getNodeFont(), void StylePattern(XMLElement elm, List justConstructedPatterns), void setEdgeWidth(int edgeWidth), List loadPatterns(Reader reader), boolean getFolded(), boolean getRecursive(), String getText(), void loadPattern(XMLElement pattern, List justConstructedPatterns), void setFolded(boolean v), boolean getAppliesToEdge(), boolean getAppliesToChildren(), void setNodeIcon(MindIcon nodeIcon), boolean getAppliesToNodeIcon(), boolean getAppliesToNode(), void setText(String v), String getName(), void setName(String v), MindIcon getNodeIcon(), Color getEdgeColor(), void setEdgeColor(Color edgeColor), void setEdgeStyle(String edgeStyle), void setNodeFont(Font nodeFont) ]
freemind.modes.XMLElementAdapter =====> [ void setAttribute(String name, Object value), Object getUserObject(), void setName(String name), void addChild(XMLElement child), NodeAdapter createNodeAdapter(FreeMindMain frame), FreeMindMain getFrame(), void processUnfinishedLinks(MindMapLinkRegistry registry), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void setIDs(HashMap IDToTarget, MindMapLinkRegistry registry), void XMLElementAdapter(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), void completeElement(), void BrowseXMLElement(FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), NodeAdapter getMapChild(), XMLElement createAnotherElement(), void XMLElementAdapter(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame) ]
freemind.modes.browsemode.BrowseArrowLinkModel =====> [ void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), XMLElement save() ]
freemind.modes.browsemode.BrowseCloudModel =====> [ void BrowseCloudModel(MindMapNode node, FreeMindMain frame), XMLElement save() ]
freemind.modes.browsemode.BrowseController =====> [ BrowseMapModel getModel(), void loadURL(), void doubleClick(), JPopupMenu getPopupMenu(), void BrowseController(Mode mode), JMenu getEditMenu(), void setAllActions(boolean enabled), BrowseNodeModel getSelected(), JPopupMenu getPopupForModel(java.lang.Object obj), MapAdapter newModel(), MindMapNode newNode(), JMenu getFileMenu(), void edit(KeyEvent e, boolean addNew, boolean editLong), BrowseToolBar getToolBar(), void addNew(NodeView target, int newNodeMode, KeyEvent e), void load(URL url), void loadURL(String relative) ]
freemind.modes.browsemode.BrowseController.FollowLinkAction =====> [ void FollowLinkAction() ]
freemind.modes.browsemode.BrowseEdgeModel =====> [ void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void setStyle(String style), void setColor(Color color), XMLElement save() ]
freemind.modes.browsemode.BrowseMapModel =====> [ File getFile(), MindMapLinkRegistry getLinkRegistry(), void setURL(URL v), void load(File file), void BrowseMapModel(FreeMindMain frame), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), BrowseNodeModel loadTree(URL url), boolean isSaved(), URL getURL(), void load(URL url), void setFile(), boolean save(File file) ]
freemind.modes.browsemode.BrowseMode =====> [ JMenu getModeFileMenu(), void restore(String restoreable), JToolBar getModeToolBar(), void activate(), void init(Controller c), ModeController getModeController(), void BrowseMode(), BrowseController getBrowseController(), Controller getController(), JToolBar getLeftToolBar(), JMenu getModeEditMenu() ]
freemind.modes.browsemode.BrowseNodeModel =====> [ String getStyle(), void BrowseNodeModel(FreeMindMain frame), XMLElement save(), void BrowseNodeModel(Object userObject, FreeMindMain frame) ]
freemind.modes.browsemode.BrowsePopupMenu =====> [ void BrowsePopupMenu(BrowseController c), void add(Action action, String keystroke) ]
freemind.modes.browsemode.BrowseToolBar =====> [ void BrowseToolBar(BrowseController controller), void setURLField(String text) ]
freemind.modes.browsemode.BrowseXMLElement =====> [ ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame), NodeAdapter createNodeAdapter(FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), XMLElement createAnotherElement(), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame) ]
freemind.modes.filemode.FileController =====> [ MindMapNode getSelected(), void FileController(Mode mode), MapAdapter newModel(), JPopupMenu getPopupMenu(), MindMapNode newNode(), JMenu getEditMenu(), MindMap getModel() ]
freemind.modes.filemode.FileController.CenterAction =====> [ void CenterAction() ]
freemind.modes.filemode.FileController.OpenPathAction =====> [ void OpenPathAction() ]
freemind.modes.filemode.FileEdgeModel =====> [ void FileEdgeModel(MindMapNode node, FreeMindMain frame) ]
freemind.modes.filemode.FileMapModel =====> [ void load(File file), void FileMapModel(FreeMindMain frame), void FileMapModel(File root, FreeMindMain frame), boolean isSaved(), void changeNode(MindMapNode node, String newText), boolean save(File file) ]
freemind.modes.filemode.FileMode =====> [ JMenu getModeFileMenu(), void restore(String restoreable), JToolBar getModeToolBar(), void activate(), void init(Controller c), ModeController getModeController(), void FileMode(), Controller getController(), JToolBar getLeftToolBar(), JMenu getModeEditMenu() ]
freemind.modes.filemode.FileNodeModel =====> [ String getStyle(), File getFile(), ListIterator childrenFolded(), String getLink(), boolean hasChildren(), void FileNodeModel(File file, FreeMindMain frame), Color getColor(), ListIterator childrenUnfolded() ]
freemind.modes.filemode.FilePopupMenu =====> [ void FilePopupMenu(FileController c), void add(Action action, String keystroke) ]
freemind.modes.filemode.FileToolBar =====> [ void FileToolBar(FileController controller) ]
freemind.modes.mindmapmode.MindMapArrowLinkModel =====> [ void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), XMLElement save() ]
freemind.modes.mindmapmode.MindMapCloudModel =====> [ void MindMapCloudModel(MindMapNode node, FreeMindMain frame), XMLElement save() ]
freemind.modes.mindmapmode.MindMapController =====> [ MindMapToolBar getToolBar(), void setAllActions(boolean enabled), void createIconActions(), void anotherNodeSelected(MindMapNode n), JMenu getBranchMenu(), MapAdapter newModel(), void nodeChanged(MindMapNode n), MindMapNode newNode(), JMenu getFileMenu(), JMenu getNodeMenu(), void loadPatterns(Reader reader), void createPatterns(List patternsList), void setFontSize(int fontSize), JMenu getIconMenu(), String getWidthTitle(int width), JPopupMenu getPopupMenu(), FileFilter getFileFilter(), void loadPatterns(File file), JMenu getEditMenu(), JMenu getEdgeMenu(), void setFontFamily(String fontFamily), JPopupMenu getPopupForModel(java.lang.Object obj), MindMapMapModel getModel(), void MindMapController(Mode mode), JMenu getLeadingNodeMenu(), MindMapNodeModel getSelected(), JToolBar getLeftToolBar(), JMenu getExtensionMenu() ]
freemind.modes.mindmapmode.MindMapController.ApplyPatternAction =====> [ void ApplyPatternAction(StylePattern pattern) ]
freemind.modes.mindmapmode.MindMapController.BubbleAction =====> [ void BubbleAction() ]
freemind.modes.mindmapmode.MindMapController.ChangeArrowsInArrowLinkAction =====> [ void ChangeArrowsInArrowLinkAction(String text, String iconPath, MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow) ]
freemind.modes.mindmapmode.MindMapController.CloudColorAction =====> [ void CloudColorAction() ]
freemind.modes.mindmapmode.MindMapController.ColorArrowLinkAction =====> [ void ColorArrowLinkAction(MindMapNode source, MindMapArrowLinkModel arrowLink) ]
freemind.modes.mindmapmode.MindMapController.EdgeColorAction =====> [ void EdgeColorAction() ]
freemind.modes.mindmapmode.MindMapController.EdgeStyleAction =====> [ void EdgeStyleAction(String style) ]
freemind.modes.mindmapmode.MindMapController.EdgeWidthAction =====> [ void EdgeWidthAction(int width) ]
freemind.modes.mindmapmode.MindMapController.ExportBranchAction =====> [ void ExportBranchAction() ]
freemind.modes.mindmapmode.MindMapController.ExportBranchToHTMLAction =====> [ void ExportBranchToHTMLAction(MindMapController controller) ]
freemind.modes.mindmapmode.MindMapController.ExportToHTMLAction =====> [ void ExportToHTMLAction(MindMapController controller) ]
freemind.modes.mindmapmode.MindMapController.FollowLinkAction =====> [ void FollowLinkAction() ]
freemind.modes.mindmapmode.MindMapController.ForkAction =====> [ void ForkAction() ]
freemind.modes.mindmapmode.MindMapController.IconAction =====> [ void IconAction(MindIcon _icon) ]
freemind.modes.mindmapmode.MindMapController.ImportBranchAction =====> [ void ImportBranchAction() ]
freemind.modes.mindmapmode.MindMapController.ImportExplorerFavoritesAction =====> [ void ImportExplorerFavoritesAction() ]
freemind.modes.mindmapmode.MindMapController.ImportFolderStructureAction =====> [ void ImportFolderStructureAction() ]
freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchAction =====> [ void ImportLinkedBranchAction() ]
freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchWithoutRootAction =====> [ void ImportLinkedBranchWithoutRootAction() ]
freemind.modes.mindmapmode.MindMapController.JoinNodesAction =====> [ void JoinNodesAction() ]
freemind.modes.mindmapmode.MindMapController.NodeColorAction =====> [ void NodeColorAction() ]
freemind.modes.mindmapmode.MindMapController.NodeGeneralAction =====> [ void NodeGeneralAction(String textID, String iconPath, SingleNodeOperation singleNodeOperation) ]
freemind.modes.mindmapmode.MindMapController.RemoveArrowLinkAction =====> [ void RemoveArrowLinkAction(MindMapNode source, MindMapArrowLinkModel arrowLink) ]
freemind.modes.mindmapmode.MindMapController.SingleNodeOperation =====> [ void apply(MindMapMapModel map, MindMapNodeModel node) ]
freemind.modes.mindmapmode.MindMapEdgeModel =====> [ void setWidth(int width), void setStyle(String style), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), XMLElement save() ]
freemind.modes.mindmapmode.MindMapMapModel =====> [ void setCloudWidth(MindMapNodeModel node, int width), void increaseFontSize(MindMapNodeModel node, int increment), MindMapNodeModel loadTree(File file), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void destroy(), int removeLastIcon(MindMapNodeModel node), void setCloudColor(MindMapNodeModel node, Color color), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), void addIcon(MindMapNodeModel node, MindIcon icon), String getAsRTF(List mindMapNodes), void blendNodeColor(MindMapNodeModel node), String tryToLock(File file), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), void setEdgeColor(MindMapNodeModel node, Color color), void setNormalFont(MindMapNodeModel node), boolean save(File file), void setBold(MindMapNodeModel node), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void addLink(MindMapNodeModel source, MindMapNodeModel target), void setUnderlined(MindMapNodeModel node), void load(File file), void setItalic(MindMapNodeModel node), void splitNode(MindMapNode node, int caretPosition, String newText), void setFontFamily(MindMapNodeModel node, String fontFamily), Transferable copy(MindMapNode node), void setCloud(MindMapNodeModel node), void setNodeColor(MindMapNodeModel node, Color color), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), boolean saveInternal(File file, boolean isInternal), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), void setCloudStyle(MindMapNodeModel node, String style), String getRestoreable(), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), void setEdgeWidth(MindMapNodeModel node, int width), void setNodeStyle(MindMapNodeModel node, String style), void joinNodes(), String getAsPlainText(List mindMapNodes), MindMapLinkRegistry getLinkRegistry(), void setNodeFont(MindMapNodeModel node, Font font), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), void MindMapMapModel(FreeMindMain frame), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void setEdgeStyle(MindMapNodeModel node, String style), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void setFontSize(MindMapNodeModel node, int fontSize) ]
freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager =====> [ String tryToLock(File file), void releaseTimer(), String popLockingUserOfOldLock(), void releaseLock() ]
freemind.modes.mindmapmode.MindMapMapModel.LockManager =====> [ String tryToLock(File file), void releaseTimer(), String popLockingUserOfOldLock(), void writeSemaphoreFile(File inSemaphoreFile), void releaseLock(), File getSemaphoreFile(File mapFile) ]
freemind.modes.mindmapmode.MindMapMapModel.doAutomaticSave =====> [ void doAutomaticSave(MindMapMapModel model, int numberOfTempFiles, boolean filesShouldBeDeletedAfterShutdown, File pathToStore) ]
freemind.modes.mindmapmode.MindMapMode =====> [ MindMapController getMindMapController(), JMenu getModeFileMenu(), void restore(String restoreable), JToolBar getModeToolBar(), void activate(), void init(Controller c), ModeController getModeController(), Controller getController(), JToolBar getLeftToolBar(), void MindMapMode(), JMenu getModeEditMenu() ]
freemind.modes.mindmapmode.MindMapNodeModel =====> [ String getStyle(), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), MindMapNode basicCopy(), void collectColors(HashSet colors), void MindMapNodeModel(Object userObject, FreeMindMain frame), void saveTXT(Writer fileout, int depth), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), void saveRTF(Writer fileout, int depth, HashMap colorTable), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), void MindMapNodeModel(FreeMindMain frame), void save(Writer writer, MindMapMapModel model) ]
freemind.modes.mindmapmode.MindMapPopupMenu =====> [ void MindMapPopupMenu(MindMapController c) ]
freemind.modes.mindmapmode.MindMapToolBar =====> [ void selectFontSize(String fontSize), void selectFontName(String fontName), void setAllActions(boolean enabled), void MindMapToolBar(MindMapController controller), JToolBar getLeftToolBar() ]
freemind.modes.mindmapmode.MindMapXMLElement =====> [ ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), NodeAdapter createNodeAdapter(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), XMLElement createAnotherElement(), void MindMapXMLElement(FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame) ]
freemind.modes.schememode.SchemeController =====> [ MindMapNode getSelected(), boolean saveAs(), MapAdapter newModel(), JPopupMenu getPopupMenu(), MindMapNode newNode(), void SchemeController(Mode mode), MindMap getModel() ]
freemind.modes.schememode.SchemeController.EvaluateAction =====> [ void EvaluateAction() ]
freemind.modes.schememode.SchemeEdgeModel =====> [ void SchemeEdgeModel(MindMapNode node, FreeMindMain frame) ]
freemind.modes.schememode.SchemeMapModel =====> [ void load(File file), String getCode(), void loadMathStyle(Reader re), void SchemeMapModel(FreeMindMain frame), boolean save(File file) ]
freemind.modes.schememode.SchemeMode =====> [ JMenu getModeFileMenu(), void SchemeMode(), void restore(String restoreable), JToolBar getModeToolBar(), FreeMindMain getFrame(), void activate(), void init(Controller c), ModeController getModeController(), Controller getController(), JToolBar getLeftToolBar(), JMenu getModeEditMenu() ]
freemind.modes.schememode.SchemeNodeModel =====> [ String getCodeMathStyle(), String getCodeClassicStyle(), void SchemeNodeModel(FreeMindMain frame) ]
freemind.modes.schememode.SchemePopupMenu =====> [ void SchemePopupMenu(SchemeController c) ]
freemind.modes.schememode.SchemeToolBar =====> [ void SchemeToolBar(SchemeController controller) ]
freemind.view.MapModule =====> [ void setName(String name), Mode getMode(), void MapModule(MindMap model, MapView view, Mode mode), void setModel(MindMap model), void setView(MapView view), MapView getView(), void rename(), MindMap getModel() ]
freemind.view.mindmapview.ArrowLinkView =====> [ Rectangle getBounds(), Rectangle2D getControlPoint(Point2D p), void paintArrow(Point p1, Point p3, Graphics2D g), boolean detectCollision(Point p), MapView getMap(), int getRealWidth(), void setRendering(Graphics2D g), MindMapArrowLink getModel(), void paint(Graphics graphics), double getZoom(), Stroke getStroke(), void ArrowLinkView(MindMapArrowLink arrowLinkModel, NodeView source, NodeView target), Color getColor(), int getWidth() ]
freemind.view.mindmapview.BezierEdgeView =====> [ void BezierEdgeView(NodeView source, NodeView target), void update(), void paint(Graphics2D g), Color getColor() ]
freemind.view.mindmapview.BubbleNodeView =====> [ Point getOutPoint(), Point getInPoint(), void BubbleNodeView(MindMapNode model, MapView map), void paintSelected(Graphics2D graphics, Dimension size), int getLeftWidthOverhead(), int getAlignment() ]
freemind.view.mindmapview.CloudView =====> [ void setRendering(Graphics2D g), void CloudView(MindMapCloud cloudModel, NodeView source, int iterativeLevel), void paint(Graphics graphics), Color getExteriorColor(), MapView getMap(), MindMapCloud getModel(), double getZoom(), int getRealWidth(), void paintClouds(Graphics2D g, Graphics2D gstroke, double x0, double y0, double x1, double y1, double distanceToConvexHull), Stroke getStroke(), Color getColor(), int getWidth() ]
freemind.view.mindmapview.ConvexHull =====> [ Vector calculateHull(LinkedList coordinates), int ccw(Point p0, Point p1, Point p2), Vector doGraham(Vector p) ]
freemind.view.mindmapview.ConvexHull.thetaComparator =====> [ void thetaComparator(Point p0), int compare(Object p1, Object p2), double theta(Point p1, Point p2) ]
freemind.view.mindmapview.EdgeView =====> [ boolean isAntialiasEdges(), void SharpBezierEdgeView(NodeView source, NodeView target), MapView getMap(), void update(), int getRealWidth(), int getSourceShift(), void LinearEdgeView(NodeView source, NodeView target), void remove(), void SharpLinearEdgeView(NodeView source, NodeView target), int getNodeShift(NodeView node), void BezierEdgeView(NodeView source, NodeView target), void EdgeView(NodeView source, NodeView target), void setRendering(Graphics2D g), void paint(Graphics2D g), MindMapEdge getModel(), Stroke getStroke(), int getTargetShift(), boolean isAntialiasAll(), JLabel getLabel(), Color getColor(), int getWidth() ]
freemind.view.mindmapview.ForkNodeView =====> [ void ForkNodeView(MindMapNode model, MapView map) ]
freemind.view.mindmapview.LinearEdgeView =====> [ void update(), void paint(Graphics2D g), void LinearEdgeView(NodeView source, NodeView target), Color getColor() ]
freemind.view.mindmapview.MapView =====> [ void MapView(MindMap model, Controller controller), void toggleSelected(NodeView newSelected), MindMapLayout getMindMapLayout(), boolean isSelected(NodeView n), void initRoot(), void move(KeyEvent e), void paintClouds(NodeView source, Graphics graphics, int iterativeLevel), void selectBranch(NodeView newlySelectedNodeView, boolean extend), void setMoveCursor(boolean isHand), void deselect(NodeView newSelected), void scrollBy(int x, int y), boolean isPrinting(), int getMaxNodeWidth(), Controller getController(), void scrollNodeToVisible(NodeView node, int extraWidth), MindMap getModel(), void selectAsTheOnlyOneSelected(NodeView newSelected), int getZoomed(int number), void paintLinks(NodeView source, Graphics2D graphics, HashMap labels, HashSet LinkAlreadyVisited), void makeTheSelected(NodeView newSelected), void setZoom(float zoom), void extendSelectionWithKeyMove(NodeView newlySelectedNodeView, KeyEvent e), ArrayList getSelectedsSortedByY(), NodeView getSelected(), NodeView getSelected(int i), boolean selectContinuous(NodeView newSelected), NodeView getNeighbour(int directionCode), Rectangle getInnerBounds(NodeView source), void paintEdges(NodeView source, Graphics2D g), NodeKeyListener getNodeKeyListener(), LinkedList getSelecteds(), MapView getMap(), DropTargetListener getNodeDropListener(), void moveToRoot(), LinkedList getSelectedsByDepth(), int getSiblingMaxLevel(), ArrayList getSelectedNodesSortedByY(), void centerNode(NodeView node), NodeMouseMotionListener getNodeMouseMotionListener(), float getZoom(), MindMapArrowLink detectCollision(Point p), void setSiblingMaxLevel(int level), NodeView getRoot(), DragGestureListener getNodeDragListener(), void scrollNodeToVisible(NodeView node), void collectLabels(NodeView source, HashMap labels) ]
freemind.view.mindmapview.MapView.nodesDepthComparator =====> [ void nodesDepthComparator(), int compare(Object p1, Object p2) ]
freemind.view.mindmapview.MindMapLayout =====> [ MapView getMapView(), int sumOfAlreadyComputedTreeHeights(LinkedList v), FreeMindMain getFrame(), void updateRelativeYOfChildren(NodeView node), void layout(NodeView node), void placeNode(NodeView node, int relativeX, int relativeY), void layout(), void resizeMap(int outmostX), void updateTreeHeightsAndRelativeYOfDescendantsAndAncestors(NodeView node), void updateTreeHeightsAndRelativeYOfAncestors(NodeView node), void updateTreeHeightsAndRelativeYOfWholeMap(), RootNodeView getRoot(), void MindMapLayout(MapView map), void updateTreeHeightsAndRelativeYOfDescendants(NodeView node), void updateTreeHeightFromChildren(NodeView node) ]
freemind.view.mindmapview.MultipleImage =====> [ void addImage(ImageIcon image), int getImageCount(), void MultipleImage(double zoom) ]
freemind.view.mindmapview.NodeView =====> [ boolean isRoot(), NodeView getPreviousSiblingSingle(), void setTreeHeight(int treeHeight), void updateCursor(double xCoord), Point getLinkPoint(), void insert(), void setDraggedOver(int draggedOver), boolean isParentOf(NodeView myNodeView), void BubbleNodeView(MindMapNode model, MapView map), void setEdge(EdgeView edge), NodeView getNextPage(), MapView getMap(), boolean dropAsSibling(double xCoord), void getCoordinates(LinkedList inList, int additionalDistanceForConvexHull), void NodeView(MindMapNode model, MapView map), void setLeft(boolean left), void remove(), boolean isLeft(), int getAlignment(), LinkedList getLeft(), void setModel(MindMapNode model), void addDragListener(DragGestureListener dgl), void insert(MindMapNode newNode), boolean isSelected(), LinkedList getChildrenViews(), LinkedList getRight(), void setDraggedOver(Point p), void addDropListener(DropTargetListener dtl), int getTreeHeight(), NodeView getNextSibling(), void update(), int getLeftWidthOverhead(), NodeView getParentView(), NodeView newNodeView(MindMapNode model, MapView map), void paintSelected(Graphics2D graphics, Dimension size), NodeView getPreviousSibling(), boolean dropPosition(double xCoord), NodeView getPreviousPage(), int getDraggedOver(), NodeView getNextSiblingSingle(), boolean isChildOf(NodeView myNodeView), void setMap(MapView map), boolean getIsLong(), void RootNodeView(MindMapNode model, MapView map), void updateAll(), EdgeView getEdge(), boolean followLink(double xCoord), boolean isSiblingOf(NodeView myNodeView), LinkedList getSiblingViews(), Point getOutPoint(), Point getInPoint(), void setRendering(Graphics2D g), void paintDragOver(Graphics2D graphics, Dimension size), void ForkNodeView(MindMapNode model, MapView map), MindMapNode getModel() ]
freemind.view.mindmapview.RootNodeView =====> [ LinkedList getRight(), void setDraggedOver(Point p), NodeView getNextSibling(), void RootNodeView(MindMapNode model, MapView map), boolean dropAsSibling(double xCoord), EdgeView getEdge(), LinkedList getLeft(), NodeView getParentView(), Point getOutPoint(), Point getInPoint(), void setRendering(Graphics2D g), void insert(MindMapNode newNode), NodeView getPreviousSibling(), void paintSelected(Graphics2D graphics, Dimension size), boolean dropPosition(double xCoord), void paintDragOver(Graphics2D graphics, Dimension size), void setEdge(EdgeView edge) ]
freemind.view.mindmapview.SharpBezierEdgeView =====> [ void SharpBezierEdgeView(NodeView source, NodeView target), void update(), void paint(Graphics2D g), Color getColor() ]
freemind.view.mindmapview.SharpLinearEdgeView =====> [ void update(), void paint(Graphics2D g), void SharpLinearEdgeView(NodeView source, NodeView target), Color getColor() ]

Done building lattice!
NODE_0[[freemind.controller.ColorSwatch, freemind.controller.Controller, freemind.controller.Controller.AboutAction, freemind.controller.Controller.BackgroundAction, freemind.controller.Controller.BackgroundSwatch, freemind.controller.Controller.CloseAction, freemind.controller.Controller.DocumentationAction, freemind.controller.Controller.HistoryManager, freemind.controller.Controller.HistoryNextMapAction, freemind.controller.Controller.HistoryPreviousMapAction, freemind.controller.Controller.LicenseAction, freemind.controller.Controller.MapModuleManager, freemind.controller.Controller.MoveToRootAction, freemind.controller.Controller.NavigationNextMapAction, freemind.controller.Controller.NavigationPreviousMapAction, freemind.controller.Controller.OpenFAQAction, freemind.controller.Controller.OptionAntialiasAction, freemind.controller.Controller.OptionHTMLExportFoldingAction, freemind.controller.Controller.OptionSelectionMechanismAction, freemind.controller.Controller.PageAction, freemind.controller.Controller.PrintAction, freemind.controller.Controller.QuitAction, freemind.controller.Controller.ToggleLeftToolbarAction, freemind.controller.Controller.ToggleMenubarAction, freemind.controller.Controller.ToggleToolbarAction, freemind.controller.Controller.ZoomInAction, freemind.controller.Controller.ZoomOutAction, freemind.controller.LastOpenedList, freemind.controller.MainToolBar, freemind.controller.MapMouseMotionListener, freemind.controller.MapMouseWheelListener, freemind.controller.MenuBar, freemind.controller.MindMapNodesSelection, freemind.controller.NodeDragListener, freemind.controller.NodeDropListener, freemind.controller.NodeKeyListener, freemind.controller.NodeMouseMotionListener, freemind.controller.NodeMouseMotionListener.timeDelayedSelection, freemind.main.ExampleFileFilter, freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.main.Tools, freemind.main.Tools.BooleanHolder, freemind.main.Tools.IntHolder, freemind.main.Tools.ObjectHolder, freemind.main.Tools.Pair, freemind.main.XMLElement, freemind.main.XMLParseException, freemind.modes.ArrowLinkAdapter, freemind.modes.CloudAdapter, freemind.modes.ControllerAdapter, freemind.modes.ControllerAdapter.CopyAction, freemind.modes.ControllerAdapter.CopySingleAction, freemind.modes.ControllerAdapter.CutAction, freemind.modes.ControllerAdapter.EditAction, freemind.modes.ControllerAdapter.EditCopyAction, freemind.modes.ControllerAdapter.EditLongAction, freemind.modes.ControllerAdapter.EditPopupMenu, freemind.modes.ControllerAdapter.FileOpener, freemind.modes.ControllerAdapter.FindAction, freemind.modes.ControllerAdapter.FindNextAction, freemind.modes.ControllerAdapter.FollowLinkAction, freemind.modes.ControllerAdapter.GotoLinkNodeAction, freemind.modes.ControllerAdapter.NewChildAction, freemind.modes.ControllerAdapter.NewChildWithoutFocusAction, freemind.modes.ControllerAdapter.NewMapAction, freemind.modes.ControllerAdapter.NewPreviousSiblingAction, freemind.modes.ControllerAdapter.NewSiblingAction, freemind.modes.ControllerAdapter.NodeDownAction, freemind.modes.ControllerAdapter.NodeUpAction, freemind.modes.ControllerAdapter.OpenAction, freemind.modes.ControllerAdapter.PasteAction, freemind.modes.ControllerAdapter.RemoveAction, freemind.modes.ControllerAdapter.SaveAction, freemind.modes.ControllerAdapter.SaveAsAction, freemind.modes.ControllerAdapter.SetImageByFileChooserAction, freemind.modes.ControllerAdapter.SetLinkByFileChooserAction, freemind.modes.ControllerAdapter.SetLinkByTextFieldAction, freemind.modes.ControllerAdapter.ToggleChildrenFoldedAction, freemind.modes.ControllerAdapter.ToggleFoldedAction, freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.LinkAdapter, freemind.modes.LinkRegistryAdapter, freemind.modes.LinkRegistryAdapter.ID_BasicStateAdapter, freemind.modes.LinkRegistryAdapter.ID_RegisteredAdapter, freemind.modes.LinkRegistryAdapter.ID_UsedStateAdapter, freemind.modes.MapAdapter, freemind.modes.MindIcon, freemind.modes.MindMap, freemind.modes.MindMapArrowLink, freemind.modes.MindMapCloud, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.MindMapLink, freemind.modes.MindMapLinkRegistry, freemind.modes.MindMapLinkRegistry.ID_BasicState, freemind.modes.MindMapLinkRegistry.ID_Registered, freemind.modes.MindMapLinkRegistry.ID_UsedState, freemind.modes.MindMapNode, freemind.modes.Mode, freemind.modes.ModeController, freemind.modes.ModesCreator, freemind.modes.NodeAdapter, freemind.modes.StylePattern, freemind.modes.XMLElementAdapter, freemind.modes.browsemode.BrowseArrowLinkModel, freemind.modes.browsemode.BrowseCloudModel, freemind.modes.browsemode.BrowseController, freemind.modes.browsemode.BrowseController.FollowLinkAction, freemind.modes.browsemode.BrowseEdgeModel, freemind.modes.browsemode.BrowseMapModel, freemind.modes.browsemode.BrowseMode, freemind.modes.browsemode.BrowseNodeModel, freemind.modes.browsemode.BrowsePopupMenu, freemind.modes.browsemode.BrowseToolBar, freemind.modes.browsemode.BrowseXMLElement, freemind.modes.filemode.FileController, freemind.modes.filemode.FileController.CenterAction, freemind.modes.filemode.FileController.OpenPathAction, freemind.modes.filemode.FileEdgeModel, freemind.modes.filemode.FileMapModel, freemind.modes.filemode.FileMode, freemind.modes.filemode.FileNodeModel, freemind.modes.filemode.FilePopupMenu, freemind.modes.filemode.FileToolBar, freemind.modes.mindmapmode.MindMapArrowLinkModel, freemind.modes.mindmapmode.MindMapCloudModel, freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapController.ApplyPatternAction, freemind.modes.mindmapmode.MindMapController.BubbleAction, freemind.modes.mindmapmode.MindMapController.ChangeArrowsInArrowLinkAction, freemind.modes.mindmapmode.MindMapController.CloudColorAction, freemind.modes.mindmapmode.MindMapController.ColorArrowLinkAction, freemind.modes.mindmapmode.MindMapController.EdgeColorAction, freemind.modes.mindmapmode.MindMapController.EdgeStyleAction, freemind.modes.mindmapmode.MindMapController.EdgeWidthAction, freemind.modes.mindmapmode.MindMapController.ExportBranchAction, freemind.modes.mindmapmode.MindMapController.ExportBranchToHTMLAction, freemind.modes.mindmapmode.MindMapController.ExportToHTMLAction, freemind.modes.mindmapmode.MindMapController.FollowLinkAction, freemind.modes.mindmapmode.MindMapController.ForkAction, freemind.modes.mindmapmode.MindMapController.IconAction, freemind.modes.mindmapmode.MindMapController.ImportBranchAction, freemind.modes.mindmapmode.MindMapController.ImportExplorerFavoritesAction, freemind.modes.mindmapmode.MindMapController.ImportFolderStructureAction, freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchAction, freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchWithoutRootAction, freemind.modes.mindmapmode.MindMapController.JoinNodesAction, freemind.modes.mindmapmode.MindMapController.NodeColorAction, freemind.modes.mindmapmode.MindMapController.NodeGeneralAction, freemind.modes.mindmapmode.MindMapController.RemoveArrowLinkAction, freemind.modes.mindmapmode.MindMapController.SingleNodeOperation, freemind.modes.mindmapmode.MindMapEdgeModel, freemind.modes.mindmapmode.MindMapMapModel, freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager, freemind.modes.mindmapmode.MindMapMapModel.LockManager, freemind.modes.mindmapmode.MindMapMapModel.doAutomaticSave, freemind.modes.mindmapmode.MindMapMode, freemind.modes.mindmapmode.MindMapNodeModel, freemind.modes.mindmapmode.MindMapPopupMenu, freemind.modes.mindmapmode.MindMapToolBar, freemind.modes.mindmapmode.MindMapXMLElement, freemind.modes.schememode.SchemeController, freemind.modes.schememode.SchemeController.EvaluateAction, freemind.modes.schememode.SchemeEdgeModel, freemind.modes.schememode.SchemeMapModel, freemind.modes.schememode.SchemeMode, freemind.modes.schememode.SchemeNodeModel, freemind.modes.schememode.SchemePopupMenu, freemind.modes.schememode.SchemeToolBar, freemind.view.MapModule, freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.BubbleNodeView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.ConvexHull, freemind.view.mindmapview.ConvexHull.thetaComparator, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.ForkNodeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.MapView, freemind.view.mindmapview.MapView.nodesDepthComparator, freemind.view.mindmapview.MindMapLayout, freemind.view.mindmapview.MultipleImage, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.RootNodeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[]]
ITS CHILDREN:=================
	->NODE_1[[freemind.modes.browsemode.BrowsePopupMenu, freemind.modes.filemode.FilePopupMenu],[void add(Action action, String keystroke)]]
	->ITS CHILDREN:=================
	->	->NODE_2[[freemind.modes.browsemode.BrowsePopupMenu],[void BrowsePopupMenu(BrowseController c), void add(Action action, String keystroke)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[[],[ArrayList getSelectedNodesSortedByY(), ArrayList getSelectedsSortedByY(), ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), BrowseController getBrowseController(), BrowseMapModel getModel(), BrowseNodeModel getSelected(), BrowseNodeModel loadTree(URL url), BrowseToolBar getToolBar(), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), Color getBackgroundColor(), Color getColor(), Color getEdgeColor(), Color getExteriorColor(), Color getNodeColor(), Color xmlToColor(String string), Container getContentPane(), Container getViewport(), Controller getController(), Cursor getCursorByAction(int dragAction), DragGestureListener getNodeDragListener(), DropTargetListener getNodeDropListener(), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), EdgeView getEdge(), Enumeration enumerateAttributeNames(), Enumeration enumerateChildren(), Enumeration enumeratePropertyNames(), File getFile(), File getPatternsFile(), File getSemaphoreFile(File mapFile), FileFilter getFileFilter(), Font getDefaultFont(), Font getFont(), Font getFontThroughMap(Font font), Font getNodeFont(), FreeMindMain getFrame(), ID_BasicState getState(MindMapNode node), ID_Registered registerLinkTarget(MindMapNode target), ID_Registered registerLinkTarget(MindMapNode target, String proposedID), Icon getIcon(FreeMindMain frame), JLabel getLabel(), JLayeredPane getLayeredPane(), JMenu getBranchMenu(), JMenu getEdgeMenu(), JMenu getEditMenu(), JMenu getExtensionMenu(), JMenu getFileMenu(), JMenu getIconMenu(), JMenu getLeadingNodeMenu(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JMenu getNodeMenu(), JMenuItem add(JMenu menu, Action action, String keystroke), JPopupMenu getMapsPopupMenu(), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), JToolBar getToolBar(), LastOpenedList getLastOpenedList(), LinkedList getChildrenViews(), LinkedList getLeft(), LinkedList getRight(), LinkedList getSelecteds(), LinkedList getSelectedsByDepth(), LinkedList getSiblingViews(), List loadPatterns(File file), List loadPatterns(Reader reader), List stringToList(String string), ListIterator childrenFolded(), ListIterator childrenUnfolded(), ListIterator listIterator(), Map getAllModes(), Map getMapModules(), Map getModes(), MapAdapter getMap(), MapAdapter getModel(), MapAdapter newModel(), MapModule getMapModule(), MapModuleManager getMapModuleManager(), MapMouseMotionListener getMapMouseMotionListener(), MapMouseWheelListener getMapMouseWheelListener(), MapView getMap(), MapView getMapView(), MapView getView(), MenuBar getFreeMindMenuBar(), MindIcon getNodeIcon(), MindMap getModel(), MindMapArrowLink detectCollision(Point p), MindMapArrowLink getModel(), MindMapCloud getCloud(), MindMapCloud getModel(), MindMapController getMindMapController(), MindMapEdge getEdge(), MindMapEdge getModel(), MindMapLayout getMindMapLayout(), MindMapLinkRegistry getLinkRegistry(), MindMapMapModel getModel(), MindMapNode basicCopy(), MindMapNode getModel(), MindMapNode getParentNode(), MindMapNode getPreferredChild(), MindMapNode getSelected(), MindMapNode getSource(), MindMapNode getTarget(), MindMapNode getTargetForID(String ID), MindMapNode newNode(), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), MindMapNode shallowCopy(), MindMapNodeModel getSelected(), MindMapNodeModel loadTree(File file), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), MindMapToolBar getToolBar(), Mode getMode(), ModeController getModeController(), NodeAdapter createNodeAdapter(FreeMindMain frame), NodeAdapter getMapChild(), NodeAdapter getSelected(), NodeDragListener getNodeDragListener(), NodeDropListener getNodeDropListener(), NodeKeyListener getNodeKeyListener(), NodeMouseMotionListener getNodeMouseMotionListener(), NodeView getNeighbour(int directionCode), NodeView getNextPage(), NodeView getNextSibling(), NodeView getNextSiblingSingle(), NodeView getParentView(), NodeView getPreviousPage(), NodeView getPreviousSibling(), NodeView getPreviousSiblingSingle(), NodeView getRoot(), NodeView getSelected(), NodeView getSelected(int i), NodeView getViewer(), NodeView newNodeView(MindMapNode model, MapView map), Object clone(), Object getAttribute(String name), Object getAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiterals), Object getAttribute(String name, Object defaultValue), Object getFirst(), Object getObject(), Object getProperty(String name, Hashtable valueSet, String defaultKey), Object getSecond(), Object getUserObject(), Object[] getPathToRoot(TreeNode node), Point getEndInclination(), Point getInPoint(), Point getLinkPoint(), Point getOutPoint(), Point getStartInclination(), Point xmlToPoint(String string), Rectangle getBounds(), Rectangle getControlRegion(Point2D p), Rectangle getInnerBounds(NodeView source), Rectangle2D getControlPoint(Point2D p), ResourceBundle getResources(), RootNodeView getRoot(), Set getAvailableFontFamilyNames(), String BooleanToXml(boolean col), String PointToXml(Point col), String colorToXml(Color col), String expandFileName(String file), String expandPlaceholders(String message, String s1), String expandPlaceholders(String message, String s1, String s2), String expandPlaceholders(String message, String s1, String s2, String s3), String firstLetterCapitalized(String text), String generateUniqueID(String proposedID), String getAsPlainText(List mindMapNodes), String getAsRTF(List mindMapNodes), String getCode(), String getCodeClassicStyle(), String getCodeMathStyle(), String getContent(), String getContents(), String getDescription(FreeMindMain frame), String getDestinationLabel(), String getEdgeStyle(), String getEndArrow(), String getExtension(File f), String getExtension(String s), String getFindFromText(), String getFindWhat(), String getFontFamilyName(), String getFontSize(), String getFreemindDirectory(), String getFreemindVersion(), String getID(), String getIDString(MindMapNode node), String getIconFileName(), String getItemForZoom(float f), String getLabel(MindMapNode target), String getLink(), String getLink(NodeAdapter node), String getLinkByFileChooser(FileFilter fileFilter), String getName(), String getNodeStyle(), String getProgramForFile(String type), String getProperty(String key), String getProperty(String name), String getProperty(String name, String defaultValue), String getProperty(String property), String getReferenceText(), String getResourceString(String resource), String getRestoreable(), String getStartArrow(), String getStringAttribute(String name), String getStringAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiterals), String getStringAttribute(String name, String defaultValue), String getStringProperty(String name, Hashtable valueSet, String defaultKey), String getStyle(), String getTagName(), String getText(), String getText(String textId), String getWidthTitle(int width), String listToString(List list), String popLockingUserOfOldLock(), String removeExtension(String s), String save(), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), String toRelativeURL(URL base, URL target), String toString(), String toXMLEscapedText(String text), String toXMLEscapedTextWithNBSPizedSpaces(String text), String toXMLUnescapedText(String text), String transpose(String input, char findChar, String replaceString), String tryToLock(File file), String urlGetFile(URL url), String[] getZooms(), Stroke getStroke(), StylePattern getChildrenStylePattern(), Tools.BooleanHolder isLeft(), Transferable copy(), Transferable copy(ArrayList selectedNodes, String inPlainText), Transferable copy(MindMapNode node), Transferable copySingle(), Transferable cut(), Transferable cut(MindMapNode node), TreePath getPath(), URL getResource(String name), URL getResource(String resource), URL getURL(), Vector calculateHull(LinkedList coordinates), Vector doGraham(Vector p), Vector getAllIconNames(), Vector getAllLinks(MindMapNode node), Vector getAllLinksFromMe(MindMapNode source), Vector getAllLinksIntoMe(MindMapNode target), Vector getAllSources(MindMapNode target), Vector getAssignedLinksVector(ID_Registered state), Vector getAvailableFontFamilyNamesAsVector(), Vector getChildren(), Vector getCuttedNode(String oldTargetID), Vector getIcons(), XMLElement createAnotherElement(), XMLElement save(), XMLParseException expectedInput(String charSet), XMLParseException invalidValue(String name, String value), XMLParseException invalidValueSet(String name), XMLParseException syntaxError(String context), XMLParseException unexpectedEndOfData(), XMLParseException unknownEntity(String name), boolean acquirePrinterJobAndPageFormat(), boolean binOptionIsTrue(String option), boolean changeToMode(String mode), boolean checkCDATA(StringBuffer buf), boolean checkLiteral(String literal), boolean close(), boolean detectCollision(Point p), boolean dropAsSibling(double xCoord), boolean dropPosition(double xCoord), boolean executableByExtension(String file), boolean extendSelection(MouseEvent e), boolean find(LinkedList nodes, String what, boolean caseSensitive), boolean find(MindMapNode node, String what, boolean caseSensitive), boolean findNext(), boolean followLink(double xCoord), boolean getAntialiasAll(), boolean getAntialiasEdges(), boolean getAppliesToChildren(), boolean getAppliesToEdge(), boolean getAppliesToNode(), boolean getAppliesToNodeFont(), boolean getAppliesToNodeIcon(), boolean getBooleanAttribute(String name, String trueValue, String falseValue, boolean defaultValue), boolean getFolded(), boolean getIsLong(), boolean getProperty(String key, String trueValue, String falseValue, boolean defaultValue), boolean getRecursive(), boolean getValue(), boolean hasChildren(), boolean hasFoldedStrictDescendant(), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), boolean isAbsolutePath(String path), boolean isAntialiasAll(), boolean isAntialiasEdges(), boolean isApplet(), boolean isAvailableFontFamily(String fontFamilyName), boolean isBlocked(), boolean isBold(), boolean isChildOf(NodeView myNodeView), boolean isDescendantOf(MindMapNode node), boolean isDragAcceptable(DropTargetDragEvent ev), boolean isDragAcceptable(DropTargetDragEvent event), boolean isDropAcceptable(DropTargetDropEvent event), boolean isExtensionListInDescription(), boolean isFolded(), boolean isItalic(), boolean isLeft(), boolean isParentOf(NodeView myNodeView), boolean isPrinting(), boolean isReadOnly(), boolean isRoot(), boolean isSaved(), boolean isSelected(), boolean isSelected(NodeView n), boolean isSiblingOf(NodeView myNodeView), boolean isUnderlined(), boolean safeEquals(String string1, String string2), boolean save(), boolean save(File file), boolean saveAs(), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), boolean saveInternal(File file, boolean isInternal), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), boolean selectContinuous(NodeView newSelected), boolean tryToChangeToMapModule(String mapModule), boolean xmlToBoolean(String string), char readChar(), char scanWhitespace(), char scanWhitespace(StringBuffer result), double getDoubleAttribute(String name), double getDoubleAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiteralNumbers), double getDoubleAttribute(String name, double defaultValue), double getProperty(String name, double defaultValue), double getSpecialDoubleProperty(String name, Hashtable valueSet, String defaultKey), double getZoom(), double theta(Point p1, Point p2), float getZoom(), freemind.main.Tools.BooleanHolder isLeft(), int ccw(Point p0, Point p1, Point p2), int compare(Object p1, Object p2), int countChildren(), int getAlignment(), int getChildPosition(MindMapNode childNode), int getDraggedOver(), int getEdgeWidth(), int getImageCount(), int getIntAttribute(String name), int getIntAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiteralNumbers), int getIntAttribute(String name, int defaultValue), int getIntProperty(String name, Hashtable valueSet, String defaultKey), int getLeftWidthOverhead(), int getLineNr(), int getMaxNodeWidth(), int getNodeLevel(), int getNodeShift(NodeView node), int getNumberOfChangesSinceLastSave(), int getProperty(String name, int defaultValue), int getRealWidth(), int getSiblingMaxLevel(), int getSourceShift(), int getSpecialIntProperty(String name, Hashtable valueSet, String defaultKey), int getTargetShift(), int getTreeHeight(), int getValue(), int getWidth(), int getWinHeight(), int getWinState(), int getWinWidth(), int getZoomed(int number), int moveNodeTo(MindMapNode newChild, MindMapNode parent, int index, int direction), int removeLastIcon(), int removeLastIcon(MindMapNodeModel node), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), int sumOfAlreadyComputedTreeHeights(LinkedList v), java.util.logging.Logger getLogger(String forClass), void AboutAction(Controller controller), void ApplyPatternAction(StylePattern pattern), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void ArrowLinkView(MindMapArrowLink arrowLinkModel, NodeView source, NodeView target), void BackgroundAction(Controller controller, Icon icon), void BezierEdgeView(NodeView source, NodeView target), void BooleanHolder(), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseCloudModel(MindMapNode node, FreeMindMain frame), void BrowseController(Mode mode), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), void BrowseMapModel(FreeMindMain frame), void BrowseMode(), void BrowseNodeModel(FreeMindMain frame), void BrowseNodeModel(Object userObject, FreeMindMain frame), void BrowsePopupMenu(BrowseController c), void BrowseToolBar(BrowseController controller), void BrowseXMLElement(FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void BubbleAction(), void BubbleNodeView(MindMapNode model, MapView map), void CenterAction(), void ChangeArrowsInArrowLinkAction(String text, String iconPath, MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void CloseAction(Controller controller), void CloudAdapter(MindMapNode target, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void CloudColorAction(), void CloudView(MindMapCloud cloudModel, NodeView source, int iterativeLevel), void ColorArrowLinkAction(MindMapNode source, MindMapArrowLinkModel arrowLink), void ColorSwatch(), void ColorSwatch(Color color), void Controller(FreeMindMain frame), void ControllerAdapter(), void ControllerAdapter(Mode mode), void CopyAction(Object controller), void CopySingleAction(Object controller), void CutAction(Object controller), void DocumentationAction(Controller controller), void EdgeAdapter(MindMapNode target, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void EdgeColorAction(), void EdgeStyleAction(String style), void EdgeView(NodeView source, NodeView target), void EdgeWidthAction(int width), void EditAction(), void EditCopyAction(JTextComponent textComponent), void EditLongAction(), void EditPopupMenu(JTextComponent textComponent), void EvaluateAction(), void ExampleFileFilter(), void ExampleFileFilter(String extension), void ExampleFileFilter(String extension, String description), void ExampleFileFilter(String[] filters), void ExampleFileFilter(String[] filters, String description), void ExportBranchAction(), void ExportBranchToHTMLAction(MindMapController controller), void ExportToHTMLAction(MindMapController controller), void FileController(Mode mode), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void FileMapModel(File root, FreeMindMain frame), void FileMapModel(FreeMindMain frame), void FileMode(), void FileNodeModel(File file, FreeMindMain frame), void FilePopupMenu(FileController c), void FileToolBar(FileController controller), void FindAction(), void FindNextAction(), void FollowLinkAction(), void ForkAction(), void ForkNodeView(MindMapNode model, MapView map), void FreeMind(), void FreeMindApplet(), void GotoLinkNodeAction(String text, MindMapNode source), void HistoryManager(), void HistoryNextMapAction(Controller controller), void HistoryPreviousMapAction(Controller controller), void ID_RegisteredAdapter(MindMapNode target, String ID), void ID_UsedStateAdapter(), void ID_UsedStateAdapter(MindMapNode target, String ID), void IconAction(MindIcon _icon), void ImportBranchAction(), void ImportExplorerFavoritesAction(), void ImportFolderStructureAction(), void ImportLinkedBranchAction(), void ImportLinkedBranchWithoutRootAction(), void IntHolder(), void IntHolder(int value), void JoinNodesAction(), void LastOpenedList(Controller c, String restored), void LicenseAction(Controller controller), void LineAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void LinearEdgeView(NodeView source, NodeView target), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void LinkRegistryAdapter(), void MainToolBar(Controller c), void MapAdapter(FreeMindMain frame), void MapModule(MindMap model, MapView view, Mode mode), void MapModuleManager(Controller c), void MapMouseMotionListener(Controller controller), void MapMouseWheelListener(Controller controller), void MapView(MindMap model, Controller controller), void MenuBar(Controller controller), void MindIcon(String name), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapCloudModel(MindMapNode node, FreeMindMain frame), void MindMapController(Mode mode), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void MindMapLayout(MapView map), void MindMapMapModel(FreeMindMain frame), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void MindMapMode(), void MindMapNodeModel(FreeMindMain frame), void MindMapNodeModel(Object userObject, FreeMindMain frame), void MindMapNodesSelection(String nodesContent, String stringContent, String rtfContent, String dropActionContent), void MindMapPopupMenu(MindMapController c), void MindMapToolBar(MindMapController controller), void MindMapXMLElement(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void ModesCreator(Controller c), void MoveToRootAction(Controller controller), void MultipleImage(double zoom), void NavigationNextMapAction(Controller controller), void NavigationPreviousMapAction(Controller controller), void NewChildAction(), void NewChildWithoutFocusAction(), void NewMapAction(ControllerAdapter controller), void NewPreviousSiblingAction(), void NewSiblingAction(), void NodeAdapter(FreeMindMain frame), void NodeAdapter(Object userObject, FreeMindMain frame), void NodeColorAction(), void NodeDownAction(), void NodeDragListener(Controller controller), void NodeDropListener(Controller controller), void NodeGeneralAction(String textID, String iconPath, SingleNodeOperation singleNodeOperation), void NodeKeyListener(Controller controller), void NodeMouseMotionListener(Controller controller), void NodeUpAction(), void NodeView(MindMapNode model, MapView map), void ObjectHolder(), void OpenAction(ControllerAdapter modeController), void OpenFAQAction(Controller controller), void OpenPathAction(), void OptionAntialiasAction(Controller controller), void OptionHTMLExportFoldingAction(Controller controller), void OptionSelectionMechanismAction(Controller controller), void PageAction(Controller controller), void Pair(Object first, Object second), void PasteAction(Object controller), void PrintAction(Controller controller, boolean isDlg), void QuitAction(Controller controller), void RemoveAction(), void RemoveArrowLinkAction(MindMapNode source, MindMapArrowLinkModel arrowLink), void RootNodeView(MindMapNode model, MapView map), void SaveAction(ControllerAdapter modeController), void SaveAsAction(ControllerAdapter modeController), void SchemeController(Mode mode), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void SchemeMapModel(FreeMindMain frame), void SchemeMode(), void SchemeNodeModel(FreeMindMain frame), void SchemePopupMenu(SchemeController c), void SchemeToolBar(SchemeController controller), void SetImageByFileChooserAction(), void SetLinkByFileChooserAction(), void SetLinkByTextFieldAction(), void SharpBezierEdgeView(NodeView source, NodeView target), void SharpLinearEdgeView(NodeView source, NodeView target), void StylePattern(XMLElement elm, List justConstructedPatterns), void ToggleChildrenFoldedAction(), void ToggleFoldedAction(), void ToggleLeftToolbarAction(Controller controller), void ToggleMenubarAction(Controller controller), void ToggleToolbarAction(Controller controller), void XMLElement(), void XMLElement(Hashtable entities), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace, boolean fillBasicConversionTable, boolean ignoreCase), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace, boolean ignoreCase), void XMLElement(boolean skipLeadingWhitespace), void XMLElementAdapter(FreeMindMain frame), void XMLElementAdapter(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void XMLParseException(String name, String message), void XMLParseException(String name, int lineNr, String message), void ZoomInAction(Controller controller), void ZoomOutAction(Controller controller), void activate(), void add(Action action, String keystroke), void add(JMenu menu, Action action), void addChild(XMLElement child), void addDragListener(DragGestureListener dgl), void addDropListener(DropTargetListener dtl), void addExtension(String extension), void addIcon(MindIcon _icon), void addIcon(MindIcon icon), void addIcon(MindMapNodeModel node, MindIcon icon), void addImage(ImageIcon image), void addLink(MindMapNodeModel source, MindMapNodeModel target), void addNew(NodeView target, int newNodeMode, KeyEvent e), void addOptionSet(Action action, String[] textIDs, JMenu menu, String selectedTextID), void addProperty(String key, int value), void addProperty(String name, Object value), void addProperty(String name, double value), void addToMapModules(String key, MapModule value), void addToPathVector(Vector pathVector), void anotherNodeSelected(MindMapNode n), void apply(MindMapMapModel map, MindMapNodeModel node), void applyPattern(NodeAdapter node, StylePattern pattern), void applyPattern(NodeAdapter node, StylePattern pattern, boolean visible), void blendNodeColor(MindMapNodeModel node), void centerNode(NodeView node), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void changeComponentHeight(JComponent component, int difference, int minimum), void changeNode(MindMapNode node, String newText), void changeToAnotherMap(String toBeClosed), void changeToMapModule(String mapModule), void changeToMapModuleWithoutHistory(MapModule map), void changeToMapOfMode(Mode mode), void checkJavaVersion(), void clearCuttedNodeBuffer(), void clone(ID_UsedStateAdapter state), void closeEdit(), void collectColors(HashSet colors), void collectLabels(NodeView source, HashMap labels), void completeElement(), void copyMenuItems(JMenu source, JMenu dest), void createIconActions(), void createPatterns(List patternsList), void createTimer(MouseEvent e), void cutNode(MindMapNode target), void deregisterLink(MindMapLink link), void deregisterLinkTarget(MindMapNode target), void deselect(NodeView newSelected), void destroy(), void displayNode(MindMapNode node, ArrayList NodesUnfoldedByDisplay), void doAutomaticSave(MindMapMapModel model, int numberOfTempFiles, boolean filesShouldBeDeletedAfterShutdown, File pathToStore), void doubleClick(), void doubleClick(MouseEvent e), void dragScroll(DropTargetDragEvent e), void edit(KeyEvent e, boolean addNew, boolean editLong), void edit(NodeView node, NodeView prevSelected, KeyEvent firstEvent, boolean isNewNode, boolean parentFolded, boolean editLong), void editLong(NodeView node, String text, KeyEvent firstEvent), void err(String msg), void errorMessage(Object message), void errorMessage(Object message, JComponent component), void estabilishOwnFont(), void extendSelectionWithKeyMove(NodeView newlySelectedNodeView, KeyEvent e), void fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children), void getCoordinates(LinkedList inList, int additionalDistanceForConvexHull), void handleLoadingException(Exception ex), void handlePopup(MouseEvent e), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void increaseFontSize(MindMapNodeModel node, int increment), void informationMessage(Object message), void informationMessage(Object message, JComponent component), void init(Controller c), void initRoot(), void insert(), void insert(MindMapNode newNode), void insertNodeInto(MindMapNode newChild, MindMapNode parent), void insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent, boolean asSibling), void joinNodes(), void layout(), void layout(NodeView node), void load(File file), void load(String data), void load(URL url), void loadMathStyle(Reader re), void loadPattern(XMLElement pattern, List justConstructedPatterns), void loadPatterns(File file), void loadPatterns(Reader reader), void loadURL(), void loadURL(String relative), void main(String[] args), void makeTheSelected(NodeView newSelected), void mapChanged(MapModule map), void mapClosed(MapModule map), void mapModuleChanged(), void mapOpened(MapModule map), void mapOpened(boolean open), void mouseWheelMoved(MouseWheelEvent e), void move(KeyEvent e), void moveToRoot(), void newMap(), void newMap(MindMap map), void newMapModule(MindMap map), void nextMap(), void nextMapModule(), void nodeChanged(MindMapNode n), void nodeChanged(TreeNode node), void nodeStructureChanged(TreeNode node), void nodesChanged(TreeNode node, int[] childIndices), void nodesDepthComparator(), void nodesWereInserted(TreeNode node, int[] childIndices), void nodesWereRemoved(TreeNode parent, int[] childIndices, Object[] removedChildren), void obtainFocusForSelected(), void open(), void open(String restoreable), void openDocument(URL doc), void openDocument(URL location), void openDocument(URL url), void out(String msg), void paint(Graphics graphics), void paint(Graphics2D g), void paintArrow(Point p1, Point p3, Graphics2D g), void paintClouds(Graphics2D g, Graphics2D gstroke, double x0, double y0, double x1, double y1, double distanceToConvexHull), void paintClouds(NodeView source, Graphics graphics, int iterativeLevel), void paintDragOver(Graphics2D graphics, Dimension size), void paintEdges(NodeView source, Graphics2D g), void paintLinks(NodeView source, Graphics2D graphics, HashMap labels, HashSet LinkAlreadyVisited), void paintSelected(Graphics2D graphics, Dimension size), void parseCharArray(char[] input, int offset, int end), void parseCharArray(char[] input, int offset, int end, int startingLineNr), void parseFromReader(Reader reader), void parseFromReader(Reader reader, int startingLineNr), void parseString(String string), void parseString(String string, int offset), void parseString(String string, int offset, int end), void parseString(String string, int offset, int end, int startingLineNr), void paste(MindMapNode node, MindMapNode parent), void paste(Transferable t, MindMapNode parent), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void placeNode(NodeView node, int relativeX, int relativeY), void plainClick(MouseEvent e), void previousMap(), void previousMapModule(), void processUnfinishedLinks(MindMapLinkRegistry registry), void quit(), void registerLink(MindMapLink link), void releaseLock(), void releaseTimer(), void reload(TreeNode node), void remove(), void removeAttribute(String name), void removeChild(String name), void removeChild(XMLElement child), void removeNodeFromParent(MutableTreeNode node), void removeNodeFromParent(MutableTreeNode node, boolean notify), void removeProperty(String name), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), void rename(), void repaint(), void resizeMap(int outmostX), void resolveEntity(StringBuffer buf), void restore(String restorable), void restore(String restoreable), void save(Writer writer, MindMapMapModel model), void saveProperties(), void saveRTF(Writer fileout, int depth, HashMap colorTable), void saveTXT(Writer fileout, int depth), void scanElement(XMLElement elt), void scanIdentifier(StringBuffer result), void scanPCData(StringBuffer data), void scanString(StringBuffer string), void scrollBy(int x, int y), void scrollNodeToVisible(NodeView node), void scrollNodeToVisible(NodeView node, int extraWidth), void select(NodeView node), void selectAsTheOnlyOneSelected(NodeView newSelected), void selectBranch(NodeView newlySelectedNodeView, boolean extend), void selectFontName(String fontName), void selectFontSize(String fontSize), void setAllActions(boolean enabled), void setAntialiasAll(boolean antialiasAll), void setAntialiasEdges(boolean antialiasEdges), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void setAttribute(String name, Object value), void setBackgroundColor(Color backgroundColor), void setBackgroundColor(Color color), void setBlocked(boolean isBlocked), void setBold(MindMapNodeModel node), void setBold(boolean bold), void setChildrenStylePattern(StylePattern ChildrenStylePattern), void setCloud(MindMapCloud cloud), void setCloud(MindMapNodeModel node), void setCloudColor(MindMapNodeModel node, Color color), void setCloudStyle(MindMapNodeModel node, String style), void setCloudWidth(MindMapNodeModel node, int width), void setColor(Color color), void setContent(String content), void setDescription(String description), void setDestinationLabel(String destinationLabel), void setDoubleAttribute(String name, double value), void setDraggedOver(Point p), void setDraggedOver(int draggedOver), void setDropAction(String dropActionContent), void setEdge(EdgeView edge), void setEdge(MindMapEdge edge), void setEdgeColor(Color edgeColor), void setEdgeColor(MindMapNodeModel node, Color color), void setEdgeStyle(MindMapNodeModel node, String style), void setEdgeStyle(String edgeStyle), void setEdgeWidth(MindMapNodeModel node, int width), void setEdgeWidth(int edgeWidth), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setExtensionListInDescription(boolean b), void setFile(), void setFile(File file), void setFolded(MindMapNode node, boolean folded), void setFolded(boolean folded), void setFolded(boolean v), void setFont(Font font), void setFontFamily(MindMapNodeModel node, String fontFamily), void setFontFamily(String fontFamily), void setFontSize(MindMapNodeModel node, int fontSize), void setFontSize(int fontSize), void setFrame(FreeMindMain frame), void setHidden(File file, boolean hidden, boolean synchronously), void setIDs(HashMap IDToTarget, MindMapLinkRegistry registry), void setIcon(Icon _associatedIcon), void setImageByFileChooser(), void setIntAttribute(String name, int value), void setItalic(MindMapNodeModel node), void setItalic(boolean italic), void setLeft(boolean isLeft), void setLeft(boolean left), void setLeftToolbarVisible(boolean visible), void setLink(NodeAdapter node, String link), void setLink(String link), void setLinkByFileChooser(), void setLinkByTextField(), void setMap(MapView map), void setMapModule(MapModule mapModule), void setMenubarVisible(boolean visible), void setMode(Mode mode), void setModel(MindMap model), void setModel(MindMapNode model), void setMoveCursor(boolean isHand), void setName(String name), void setName(String v), void setNodeColor(Color v), void setNodeColor(MindMapNodeModel node, Color color), void setNodeFont(Font nodeFont), void setNodeFont(MindMapNodeModel node, Font font), void setNodeIcon(MindIcon nodeIcon), void setNodeStyle(MindMapNodeModel node, String style), void setNodeStyle(String nodeStyle), void setNormalFont(MindMapNodeModel node), void setObject(Object object), void setParent(MindMapNode newParent), void setPreferredChild(MindMapNode node), void setProperty(String key, String value), void setProperty(String property, String value), void setRecursive(boolean v), void setReferenceText(String referenceText), void setRendering(Graphics2D g), void setRoot(MindMapNode root), void setSaved(boolean saved), void setSiblingMaxLevel(int level), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination), void setStyle(String style), void setTagName(String name), void setTarget(MindMapNode node), void setTarget(MindMapNode target), void setText(String v), void setTitle(), void setTitle(String title), void setToolbarVisible(boolean visible), void setTreeHeight(int treeHeight), void setURL(URL v), void setURLField(String text), void setUnderlined(MindMapNodeModel node), void setUnderlined(boolean underlined), void setValue(boolean value), void setValue(int value), void setView(MapView view), void setViewer(NodeView viewer), void setWaitingCursor(boolean waiting), void setWidth(int width), void setZoom(float zoom), void setZoomByItem(Object item), void setZoomComboBox(float f), void showPopupMenu(MouseEvent e), void skipComment(), void skipSpecialTag(int bracketLevel), void splitNode(MindMapNode node, int caretPosition, String newText), void stopTimerForDelayedSelection(), void thetaComparator(Point p0), void timeDelayedSelection(Controller c, MouseEvent e), void toggleBold(), void toggleChildrenFolded(), void toggleFolded(), void toggleItalic(), void toggleSelected(NodeView newSelected), void unreadChar(char ch), void update(), void updateAll(), void updateCursor(double xCoord), void updateEditMenu(), void updateFileMenu(), void updateLastOpenedList(), void updateMapModuleName(), void updateMapsMenu(), void updateNavigationActions(), void updateRelativeYOfChildren(NodeView node), void updateSelectionMethod(Controller c), void updateTreeHeightFromChildren(NodeView node), void updateTreeHeightsAndRelativeYOfAncestors(NodeView node), void updateTreeHeightsAndRelativeYOfDescendants(NodeView node), void updateTreeHeightsAndRelativeYOfDescendantsAndAncestors(NodeView node), void updateTreeHeightsAndRelativeYOfWholeMap(), void updateZoomBar(), void write(Writer writer), void write(Writer writer, boolean withClosingTag), void writeClosingTag(Writer writer), void writeEncoded(Writer writer, String str), void writeSemaphoreFile(File inSemaphoreFile), void writeWithoutClosingTag(Writer writer), void zoomIn(), void zoomOut()]]
	->	->NODE_4[[freemind.modes.filemode.FilePopupMenu],[void FilePopupMenu(FileController c), void add(Action action, String keystroke)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_5[[freemind.modes.ControllerAdapter.ToggleChildrenFoldedAction],[void ToggleChildrenFoldedAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_6[[freemind.controller.NodeMouseMotionListener.timeDelayedSelection],[void timeDelayedSelection(Controller c, MouseEvent e)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_7[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.mindmapmode.MindMapMapModel, freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager, freemind.modes.mindmapmode.MindMapMapModel.LockManager],[String tryToLock(File file)]]
	->ITS CHILDREN:=================
	->	->NODE_8[[freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager, freemind.modes.mindmapmode.MindMapMapModel.LockManager],[String popLockingUserOfOldLock(), String tryToLock(File file), void releaseLock(), void releaseTimer()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_9[[freemind.modes.mindmapmode.MindMapMapModel.LockManager],[File getSemaphoreFile(File mapFile), String popLockingUserOfOldLock(), String tryToLock(File file), void releaseLock(), void releaseTimer(), void writeSemaphoreFile(File inSemaphoreFile)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->NODE_10[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.mindmapmode.MindMapMapModel],[MindMapLinkRegistry getLinkRegistry(), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), MindMapNodeModel loadTree(File file), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), String getAsPlainText(List mindMapNodes), String getAsRTF(List mindMapNodes), String getRestoreable(), String tryToLock(File file), Transferable copy(MindMapNode node), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), boolean save(File file), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), boolean saveInternal(File file, boolean isInternal), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), int removeLastIcon(MindMapNodeModel node), void MindMapMapModel(FreeMindMain frame), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void addIcon(MindMapNodeModel node, MindIcon icon), void addLink(MindMapNodeModel source, MindMapNodeModel target), void blendNodeColor(MindMapNodeModel node), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void destroy(), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void increaseFontSize(MindMapNodeModel node, int increment), void joinNodes(), void load(File file), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void setBold(MindMapNodeModel node), void setCloud(MindMapNodeModel node), void setCloudColor(MindMapNodeModel node, Color color), void setCloudStyle(MindMapNodeModel node, String style), void setCloudWidth(MindMapNodeModel node, int width), void setEdgeColor(MindMapNodeModel node, Color color), void setEdgeStyle(MindMapNodeModel node, String style), void setEdgeWidth(MindMapNodeModel node, int width), void setFontFamily(MindMapNodeModel node, String fontFamily), void setFontSize(MindMapNodeModel node, int fontSize), void setItalic(MindMapNodeModel node), void setNodeColor(MindMapNodeModel node, Color color), void setNodeFont(MindMapNodeModel node, Font font), void setNodeStyle(MindMapNodeModel node, String style), void setNormalFont(MindMapNodeModel node), void setUnderlined(MindMapNodeModel node), void splitNode(MindMapNode node, int caretPosition, String newText)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_11[[freemind.modes.MapAdapter, freemind.modes.MindMap],[BrowseNodeModel loadTree(URL url), Color getBackgroundColor(), File getFile(), FreeMindMain getFrame(), MindMapLinkRegistry getLinkRegistry(), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), MindMapNodeModel loadTree(File file), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), Object[] getPathToRoot(TreeNode node), String getAsPlainText(List mindMapNodes), String getAsRTF(List mindMapNodes), String getCode(), String getFindFromText(), String getFindWhat(), String getLink(NodeAdapter node), String getRestoreable(), String getText(String textId), String tryToLock(File file), Transferable copy(), Transferable copy(ArrayList selectedNodes, String inPlainText), Transferable copy(MindMapNode node), Transferable copySingle(), Transferable cut(), Transferable cut(MindMapNode node), URL getURL(), boolean find(LinkedList nodes, String what, boolean caseSensitive), boolean find(MindMapNode node, String what, boolean caseSensitive), boolean findNext(), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), boolean isReadOnly(), boolean isSaved(), boolean save(File file), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), boolean saveInternal(File file, boolean isInternal), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), int getNumberOfChangesSinceLastSave(), int moveNodeTo(MindMapNode newChild, MindMapNode parent, int index, int direction), int removeLastIcon(MindMapNodeModel node), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), void BrowseMapModel(FreeMindMain frame), void FileMapModel(File root, FreeMindMain frame), void FileMapModel(FreeMindMain frame), void MapAdapter(FreeMindMain frame), void MindMapMapModel(FreeMindMain frame), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void SchemeMapModel(FreeMindMain frame), void addIcon(MindMapNodeModel node, MindIcon icon), void addLink(MindMapNodeModel source, MindMapNodeModel target), void applyPattern(NodeAdapter node, StylePattern pattern), void applyPattern(NodeAdapter node, StylePattern pattern, boolean visible), void blendNodeColor(MindMapNodeModel node), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void changeNode(MindMapNode node, String newText), void destroy(), void displayNode(MindMapNode node, ArrayList NodesUnfoldedByDisplay), void fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void increaseFontSize(MindMapNodeModel node, int increment), void insertNodeInto(MindMapNode newChild, MindMapNode parent), void insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent, boolean asSibling), void joinNodes(), void load(File file), void load(URL url), void loadMathStyle(Reader re), void nodeChanged(TreeNode node), void nodeStructureChanged(TreeNode node), void nodesChanged(TreeNode node, int[] childIndices), void nodesWereInserted(TreeNode node, int[] childIndices), void nodesWereRemoved(TreeNode parent, int[] childIndices, Object[] removedChildren), void paste(MindMapNode node, MindMapNode parent), void paste(Transferable t, MindMapNode parent), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void reload(TreeNode node), void removeNodeFromParent(MutableTreeNode node), void removeNodeFromParent(MutableTreeNode node, boolean notify), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void setBackgroundColor(Color backgroundColor), void setBold(MindMapNodeModel node), void setCloud(MindMapNodeModel node), void setCloudColor(MindMapNodeModel node, Color color), void setCloudStyle(MindMapNodeModel node, String style), void setCloudWidth(MindMapNodeModel node, int width), void setEdgeColor(MindMapNodeModel node, Color color), void setEdgeStyle(MindMapNodeModel node, String style), void setEdgeWidth(MindMapNodeModel node, int width), void setFile(), void setFile(File file), void setFolded(MindMapNode node, boolean folded), void setFontFamily(MindMapNodeModel node, String fontFamily), void setFontSize(MindMapNodeModel node, int fontSize), void setItalic(MindMapNodeModel node), void setLink(NodeAdapter node, String link), void setNodeColor(MindMapNodeModel node, Color color), void setNodeFont(MindMapNodeModel node, Font font), void setNodeStyle(MindMapNodeModel node, String style), void setNormalFont(MindMapNodeModel node), void setRoot(MindMapNode root), void setSaved(boolean saved), void setURL(URL v), void setUnderlined(MindMapNodeModel node), void splitNode(MindMapNode node, int caretPosition, String newText)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_12[[freemind.modes.MindMap],[BrowseNodeModel loadTree(URL url), Color getBackgroundColor(), File getFile(), FreeMindMain getFrame(), MindMapLinkRegistry getLinkRegistry(), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), MindMapNodeModel loadTree(File file), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), Object[] getPathToRoot(TreeNode node), String getAsPlainText(List mindMapNodes), String getAsRTF(List mindMapNodes), String getCode(), String getFindFromText(), String getFindWhat(), String getLink(NodeAdapter node), String getRestoreable(), String getText(String textId), String tryToLock(File file), Transferable copy(), Transferable copy(ArrayList selectedNodes, String inPlainText), Transferable copy(MindMapNode node), Transferable copySingle(), Transferable cut(), Transferable cut(MindMapNode node), URL getURL(), boolean find(LinkedList nodes, String what, boolean caseSensitive), boolean find(MindMapNode node, String what, boolean caseSensitive), boolean findNext(), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), boolean isReadOnly(), boolean isSaved(), boolean save(File file), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), boolean saveInternal(File file, boolean isInternal), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), int getNumberOfChangesSinceLastSave(), int moveNodeTo(MindMapNode newChild, MindMapNode parent, int index, int direction), int removeLastIcon(MindMapNodeModel node), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), void BrowseMapModel(FreeMindMain frame), void FileMapModel(File root, FreeMindMain frame), void FileMapModel(FreeMindMain frame), void MapAdapter(FreeMindMain frame), void MindMapMapModel(FreeMindMain frame), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void SchemeMapModel(FreeMindMain frame), void addIcon(MindMapNodeModel node, MindIcon icon), void addLink(MindMapNodeModel source, MindMapNodeModel target), void applyPattern(NodeAdapter node, StylePattern pattern), void applyPattern(NodeAdapter node, StylePattern pattern, boolean visible), void blendNodeColor(MindMapNodeModel node), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void changeNode(MindMapNode node, String newText), void destroy(), void displayNode(MindMapNode node, ArrayList NodesUnfoldedByDisplay), void fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void increaseFontSize(MindMapNodeModel node, int increment), void insertNodeInto(MindMapNode newChild, MindMapNode parent), void insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent, boolean asSibling), void joinNodes(), void load(File file), void load(URL url), void loadMathStyle(Reader re), void nodeChanged(TreeNode node), void nodeStructureChanged(TreeNode node), void nodesChanged(TreeNode node, int[] childIndices), void nodesWereInserted(TreeNode node, int[] childIndices), void nodesWereRemoved(TreeNode parent, int[] childIndices, Object[] removedChildren), void paste(MindMapNode node, MindMapNode parent), void paste(Transferable t, MindMapNode parent), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void reload(TreeNode node), void removeNodeFromParent(MutableTreeNode node), void removeNodeFromParent(MutableTreeNode node, boolean notify), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void setBackgroundColor(Color backgroundColor), void setBackgroundColor(Color color), void setBold(MindMapNodeModel node), void setCloud(MindMapNodeModel node), void setCloudColor(MindMapNodeModel node, Color color), void setCloudStyle(MindMapNodeModel node, String style), void setCloudWidth(MindMapNodeModel node, int width), void setEdgeColor(MindMapNodeModel node, Color color), void setEdgeStyle(MindMapNodeModel node, String style), void setEdgeWidth(MindMapNodeModel node, int width), void setFile(), void setFile(File file), void setFolded(MindMapNode node, boolean folded), void setFontFamily(MindMapNodeModel node, String fontFamily), void setFontSize(MindMapNodeModel node, int fontSize), void setItalic(MindMapNodeModel node), void setLink(NodeAdapter node, String link), void setNodeColor(MindMapNodeModel node, Color color), void setNodeFont(MindMapNodeModel node, Font font), void setNodeStyle(MindMapNodeModel node, String style), void setNormalFont(MindMapNodeModel node), void setRoot(MindMapNode root), void setSaved(boolean saved), void setURL(URL v), void setUnderlined(MindMapNodeModel node), void splitNode(MindMapNode node, int caretPosition, String newText)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_3[...,...]
	->NODE_13[[freemind.controller.Controller.ToggleMenubarAction],[void ToggleMenubarAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_14[[freemind.controller.Controller.ZoomOutAction],[void ZoomOutAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_15[[freemind.modes.mindmapmode.MindMapController.ApplyPatternAction],[void ApplyPatternAction(StylePattern pattern)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_16[[freemind.controller.Controller.PageAction],[void PageAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_17[[freemind.modes.schememode.SchemePopupMenu],[void SchemePopupMenu(SchemeController c)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_18[[freemind.controller.Controller, freemind.controller.MainToolBar, freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.browsemode.BrowseController, freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapToolBar],[void setAllActions(boolean enabled)]]
	->ITS CHILDREN:=================
	->	->NODE_19[[freemind.controller.MainToolBar],[String getItemForZoom(float f), void MainToolBar(Controller c), void setAllActions(boolean enabled), void setZoomByItem(Object item), void setZoomComboBox(float f), void zoomIn(), void zoomOut()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_20[[freemind.controller.Controller, freemind.modes.ControllerAdapter, freemind.modes.ModeController],[FreeMindMain getFrame(), MapModule getMapModule(), MapView getView(), MindMap getModel(), Mode getMode(), void setAllActions(boolean enabled)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_21[[freemind.modes.ControllerAdapter, freemind.modes.ModeController],[BrowseMapModel getModel(), BrowseNodeModel getSelected(), BrowseToolBar getToolBar(), Controller getController(), FileFilter getFileFilter(), FreeMindMain getFrame(), JMenu getBranchMenu(), JMenu getEdgeMenu(), JMenu getEditMenu(), JMenu getExtensionMenu(), JMenu getFileMenu(), JMenu getIconMenu(), JMenu getLeadingNodeMenu(), JMenu getNodeMenu(), JMenuItem add(JMenu menu, Action action, String keystroke), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), JToolBar getLeftToolBar(), LinkedList getSelecteds(), MapAdapter getMap(), MapAdapter getModel(), MapAdapter newModel(), MapModule getMapModule(), MapView getView(), MindMap getModel(), MindMapMapModel getModel(), MindMapNode getSelected(), MindMapNode newNode(), MindMapNodeModel getSelected(), MindMapToolBar getToolBar(), Mode getMode(), NodeAdapter getSelected(), String getLinkByFileChooser(FileFilter fileFilter), String getText(String textId), String getWidthTitle(int width), URL getResource(String name), boolean binOptionIsTrue(String option), boolean close(), boolean extendSelection(MouseEvent e), boolean isBlocked(), boolean save(), boolean save(File file), boolean saveAs(), void BrowseController(Mode mode), void ControllerAdapter(), void ControllerAdapter(Mode mode), void FileController(Mode mode), void MindMapController(Mode mode), void SchemeController(Mode mode), void add(JMenu menu, Action action), void addNew(NodeView target, int newNodeMode, KeyEvent e), void anotherNodeSelected(MindMapNode n), void changeComponentHeight(JComponent component, int difference, int minimum), void closeEdit(), void createIconActions(), void createPatterns(List patternsList), void doubleClick(), void doubleClick(MouseEvent e), void edit(KeyEvent e, boolean addNew, boolean editLong), void edit(NodeView node, NodeView prevSelected, KeyEvent firstEvent, boolean isNewNode, boolean parentFolded, boolean editLong), void editLong(NodeView node, String text, KeyEvent firstEvent), void handleLoadingException(Exception ex), void load(File file), void load(URL url), void loadPatterns(File file), void loadPatterns(Reader reader), void loadURL(), void loadURL(String relative), void mapOpened(boolean open), void mouseWheelMoved(MouseWheelEvent e), void newMap(), void newMap(MindMap map), void nodeChanged(MindMapNode n), void open(), void plainClick(MouseEvent e), void select(NodeView node), void setAllActions(boolean enabled), void setBlocked(boolean isBlocked), void setFontFamily(String fontFamily), void setFontSize(int fontSize), void setImageByFileChooser(), void setLinkByFileChooser(), void setLinkByTextField(), void setMode(Mode mode), void showPopupMenu(MouseEvent e), void toggleChildrenFolded(), void toggleFolded(), void updateMapModuleName()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->	->NODE_22[[freemind.controller.Controller],[Font getDefaultFont(), Font getFontThroughMap(Font font), FreeMindMain getFrame(), JToolBar getToolBar(), LastOpenedList getLastOpenedList(), Map getModes(), MapModule getMapModule(), MapModuleManager getMapModuleManager(), MapMouseMotionListener getMapMouseMotionListener(), MapMouseWheelListener getMapMouseWheelListener(), MapView getView(), MindMap getModel(), Mode getMode(), NodeDragListener getNodeDragListener(), NodeDropListener getNodeDropListener(), NodeKeyListener getNodeKeyListener(), NodeMouseMotionListener getNodeMouseMotionListener(), String getProperty(String property), String getResourceString(String resource), String[] getZooms(), URL getResource(String resource), boolean acquirePrinterJobAndPageFormat(), boolean changeToMode(String mode), boolean getAntialiasAll(), boolean getAntialiasEdges(), void Controller(FreeMindMain frame), void checkJavaVersion(), void errorMessage(Object message), void errorMessage(Object message, JComponent component), void informationMessage(Object message), void informationMessage(Object message, JComponent component), void moveToRoot(), void obtainFocusForSelected(), void quit(), void setAllActions(boolean enabled), void setAntialiasAll(boolean antialiasAll), void setAntialiasEdges(boolean antialiasEdges), void setFrame(FreeMindMain frame), void setLeftToolbarVisible(boolean visible), void setMenubarVisible(boolean visible), void setProperty(String property, String value), void setTitle(), void setToolbarVisible(boolean visible), void setZoom(float zoom)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->NODE_23[[freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapToolBar],[JToolBar getLeftToolBar(), void setAllActions(boolean enabled)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_24[[freemind.modes.mindmapmode.MindMapToolBar],[JToolBar getLeftToolBar(), void MindMapToolBar(MindMapController controller), void selectFontName(String fontName), void selectFontSize(String fontSize), void setAllActions(boolean enabled)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->	->NODE_25[[freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.mindmapmode.MindMapController],[FileFilter getFileFilter(), JMenu getBranchMenu(), JMenu getEdgeMenu(), JMenu getEditMenu(), JMenu getExtensionMenu(), JMenu getFileMenu(), JMenu getIconMenu(), JMenu getLeadingNodeMenu(), JMenu getNodeMenu(), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), JToolBar getLeftToolBar(), MapAdapter newModel(), MindMapMapModel getModel(), MindMapNode newNode(), MindMapNodeModel getSelected(), MindMapToolBar getToolBar(), String getWidthTitle(int width), void MindMapController(Mode mode), void anotherNodeSelected(MindMapNode n), void createIconActions(), void createPatterns(List patternsList), void loadPatterns(File file), void loadPatterns(Reader reader), void nodeChanged(MindMapNode n), void setAllActions(boolean enabled), void setFontFamily(String fontFamily), void setFontSize(int fontSize)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_21[...,...]
	->	->NODE_26[[freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.browsemode.BrowseController, freemind.modes.mindmapmode.MindMapController],[JMenu getEditMenu(), JMenu getFileMenu(), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode(), void setAllActions(boolean enabled)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_25[...,...]
	->	->	->NODE_27[[freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.browsemode.BrowseController],[BrowseMapModel getModel(), BrowseNodeModel getSelected(), BrowseToolBar getToolBar(), JMenu getEditMenu(), JMenu getFileMenu(), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode(), void BrowseController(Mode mode), void addNew(NodeView target, int newNodeMode, KeyEvent e), void doubleClick(), void edit(KeyEvent e, boolean addNew, boolean editLong), void load(URL url), void loadURL(), void loadURL(String relative), void setAllActions(boolean enabled)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_21[...,...]
	->NODE_28[[freemind.modes.ControllerAdapter.NewSiblingAction],[void NewSiblingAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_29[[freemind.modes.schememode.SchemeToolBar],[void SchemeToolBar(SchemeController controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_30[[freemind.modes.browsemode.BrowseToolBar],[void BrowseToolBar(BrowseController controller), void setURLField(String text)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_31[[freemind.modes.ControllerAdapter.CopySingleAction],[void CopySingleAction(Object controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_32[[freemind.modes.ArrowLinkAdapter, freemind.modes.CloudAdapter, freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.LinkAdapter, freemind.modes.MindMapArrowLink, freemind.modes.MindMapCloud, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.MindMapLink, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseArrowLinkModel, freemind.modes.browsemode.BrowseCloudModel, freemind.modes.browsemode.BrowseEdgeModel, freemind.modes.browsemode.BrowseNodeModel, freemind.modes.mindmapmode.MindMapArrowLinkModel, freemind.modes.mindmapmode.MindMapCloudModel, freemind.modes.mindmapmode.MindMapEdgeModel],[XMLElement save()]]
	->ITS CHILDREN:=================
	->	->NODE_33[[freemind.modes.CloudAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapCloud, freemind.modes.MindMapLine, freemind.modes.browsemode.BrowseCloudModel],[XMLElement save(), void BrowseCloudModel(MindMapNode node, FreeMindMain frame)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_34[[freemind.modes.CloudAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapCloud, freemind.modes.MindMapLine],[Color getExteriorColor(), XMLElement save(), void BrowseCloudModel(MindMapNode node, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapCloudModel(MindMapNode node, FreeMindMain frame)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_35[[freemind.modes.LineAdapter, freemind.modes.MindMapLine],[Color getColor(), Color getExteriorColor(), FreeMindMain getFrame(), MindMapNode getSource(), MindMapNode getTarget(), Point getEndInclination(), Point getStartInclination(), String getDestinationLabel(), String getEndArrow(), String getReferenceText(), String getStartArrow(), String getStyle(), Stroke getStroke(), XMLElement save(), int getWidth(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseCloudModel(MindMapNode node, FreeMindMain frame), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void EdgeAdapter(MindMapNode target, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void LineAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapCloudModel(MindMapNode node, FreeMindMain frame), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), void setDestinationLabel(String destinationLabel), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setReferenceText(String referenceText), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination), void setStyle(String style), void setTarget(MindMapNode target), void setWidth(int width)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_36[[freemind.modes.MindMapLine],[Color getColor(), Color getExteriorColor(), FreeMindMain getFrame(), MindMapNode getSource(), MindMapNode getTarget(), Object clone(), Point getEndInclination(), Point getStartInclination(), String getDestinationLabel(), String getEndArrow(), String getReferenceText(), String getStartArrow(), String getStyle(), String toString(), Stroke getStroke(), XMLElement save(), int getWidth(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseCloudModel(MindMapNode node, FreeMindMain frame), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void EdgeAdapter(MindMapNode target, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void LineAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapCloudModel(MindMapNode node, FreeMindMain frame), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), void setDestinationLabel(String destinationLabel), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setReferenceText(String referenceText), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination), void setStyle(String style), void setTarget(MindMapNode node), void setTarget(MindMapNode target), void setWidth(int width)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->NODE_37[[freemind.modes.ArrowLinkAdapter, freemind.modes.LineAdapter, freemind.modes.LinkAdapter, freemind.modes.MindMapArrowLink, freemind.modes.MindMapLine, freemind.modes.MindMapLink, freemind.modes.mindmapmode.MindMapArrowLinkModel],[XMLElement save(), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_38[[freemind.modes.ArrowLinkAdapter, freemind.modes.LineAdapter, freemind.modes.LinkAdapter, freemind.modes.MindMapArrowLink, freemind.modes.MindMapLine, freemind.modes.MindMapLink],[Point getEndInclination(), Point getStartInclination(), String getEndArrow(), String getStartArrow(), XMLElement save(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setStartArrow(String startArrow), void setStartInclination(Point startInclination)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_39[[freemind.modes.LineAdapter, freemind.modes.LinkAdapter, freemind.modes.MindMapLine, freemind.modes.MindMapLink],[MindMapNode getSource(), Point getEndInclination(), Point getStartInclination(), String getDestinationLabel(), String getEndArrow(), String getReferenceText(), String getStartArrow(), XMLElement save(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void setDestinationLabel(String destinationLabel), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setReferenceText(String referenceText), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_40[[freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.modes.MindMapLink],[MindMapNode getSource(), MindMapNode getTarget(), Point getEndInclination(), Point getStartInclination(), String getDestinationLabel(), String getEndArrow(), String getReferenceText(), String getStartArrow(), XMLElement save(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void setDestinationLabel(String destinationLabel), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setReferenceText(String referenceText), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_35[...,...]
	->	->NODE_41[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.LinkAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.MindMapLink],[MindMapNode getSource(), XMLElement save()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_42[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine],[Color getColor(), MindMapNode getSource(), String getStyle(), Stroke getStroke(), XMLElement save(), int getWidth(), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), void setStyle(String style), void setWidth(int width)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_35[...,...]
	->	->	->NODE_39[...,...]
	->	->NODE_43[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseNodeModel],[String getStyle(), XMLElement save()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_44[[freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseNodeModel],[String getStyle(), XMLElement save(), void BrowseNodeModel(FreeMindMain frame), void BrowseNodeModel(Object userObject, FreeMindMain frame)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_45[[freemind.modes.MindMapNode, freemind.modes.NodeAdapter],[Color getColor(), File getFile(), Font getFont(), FreeMindMain getFrame(), ListIterator childrenFolded(), ListIterator childrenUnfolded(), MindMapCloud getCloud(), MindMapEdge getEdge(), MindMapNode basicCopy(), MindMapNode getParentNode(), MindMapNode getPreferredChild(), MindMapNode shallowCopy(), NodeView getViewer(), String getCodeClassicStyle(), String getCodeMathStyle(), String getFontFamilyName(), String getFontSize(), String getLink(), String getStyle(), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), Tools.BooleanHolder isLeft(), TreePath getPath(), Vector getIcons(), XMLElement save(), boolean hasChildren(), boolean hasFoldedStrictDescendant(), boolean isBold(), boolean isDescendantOf(MindMapNode node), boolean isFolded(), boolean isItalic(), boolean isRoot(), boolean isUnderlined(), int getChildPosition(MindMapNode childNode), int getNodeLevel(), int removeLastIcon(), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), void BrowseNodeModel(FreeMindMain frame), void BrowseNodeModel(Object userObject, FreeMindMain frame), void FileNodeModel(File file, FreeMindMain frame), void MindMapNodeModel(FreeMindMain frame), void MindMapNodeModel(Object userObject, FreeMindMain frame), void NodeAdapter(FreeMindMain frame), void NodeAdapter(Object userObject, FreeMindMain frame), void SchemeNodeModel(FreeMindMain frame), void addIcon(MindIcon _icon), void addToPathVector(Vector pathVector), void collectColors(HashSet colors), void estabilishOwnFont(), void save(Writer writer, MindMapMapModel model), void saveRTF(Writer fileout, int depth, HashMap colorTable), void saveTXT(Writer fileout, int depth), void setBold(boolean bold), void setCloud(MindMapCloud cloud), void setColor(Color color), void setEdge(MindMapEdge edge), void setFolded(boolean folded), void setFont(Font font), void setFontSize(int fontSize), void setItalic(boolean italic), void setLeft(boolean isLeft), void setLink(String link), void setParent(MindMapNode newParent), void setPreferredChild(MindMapNode node), void setStyle(String style), void setUnderlined(boolean underlined), void setViewer(NodeView viewer), void toggleBold(), void toggleItalic()]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_46[[freemind.modes.MindMapNode],[Color getColor(), File getFile(), Font getFont(), FreeMindMain getFrame(), ListIterator childrenFolded(), ListIterator childrenUnfolded(), MindMapCloud getCloud(), MindMapEdge getEdge(), MindMapNode basicCopy(), MindMapNode getParentNode(), MindMapNode getPreferredChild(), MindMapNode shallowCopy(), NodeView getViewer(), String getCodeClassicStyle(), String getCodeMathStyle(), String getFontFamilyName(), String getFontSize(), String getLink(), String getStyle(), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), String toString(), Tools.BooleanHolder isLeft(), TreePath getPath(), Vector getIcons(), XMLElement save(), boolean hasChildren(), boolean hasFoldedStrictDescendant(), boolean isBold(), boolean isDescendantOf(MindMapNode node), boolean isFolded(), boolean isItalic(), boolean isRoot(), boolean isUnderlined(), freemind.main.Tools.BooleanHolder isLeft(), int getChildPosition(MindMapNode childNode), int getNodeLevel(), int removeLastIcon(), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), void BrowseNodeModel(FreeMindMain frame), void BrowseNodeModel(Object userObject, FreeMindMain frame), void FileNodeModel(File file, FreeMindMain frame), void MindMapNodeModel(FreeMindMain frame), void MindMapNodeModel(Object userObject, FreeMindMain frame), void NodeAdapter(FreeMindMain frame), void NodeAdapter(Object userObject, FreeMindMain frame), void SchemeNodeModel(FreeMindMain frame), void addIcon(MindIcon _icon), void addIcon(MindIcon icon), void addToPathVector(Vector pathVector), void collectColors(HashSet colors), void estabilishOwnFont(), void save(Writer writer, MindMapMapModel model), void saveRTF(Writer fileout, int depth, HashMap colorTable), void saveTXT(Writer fileout, int depth), void setBold(boolean bold), void setCloud(MindMapCloud cloud), void setColor(Color color), void setEdge(MindMapEdge edge), void setFolded(boolean folded), void setFont(Font font), void setFontSize(int fontSize), void setItalic(boolean italic), void setLeft(boolean isLeft), void setLink(String link), void setParent(MindMapNode newParent), void setPreferredChild(MindMapNode node), void setStyle(String style), void setUnderlined(boolean underlined), void setViewer(NodeView viewer), void toggleBold(), void toggleItalic()]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->NODE_47[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter],[Color getColor(), String getStyle(), XMLElement save(), void setColor(Color color), void setStyle(String style)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_42[...,...]
	->	->	->	->NODE_48[[freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter],[Color getColor(), FreeMindMain getFrame(), String getStyle(), XMLElement save(), void setColor(Color color), void setStyle(String style)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_45[...,...]
	->	->	->	->	->NODE_35[...,...]
	->	->	->	->	->NODE_49[[freemind.modes.MindMapLine, freemind.modes.MindMapNode],[Color getColor(), FreeMindMain getFrame(), String getStyle(), String toString(), XMLElement save(), void setColor(Color color), void setStyle(String style)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_36[...,...]
	->	->	->	->	->	->NODE_46[...,...]
	->	->NODE_50[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseEdgeModel, freemind.modes.mindmapmode.MindMapEdgeModel],[XMLElement save(), void setColor(Color color), void setStyle(String style)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_51[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.browsemode.BrowseEdgeModel],[XMLElement save(), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), void setStyle(String style)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_42[...,...]
	->	->	->NODE_52[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.mindmapmode.MindMapEdgeModel],[XMLElement save(), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), void setStyle(String style), void setWidth(int width)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_42[...,...]
	->	->	->NODE_47[...,...]
	->	->NODE_53[[freemind.modes.CloudAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapCloud, freemind.modes.MindMapLine, freemind.modes.mindmapmode.MindMapCloudModel],[XMLElement save(), void MindMapCloudModel(MindMapNode node, FreeMindMain frame)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_34[...,...]
	->	->NODE_54[[freemind.modes.ArrowLinkAdapter, freemind.modes.LineAdapter, freemind.modes.LinkAdapter, freemind.modes.MindMapArrowLink, freemind.modes.MindMapLine, freemind.modes.MindMapLink, freemind.modes.browsemode.BrowseArrowLinkModel],[XMLElement save(), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_38[...,...]
	->NODE_55[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.MapView, freemind.view.mindmapview.NodeView],[MapView getMap()]]
	->ITS CHILDREN:=================
	->	->NODE_56[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeView],[MapView getMap(), void setRendering(Graphics2D g)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_57[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView],[Color getColor(), MapView getMap(), Stroke getStroke(), int getRealWidth(), int getWidth(), void setRendering(Graphics2D g)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_58[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView],[Color getColor(), MapView getMap(), Stroke getStroke(), double getZoom(), int getRealWidth(), int getWidth(), void paint(Graphics graphics), void setRendering(Graphics2D g)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_59[[freemind.view.mindmapview.CloudView],[Color getColor(), Color getExteriorColor(), MapView getMap(), MindMapCloud getModel(), Stroke getStroke(), double getZoom(), int getRealWidth(), int getWidth(), void CloudView(MindMapCloud cloudModel, NodeView source, int iterativeLevel), void paint(Graphics graphics), void paintClouds(Graphics2D g, Graphics2D gstroke, double x0, double y0, double x1, double y1, double distanceToConvexHull), void setRendering(Graphics2D g)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->	->	->NODE_60[[freemind.view.mindmapview.ArrowLinkView],[Color getColor(), MapView getMap(), MindMapArrowLink getModel(), Rectangle getBounds(), Rectangle2D getControlPoint(Point2D p), Stroke getStroke(), boolean detectCollision(Point p), double getZoom(), int getRealWidth(), int getWidth(), void ArrowLinkView(MindMapArrowLink arrowLinkModel, NodeView source, NodeView target), void paint(Graphics graphics), void paintArrow(Point p1, Point p3, Graphics2D g), void setRendering(Graphics2D g)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->	->NODE_61[[freemind.view.mindmapview.EdgeView],[Color getColor(), JLabel getLabel(), MapView getMap(), MindMapEdge getModel(), Stroke getStroke(), boolean isAntialiasAll(), boolean isAntialiasEdges(), int getNodeShift(NodeView node), int getRealWidth(), int getSourceShift(), int getTargetShift(), int getWidth(), void BezierEdgeView(NodeView source, NodeView target), void EdgeView(NodeView source, NodeView target), void LinearEdgeView(NodeView source, NodeView target), void SharpBezierEdgeView(NodeView source, NodeView target), void SharpLinearEdgeView(NodeView source, NodeView target), void paint(Graphics2D g), void remove(), void setRendering(Graphics2D g), void update()]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_3[...,...]
	->	->	->NODE_62[[freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeView],[MapView getMap(), void remove(), void setRendering(Graphics2D g), void update()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_61[...,...]
	->	->	->	->NODE_63[[freemind.view.mindmapview.NodeView],[EdgeView getEdge(), LinkedList getChildrenViews(), LinkedList getLeft(), LinkedList getRight(), LinkedList getSiblingViews(), MapView getMap(), MindMapNode getModel(), NodeView getNextPage(), NodeView getNextSibling(), NodeView getNextSiblingSingle(), NodeView getParentView(), NodeView getPreviousPage(), NodeView getPreviousSibling(), NodeView getPreviousSiblingSingle(), NodeView newNodeView(MindMapNode model, MapView map), Point getInPoint(), Point getLinkPoint(), Point getOutPoint(), boolean dropAsSibling(double xCoord), boolean dropPosition(double xCoord), boolean followLink(double xCoord), boolean getIsLong(), boolean isChildOf(NodeView myNodeView), boolean isLeft(), boolean isParentOf(NodeView myNodeView), boolean isRoot(), boolean isSelected(), boolean isSiblingOf(NodeView myNodeView), int getAlignment(), int getDraggedOver(), int getLeftWidthOverhead(), int getTreeHeight(), void BubbleNodeView(MindMapNode model, MapView map), void ForkNodeView(MindMapNode model, MapView map), void NodeView(MindMapNode model, MapView map), void RootNodeView(MindMapNode model, MapView map), void addDragListener(DragGestureListener dgl), void addDropListener(DropTargetListener dtl), void getCoordinates(LinkedList inList, int additionalDistanceForConvexHull), void insert(), void insert(MindMapNode newNode), void paintDragOver(Graphics2D graphics, Dimension size), void paintSelected(Graphics2D graphics, Dimension size), void remove(), void setDraggedOver(Point p), void setDraggedOver(int draggedOver), void setEdge(EdgeView edge), void setLeft(boolean left), void setMap(MapView map), void setModel(MindMapNode model), void setRendering(Graphics2D g), void setTreeHeight(int treeHeight), void update(), void updateAll(), void updateCursor(double xCoord)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_3[...,...]
	->	->NODE_64[[freemind.view.mindmapview.MapView],[ArrayList getSelectedNodesSortedByY(), ArrayList getSelectedsSortedByY(), Controller getController(), DragGestureListener getNodeDragListener(), DropTargetListener getNodeDropListener(), LinkedList getSelecteds(), LinkedList getSelectedsByDepth(), MapView getMap(), MindMap getModel(), MindMapArrowLink detectCollision(Point p), MindMapLayout getMindMapLayout(), NodeKeyListener getNodeKeyListener(), NodeMouseMotionListener getNodeMouseMotionListener(), NodeView getNeighbour(int directionCode), NodeView getRoot(), NodeView getSelected(), NodeView getSelected(int i), Rectangle getInnerBounds(NodeView source), boolean isPrinting(), boolean isSelected(NodeView n), boolean selectContinuous(NodeView newSelected), float getZoom(), int getMaxNodeWidth(), int getSiblingMaxLevel(), int getZoomed(int number), void MapView(MindMap model, Controller controller), void centerNode(NodeView node), void collectLabels(NodeView source, HashMap labels), void deselect(NodeView newSelected), void extendSelectionWithKeyMove(NodeView newlySelectedNodeView, KeyEvent e), void initRoot(), void makeTheSelected(NodeView newSelected), void move(KeyEvent e), void moveToRoot(), void paintClouds(NodeView source, Graphics graphics, int iterativeLevel), void paintEdges(NodeView source, Graphics2D g), void paintLinks(NodeView source, Graphics2D graphics, HashMap labels, HashSet LinkAlreadyVisited), void scrollBy(int x, int y), void scrollNodeToVisible(NodeView node), void scrollNodeToVisible(NodeView node, int extraWidth), void selectAsTheOnlyOneSelected(NodeView newSelected), void selectBranch(NodeView newlySelectedNodeView, boolean extend), void setMoveCursor(boolean isHand), void setSiblingMaxLevel(int level), void setZoom(float zoom), void toggleSelected(NodeView newSelected)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_65[[freemind.controller.Controller.QuitAction],[void QuitAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_66[[freemind.modes.mindmapmode.MindMapPopupMenu],[void MindMapPopupMenu(MindMapController c)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_67[[freemind.view.mindmapview.BubbleNodeView, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.RootNodeView],[Point getInPoint(), Point getOutPoint(), void paintSelected(Graphics2D graphics, Dimension size)]]
	->ITS CHILDREN:=================
	->	->NODE_68[[freemind.view.mindmapview.NodeView, freemind.view.mindmapview.RootNodeView],[EdgeView getEdge(), LinkedList getLeft(), LinkedList getRight(), NodeView getNextSibling(), NodeView getParentView(), NodeView getPreviousSibling(), Point getInPoint(), Point getOutPoint(), boolean dropAsSibling(double xCoord), boolean dropPosition(double xCoord), void RootNodeView(MindMapNode model, MapView map), void insert(MindMapNode newNode), void paintDragOver(Graphics2D graphics, Dimension size), void paintSelected(Graphics2D graphics, Dimension size), void setDraggedOver(Point p), void setEdge(EdgeView edge), void setRendering(Graphics2D g)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_63[...,...]
	->	->NODE_69[[freemind.view.mindmapview.BubbleNodeView, freemind.view.mindmapview.NodeView],[Point getInPoint(), Point getOutPoint(), int getAlignment(), int getLeftWidthOverhead(), void BubbleNodeView(MindMapNode model, MapView map), void paintSelected(Graphics2D graphics, Dimension size)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_63[...,...]
	->NODE_70[[freemind.modes.LinkRegistryAdapter.ID_BasicStateAdapter, freemind.modes.LinkRegistryAdapter.ID_RegisteredAdapter, freemind.modes.LinkRegistryAdapter.ID_UsedStateAdapter, freemind.modes.MindMapLinkRegistry.ID_BasicState, freemind.modes.MindMapLinkRegistry.ID_Registered, freemind.modes.MindMapLinkRegistry.ID_UsedState],[void ID_RegisteredAdapter(MindMapNode target, String ID)]]
	->ITS CHILDREN:=================
	->	->NODE_71[[freemind.modes.LinkRegistryAdapter.ID_BasicStateAdapter, freemind.modes.LinkRegistryAdapter.ID_UsedStateAdapter, freemind.modes.MindMapLinkRegistry.ID_BasicState, freemind.modes.MindMapLinkRegistry.ID_UsedState],[MindMapNode getTarget(), void ID_RegisteredAdapter(MindMapNode target, String ID), void ID_UsedStateAdapter(), void ID_UsedStateAdapter(MindMapNode target, String ID), void clone(ID_UsedStateAdapter state)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_72[[freemind.modes.LinkRegistryAdapter.ID_BasicStateAdapter, freemind.modes.MindMapLinkRegistry.ID_BasicState],[MindMapNode getTarget(), String getID(), void ID_RegisteredAdapter(MindMapNode target, String ID), void ID_UsedStateAdapter(), void ID_UsedStateAdapter(MindMapNode target, String ID), void clone(ID_UsedStateAdapter state)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_73[[freemind.modes.MindMapLinkRegistry.ID_BasicState],[MindMapNode getTarget(), String getID(), String toString(), void ID_RegisteredAdapter(MindMapNode target, String ID), void ID_UsedStateAdapter(), void ID_UsedStateAdapter(MindMapNode target, String ID), void clone(ID_UsedStateAdapter state)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_3[...,...]
	->NODE_74[[freemind.controller.Controller.AboutAction],[void AboutAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_75[[freemind.main.ExampleFileFilter, freemind.main.Tools],[String getExtension(File f)]]
	->ITS CHILDREN:=================
	->	->NODE_76[[freemind.main.Tools],[Color xmlToColor(String string), List stringToList(String string), Point xmlToPoint(String string), Set getAvailableFontFamilyNames(), String BooleanToXml(boolean col), String PointToXml(Point col), String colorToXml(Color col), String expandFileName(String file), String expandPlaceholders(String message, String s1), String expandPlaceholders(String message, String s1, String s2), String expandPlaceholders(String message, String s1, String s2, String s3), String firstLetterCapitalized(String text), String getExtension(File f), String getExtension(String s), String listToString(List list), String removeExtension(String s), String toRelativeURL(URL base, URL target), String toXMLEscapedText(String text), String toXMLEscapedTextWithNBSPizedSpaces(String text), String toXMLUnescapedText(String text), String urlGetFile(URL url), Vector getAvailableFontFamilyNamesAsVector(), boolean executableByExtension(String file), boolean isAbsolutePath(String path), boolean isAvailableFontFamily(String fontFamilyName), boolean safeEquals(String string1, String string2), boolean xmlToBoolean(String string), void setHidden(File file, boolean hidden, boolean synchronously)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_77[[freemind.main.ExampleFileFilter],[String getExtension(File f), boolean isExtensionListInDescription(), void ExampleFileFilter(), void ExampleFileFilter(String extension), void ExampleFileFilter(String extension, String description), void ExampleFileFilter(String[] filters), void ExampleFileFilter(String[] filters, String description), void addExtension(String extension), void setDescription(String description), void setExtensionListInDescription(boolean b)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_78[[freemind.modes.ControllerAdapter.SaveAction],[void SaveAction(ControllerAdapter modeController)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_79[[freemind.view.mindmapview.ConvexHull.thetaComparator, freemind.view.mindmapview.MapView.nodesDepthComparator],[int compare(Object p1, Object p2)]]
	->ITS CHILDREN:=================
	->	->NODE_80[[freemind.view.mindmapview.ConvexHull.thetaComparator],[double theta(Point p1, Point p2), int compare(Object p1, Object p2), void thetaComparator(Point p0)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_81[[freemind.view.mindmapview.MapView.nodesDepthComparator],[int compare(Object p1, Object p2), void nodesDepthComparator()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_82[[freemind.modes.ControllerAdapter.NewChildAction],[void NewChildAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_83[[freemind.main.Tools.Pair],[Object getFirst(), Object getSecond(), void Pair(Object first, Object second)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_84[[freemind.modes.filemode.FileToolBar],[void FileToolBar(FileController controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_85[[freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchWithoutRootAction],[void ImportLinkedBranchWithoutRootAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_86[[freemind.main.XMLElement, freemind.modes.MindIcon, freemind.modes.XMLElementAdapter, freemind.view.MapModule],[void setName(String name)]]
	->ITS CHILDREN:=================
	->	->NODE_87[[freemind.main.XMLElement, freemind.modes.MindIcon],[String getName(), void setName(String name)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_88[[freemind.main.XMLElement],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), Enumeration enumerateAttributeNames(), Enumeration enumerateChildren(), Enumeration enumeratePropertyNames(), FreeMindMain getFrame(), NodeAdapter createNodeAdapter(FreeMindMain frame), NodeAdapter getMapChild(), Object getAttribute(String name), Object getAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiterals), Object getAttribute(String name, Object defaultValue), Object getProperty(String name, Hashtable valueSet, String defaultKey), Object getUserObject(), String getContent(), String getContents(), String getName(), String getProperty(String name), String getProperty(String name, String defaultValue), String getStringAttribute(String name), String getStringAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiterals), String getStringAttribute(String name, String defaultValue), String getStringProperty(String name, Hashtable valueSet, String defaultKey), String getTagName(), Vector getChildren(), XMLElement createAnotherElement(), XMLParseException expectedInput(String charSet), XMLParseException invalidValue(String name, String value), XMLParseException invalidValueSet(String name), XMLParseException syntaxError(String context), XMLParseException unexpectedEndOfData(), XMLParseException unknownEntity(String name), boolean checkCDATA(StringBuffer buf), boolean checkLiteral(String literal), boolean getBooleanAttribute(String name, String trueValue, String falseValue, boolean defaultValue), boolean getProperty(String key, String trueValue, String falseValue, boolean defaultValue), char readChar(), char scanWhitespace(), char scanWhitespace(StringBuffer result), double getDoubleAttribute(String name), double getDoubleAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiteralNumbers), double getDoubleAttribute(String name, double defaultValue), double getProperty(String name, double defaultValue), double getSpecialDoubleProperty(String name, Hashtable valueSet, String defaultKey), int countChildren(), int getIntAttribute(String name), int getIntAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiteralNumbers), int getIntAttribute(String name, int defaultValue), int getIntProperty(String name, Hashtable valueSet, String defaultKey), int getLineNr(), int getProperty(String name, int defaultValue), int getSpecialIntProperty(String name, Hashtable valueSet, String defaultKey), void BrowseXMLElement(FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void MindMapXMLElement(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void XMLElement(), void XMLElement(Hashtable entities), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace, boolean fillBasicConversionTable, boolean ignoreCase), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace, boolean ignoreCase), void XMLElement(boolean skipLeadingWhitespace), void XMLElementAdapter(FreeMindMain frame), void XMLElementAdapter(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void addChild(XMLElement child), void addProperty(String key, int value), void addProperty(String name, Object value), void addProperty(String name, double value), void completeElement(), void parseCharArray(char[] input, int offset, int end), void parseCharArray(char[] input, int offset, int end, int startingLineNr), void parseFromReader(Reader reader), void parseFromReader(Reader reader, int startingLineNr), void parseString(String string), void parseString(String string, int offset), void parseString(String string, int offset, int end), void parseString(String string, int offset, int end, int startingLineNr), void processUnfinishedLinks(MindMapLinkRegistry registry), void removeAttribute(String name), void removeChild(String name), void removeChild(XMLElement child), void removeProperty(String name), void resolveEntity(StringBuffer buf), void scanElement(XMLElement elt), void scanIdentifier(StringBuffer result), void scanPCData(StringBuffer data), void scanString(StringBuffer string), void setAttribute(String name, Object value), void setContent(String content), void setDoubleAttribute(String name, double value), void setIDs(HashMap IDToTarget, MindMapLinkRegistry registry), void setIntAttribute(String name, int value), void setName(String name), void setTagName(String name), void skipComment(), void skipSpecialTag(int bracketLevel), void unreadChar(char ch), void write(Writer writer), void write(Writer writer, boolean withClosingTag), void writeClosingTag(Writer writer), void writeEncoded(Writer writer, String str), void writeWithoutClosingTag(Writer writer)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->	->NODE_89[[freemind.modes.MindIcon],[Icon getIcon(FreeMindMain frame), String getDescription(FreeMindMain frame), String getIconFileName(), String getName(), Vector getAllIconNames(), void MindIcon(String name), void setIcon(Icon _associatedIcon), void setName(String name)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->NODE_90[[freemind.view.MapModule],[MapView getView(), MindMap getModel(), Mode getMode(), void MapModule(MindMap model, MapView view, Mode mode), void rename(), void setModel(MindMap model), void setName(String name), void setView(MapView view)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_91[[freemind.main.XMLElement, freemind.modes.XMLElementAdapter],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), FreeMindMain getFrame(), NodeAdapter createNodeAdapter(FreeMindMain frame), NodeAdapter getMapChild(), Object getUserObject(), XMLElement createAnotherElement(), void BrowseXMLElement(FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void MindMapXMLElement(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void XMLElementAdapter(FreeMindMain frame), void XMLElementAdapter(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void addChild(XMLElement child), void completeElement(), void processUnfinishedLinks(MindMapLinkRegistry registry), void setAttribute(String name, Object value), void setIDs(HashMap IDToTarget, MindMapLinkRegistry registry), void setName(String name)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_88[...,...]
	->NODE_92[[freemind.controller.Controller, freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.filemode.FileController, freemind.modes.schememode.SchemeController, freemind.view.MapModule, freemind.view.mindmapview.MapView],[MindMap getModel()]]
	->ITS CHILDREN:=================
	->	->NODE_93[[freemind.controller.Controller, freemind.view.mindmapview.MapView],[MindMap getModel(), NodeKeyListener getNodeKeyListener(), NodeMouseMotionListener getNodeMouseMotionListener(), void moveToRoot(), void setZoom(float zoom)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_22[...,...]
	->	->	->NODE_64[...,...]
	->	->NODE_94[[freemind.controller.Controller, freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.view.MapModule],[MapView getView(), MindMap getModel(), Mode getMode()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_20[...,...]
	->	->	->NODE_90[...,...]
	->	->NODE_95[[freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.filemode.FileController, freemind.modes.schememode.SchemeController],[JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMap getModel(), MindMapNode getSelected(), MindMapNode newNode()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_96[[freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.schememode.SchemeController],[JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMap getModel(), MindMapNode getSelected(), MindMapNode newNode(), boolean saveAs(), void SchemeController(Mode mode)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_21[...,...]
	->	->	->NODE_97[[freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.filemode.FileController],[JMenu getEditMenu(), JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMap getModel(), MindMapNode getSelected(), MindMapNode newNode(), void FileController(Mode mode)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_21[...,...]
	->	->NODE_98[[freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.view.mindmapview.MapView],[Controller getController(), LinkedList getSelecteds(), MindMap getModel()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_21[...,...]
	->	->	->NODE_64[...,...]
	->NODE_99[[freemind.modes.mindmapmode.MindMapController.NodeColorAction],[void NodeColorAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_100[[freemind.modes.LineAdapter, freemind.modes.LinkRegistryAdapter.ID_BasicStateAdapter, freemind.modes.LinkRegistryAdapter.ID_UsedStateAdapter, freemind.modes.MindMapLine, freemind.modes.MindMapLink, freemind.modes.MindMapLinkRegistry.ID_BasicState, freemind.modes.MindMapLinkRegistry.ID_UsedState],[MindMapNode getTarget()]]
	->ITS CHILDREN:=================
	->	->NODE_40[...,...]
	->	->NODE_101[[freemind.modes.MindMapLine, freemind.modes.MindMapLinkRegistry.ID_BasicState],[MindMapNode getTarget(), String toString()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_73[...,...]
	->	->	->NODE_36[...,...]
	->	->NODE_71[...,...]
	->NODE_102[[freemind.modes.ControllerAdapter.SetLinkByTextFieldAction],[void SetLinkByTextFieldAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_103[[freemind.modes.ControllerAdapter.EditLongAction],[void EditLongAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_104[[freemind.modes.mindmapmode.MindMapController.IconAction],[void IconAction(MindIcon _icon)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_105[[freemind.main.XMLElement, freemind.modes.XMLElementAdapter, freemind.modes.browsemode.BrowseXMLElement, freemind.modes.mindmapmode.MindMapXMLElement],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), NodeAdapter createNodeAdapter(FreeMindMain frame), XMLElement createAnotherElement()]]
	->ITS CHILDREN:=================
	->	->NODE_106[[freemind.main.XMLElement, freemind.modes.XMLElementAdapter, freemind.modes.mindmapmode.MindMapXMLElement],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), NodeAdapter createNodeAdapter(FreeMindMain frame), XMLElement createAnotherElement(), void MindMapXMLElement(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_91[...,...]
	->	->NODE_107[[freemind.main.XMLElement, freemind.modes.XMLElementAdapter, freemind.modes.browsemode.BrowseXMLElement],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), NodeAdapter createNodeAdapter(FreeMindMain frame), XMLElement createAnotherElement(), void BrowseXMLElement(FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_91[...,...]
	->NODE_108[[freemind.modes.ControllerAdapter.SaveAsAction],[void SaveAsAction(ControllerAdapter modeController)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_109[[freemind.modes.mindmapmode.MindMapController.ForkAction],[void ForkAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_110[[freemind.modes.ControllerAdapter.CopyAction],[void CopyAction(Object controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_111[[freemind.controller.Controller.HistoryManager],[void HistoryManager(), void mapChanged(MapModule map), void nextMap(), void previousMap()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_112[[freemind.modes.mindmapmode.MindMapController.RemoveArrowLinkAction],[void RemoveArrowLinkAction(MindMapNode source, MindMapArrowLinkModel arrowLink)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_113[[freemind.modes.mindmapmode.MindMapController.NodeGeneralAction],[void NodeGeneralAction(String textID, String iconPath, SingleNodeOperation singleNodeOperation)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_114[[freemind.controller.Controller.MoveToRootAction],[void MoveToRootAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_115[[freemind.modes.mindmapmode.MindMapController.EdgeStyleAction],[void EdgeStyleAction(String style)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_116[[freemind.controller.Controller.OptionHTMLExportFoldingAction],[void OptionHTMLExportFoldingAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_117[[freemind.modes.MindMapLine, freemind.modes.MindMapLinkRegistry.ID_BasicState, freemind.modes.MindMapNode, freemind.modes.Mode],[String toString()]]
	->ITS CHILDREN:=================
	->	->NODE_101[...,...]
	->	->NODE_118[[freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.Mode],[FreeMindMain getFrame(), String toString()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_119[[freemind.modes.Mode],[BrowseController getBrowseController(), Controller getController(), FreeMindMain getFrame(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), MindMapController getMindMapController(), ModeController getModeController(), String toString(), void BrowseMode(), void FileMode(), void MindMapMode(), void SchemeMode(), void activate(), void init(Controller c), void restore(String restorable), void restore(String restoreable)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->	->NODE_49[...,...]
	->NODE_120[[freemind.controller.ColorSwatch, freemind.controller.Controller.BackgroundSwatch, freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.filemode.FileNodeModel, freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[Color getColor()]]
	->ITS CHILDREN:=================
	->	->NODE_121[[freemind.controller.ColorSwatch],[Color getColor(), void ColorSwatch(), void ColorSwatch(Color color)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_122[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView],[Color getColor(), Stroke getStroke(), int getWidth()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_42[...,...]
	->	->	->NODE_57[...,...]
	->	->	->NODE_123[[freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.view.mindmapview.CloudView],[Color getColor(), Color getExteriorColor(), Stroke getStroke(), int getWidth()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_59[...,...]
	->	->	->	->NODE_35[...,...]
	->	->NODE_124[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.filemode.FileNodeModel],[Color getColor(), String getStyle()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_125[[freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.filemode.FileNodeModel],[Color getColor(), File getFile(), ListIterator childrenFolded(), ListIterator childrenUnfolded(), String getLink(), String getStyle(), boolean hasChildren(), void FileNodeModel(File file, FreeMindMain frame)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_45[...,...]
	->	->	->NODE_47[...,...]
	->	->NODE_126[[freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[Color getColor(), void paint(Graphics2D g), void update()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_127[[freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.SharpBezierEdgeView],[Color getColor(), void SharpBezierEdgeView(NodeView source, NodeView target), void paint(Graphics2D g), void update()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_61[...,...]
	->	->	->NODE_128[[freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.EdgeView],[Color getColor(), void BezierEdgeView(NodeView source, NodeView target), void paint(Graphics2D g), void update()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_61[...,...]
	->	->	->NODE_129[[freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.LinearEdgeView],[Color getColor(), void LinearEdgeView(NodeView source, NodeView target), void paint(Graphics2D g), void update()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_61[...,...]
	->	->	->NODE_130[[freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[Color getColor(), void SharpLinearEdgeView(NodeView source, NodeView target), void paint(Graphics2D g), void update()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_61[...,...]
	->NODE_131[[freemind.controller.LastOpenedList],[ListIterator listIterator(), String save(), void LastOpenedList(Controller c, String restored), void load(String data), void mapClosed(MapModule map), void mapOpened(MapModule map), void open(String restoreable)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_132[[freemind.modes.mindmapmode.MindMapController.ImportFolderStructureAction],[void ImportFolderStructureAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_133[[freemind.controller.Controller.BackgroundAction],[void BackgroundAction(Controller controller, Icon icon)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_134[[freemind.modes.ControllerAdapter, freemind.modes.Mode, freemind.modes.ModeController, freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapMode, freemind.modes.mindmapmode.MindMapToolBar, freemind.modes.schememode.SchemeMode],[JToolBar getLeftToolBar()]]
	->ITS CHILDREN:=================
	->	->NODE_23[...,...]
	->	->NODE_135[[freemind.modes.ControllerAdapter, freemind.modes.Mode, freemind.modes.ModeController, freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode],[Controller getController(), JToolBar getLeftToolBar()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_136[[freemind.modes.Mode, freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode],[Controller getController(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), ModeController getModeController(), void activate(), void init(Controller c), void restore(String restoreable)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_137[[freemind.modes.Mode, freemind.modes.mindmapmode.MindMapMode],[Controller getController(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), MindMapController getMindMapController(), ModeController getModeController(), void MindMapMode(), void activate(), void init(Controller c), void restore(String restoreable)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_119[...,...]
	->	->	->	->NODE_138[[freemind.modes.Mode, freemind.modes.browsemode.BrowseMode],[BrowseController getBrowseController(), Controller getController(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), ModeController getModeController(), void BrowseMode(), void activate(), void init(Controller c), void restore(String restoreable)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_119[...,...]
	->	->	->	->NODE_139[[freemind.modes.Mode, freemind.modes.schememode.SchemeMode],[Controller getController(), FreeMindMain getFrame(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), ModeController getModeController(), void SchemeMode(), void activate(), void init(Controller c), void restore(String restoreable)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_119[...,...]
	->	->	->	->NODE_140[[freemind.modes.Mode, freemind.modes.filemode.FileMode],[Controller getController(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), ModeController getModeController(), void FileMode(), void activate(), void init(Controller c), void restore(String restoreable)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_119[...,...]
	->	->	->NODE_141[[freemind.modes.ControllerAdapter, freemind.modes.Mode, freemind.modes.ModeController, freemind.modes.schememode.SchemeMode],[Controller getController(), FreeMindMain getFrame(), JToolBar getLeftToolBar()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_21[...,...]
	->	->	->	->NODE_139[...,...]
	->NODE_142[[freemind.controller.Controller.ToggleLeftToolbarAction],[void ToggleLeftToolbarAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_143[[freemind.modes.ControllerAdapter.FollowLinkAction, freemind.modes.browsemode.BrowseController.FollowLinkAction, freemind.modes.mindmapmode.MindMapController.FollowLinkAction],[void FollowLinkAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_144[[freemind.modes.filemode.FileController.CenterAction],[void CenterAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_145[[freemind.main.Tools.ObjectHolder],[Object getObject(), void ObjectHolder(), void setObject(Object object)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_146[[freemind.controller.NodeDropListener, freemind.modes.ControllerAdapter.FileOpener],[boolean isDropAcceptable(DropTargetDropEvent event), void dragScroll(DropTargetDragEvent e)]]
	->ITS CHILDREN:=================
	->	->NODE_147[[freemind.controller.NodeDropListener],[boolean isDragAcceptable(DropTargetDragEvent ev), boolean isDropAcceptable(DropTargetDropEvent event), void NodeDropListener(Controller controller), void dragScroll(DropTargetDragEvent e)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_148[[freemind.modes.ControllerAdapter.FileOpener],[boolean isDragAcceptable(DropTargetDragEvent event), boolean isDropAcceptable(DropTargetDropEvent event), void dragScroll(DropTargetDragEvent e)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_149[[freemind.modes.mindmapmode.MindMapController.SingleNodeOperation],[void apply(MindMapMapModel map, MindMapNodeModel node)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_150[[freemind.modes.ControllerAdapter.FindAction],[void FindAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_151[[freemind.view.mindmapview.ForkNodeView, freemind.view.mindmapview.NodeView],[void ForkNodeView(MindMapNode model, MapView map)]]
	->ITS CHILDREN:=================
	->	->NODE_63[...,...]
	->NODE_152[[freemind.modes.ControllerAdapter.ToggleFoldedAction],[void ToggleFoldedAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_153[[freemind.view.mindmapview.MultipleImage],[int getImageCount(), void MultipleImage(double zoom), void addImage(ImageIcon image)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_154[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.filemode.FileEdgeModel],[void FileEdgeModel(MindMapNode node, FreeMindMain frame)]]
	->ITS CHILDREN:=================
	->	->NODE_42[...,...]
	->NODE_155[[freemind.modes.filemode.FileController.OpenPathAction],[void OpenPathAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_156[[freemind.modes.mindmapmode.MindMapController.ChangeArrowsInArrowLinkAction],[void ChangeArrowsInArrowLinkAction(String text, String iconPath, MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_157[[freemind.modes.mindmapmode.MindMapController.ImportBranchAction],[void ImportBranchAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_158[[freemind.controller.MindMapNodesSelection],[void MindMapNodesSelection(String nodesContent, String stringContent, String rtfContent, String dropActionContent), void setDropAction(String dropActionContent)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_159[[freemind.controller.Controller.NavigationNextMapAction],[void NavigationNextMapAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_160[[freemind.controller.MapMouseMotionListener],[void MapMouseMotionListener(Controller controller), void handlePopup(MouseEvent e)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_161[[freemind.modes.mindmapmode.MindMapMapModel.doAutomaticSave],[void doAutomaticSave(MindMapMapModel model, int numberOfTempFiles, boolean filesShouldBeDeletedAfterShutdown, File pathToStore)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_162[[freemind.controller.Controller.OpenFAQAction],[void OpenFAQAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_163[[freemind.main.Tools.IntHolder],[int getValue(), void IntHolder(), void IntHolder(int value), void setValue(int value)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_164[[freemind.modes.ControllerAdapter, freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.ModeController, freemind.modes.browsemode.BrowseMapModel, freemind.modes.filemode.FileMapModel, freemind.modes.mindmapmode.MindMapMapModel, freemind.modes.schememode.SchemeMapModel],[boolean save(File file), void load(File file)]]
	->ITS CHILDREN:=================
	->	->NODE_165[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.browsemode.BrowseMapModel, freemind.modes.mindmapmode.MindMapMapModel],[MindMapLinkRegistry getLinkRegistry(), boolean save(File file), void load(File file)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_166[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.browsemode.BrowseMapModel],[BrowseNodeModel loadTree(URL url), File getFile(), MindMapLinkRegistry getLinkRegistry(), URL getURL(), boolean isSaved(), boolean save(File file), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), void BrowseMapModel(FreeMindMain frame), void load(File file), void load(URL url), void setFile(), void setURL(URL v)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_11[...,...]
	->	->	->NODE_10[...,...]
	->	->NODE_167[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.browsemode.BrowseMapModel, freemind.modes.filemode.FileMapModel],[boolean isSaved(), boolean save(File file), void load(File file)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_166[...,...]
	->	->	->NODE_168[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.filemode.FileMapModel],[boolean isSaved(), boolean save(File file), void FileMapModel(File root, FreeMindMain frame), void FileMapModel(FreeMindMain frame), void changeNode(MindMapNode node, String newText), void load(File file)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_11[...,...]
	->	->NODE_169[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.schememode.SchemeMapModel],[String getCode(), boolean save(File file), void SchemeMapModel(FreeMindMain frame), void load(File file), void loadMathStyle(Reader re)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_11[...,...]
	->	->NODE_170[[freemind.modes.ControllerAdapter, freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.ModeController, freemind.modes.browsemode.BrowseMapModel],[boolean save(File file), void load(File file), void load(URL url)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_171[[freemind.modes.ControllerAdapter, freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.ModeController],[FreeMindMain getFrame(), String getText(String textId), boolean save(File file), void load(File file), void load(URL url)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_11[...,...]
	->	->	->	->NODE_21[...,...]
	->	->	->NODE_166[...,...]
	->NODE_172[[freemind.modes.ModesCreator],[Map getAllModes(), void ModesCreator(Controller c)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_173[[freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.view.mindmapview.NodeView],[boolean isRoot()]]
	->ITS CHILDREN:=================
	->	->NODE_45[...,...]
	->	->NODE_63[...,...]
	->NODE_174[[freemind.modes.ControllerAdapter.NodeDownAction],[void NodeDownAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_175[[freemind.modes.ControllerAdapter, freemind.modes.MindMapNode, freemind.modes.ModeController, freemind.modes.NodeAdapter, freemind.modes.mindmapmode.MindMapController],[void setFontSize(int fontSize)]]
	->ITS CHILDREN:=================
	->	->NODE_25[...,...]
	->	->NODE_176[[freemind.modes.ControllerAdapter, freemind.modes.MindMapNode, freemind.modes.ModeController, freemind.modes.NodeAdapter],[FreeMindMain getFrame(), void setFontSize(int fontSize)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_45[...,...]
	->	->	->NODE_21[...,...]
	->NODE_177[[freemind.modes.mindmapmode.MindMapController.ExportBranchToHTMLAction],[void ExportBranchToHTMLAction(MindMapController controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_178[[freemind.modes.mindmapmode.MindMapController.CloudColorAction],[void CloudColorAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_179[[freemind.controller.NodeKeyListener],[void NodeKeyListener(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_180[[freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[void update()]]
	->ITS CHILDREN:=================
	->	->NODE_126[...,...]
	->	->NODE_62[...,...]
	->NODE_181[[freemind.controller.NodeMouseMotionListener],[Rectangle getControlRegion(Point2D p), void NodeMouseMotionListener(Controller controller), void createTimer(MouseEvent e), void stopTimerForDelayedSelection(), void updateSelectionMethod(Controller c)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_182[[freemind.modes.ControllerAdapter.PasteAction],[void PasteAction(Object controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_183[[freemind.modes.ControllerAdapter.SetLinkByFileChooserAction],[void SetLinkByFileChooserAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_184[[freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchAction],[void ImportLinkedBranchAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_185[[freemind.modes.mindmapmode.MindMapController.EdgeColorAction],[void EdgeColorAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_186[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.schememode.SchemeEdgeModel],[void SchemeEdgeModel(MindMapNode node, FreeMindMain frame)]]
	->ITS CHILDREN:=================
	->	->NODE_42[...,...]
	->NODE_187[[freemind.modes.ControllerAdapter.SetImageByFileChooserAction],[void SetImageByFileChooserAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_188[[freemind.modes.mindmapmode.MindMapController.ColorArrowLinkAction],[void ColorArrowLinkAction(MindMapNode source, MindMapArrowLinkModel arrowLink)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_189[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseNodeModel, freemind.modes.filemode.FileNodeModel, freemind.modes.mindmapmode.MindMapNodeModel],[String getStyle()]]
	->ITS CHILDREN:=================
	->	->NODE_124[...,...]
	->	->NODE_43[...,...]
	->	->NODE_190[[freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.mindmapmode.MindMapNodeModel],[MindMapNode basicCopy(), String getStyle(), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), void MindMapNodeModel(FreeMindMain frame), void MindMapNodeModel(Object userObject, FreeMindMain frame), void collectColors(HashSet colors), void save(Writer writer, MindMapMapModel model), void saveRTF(Writer fileout, int depth, HashMap colorTable), void saveTXT(Writer fileout, int depth)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_45[...,...]
	->NODE_191[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.RootNodeView],[void setRendering(Graphics2D g)]]
	->ITS CHILDREN:=================
	->	->NODE_68[...,...]
	->	->NODE_56[...,...]
	->NODE_192[[freemind.modes.ControllerAdapter.FindNextAction],[void FindNextAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_193[[freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.browsemode.BrowseController, freemind.modes.filemode.FileController, freemind.modes.mindmapmode.MindMapController, freemind.modes.schememode.SchemeController],[JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode()]]
	->ITS CHILDREN:=================
	->	->NODE_194[[freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.modes.browsemode.BrowseController, freemind.modes.filemode.FileController, freemind.modes.mindmapmode.MindMapController],[JMenu getEditMenu(), JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_26[...,...]
	->	->	->NODE_97[...,...]
	->	->NODE_95[...,...]
	->NODE_195[[freemind.controller.Controller.NavigationPreviousMapAction],[void NavigationPreviousMapAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_196[[freemind.modes.CloudAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapCloud, freemind.modes.MindMapLine, freemind.view.mindmapview.CloudView],[Color getExteriorColor()]]
	->ITS CHILDREN:=================
	->	->NODE_34[...,...]
	->	->NODE_123[...,...]
	->NODE_197[[freemind.controller.Controller.OptionSelectionMechanismAction],[void OptionSelectionMechanismAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_198[[freemind.controller.Controller, freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.modes.ControllerAdapter, freemind.modes.ModeController, freemind.view.MapModule],[MapView getView()]]
	->ITS CHILDREN:=================
	->	->NODE_199[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.view.MapModule],[MapView getView(), void setView(MapView view)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_200[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain],[Container getViewport(), Controller getController(), File getPatternsFile(), MapView getView(), MenuBar getFreeMindMenuBar(), ResourceBundle getResources(), String getFreemindDirectory(), String getFreemindVersion(), String getProperty(String key), URL getResource(String name), boolean isApplet(), int getWinHeight(), int getWinState(), int getWinWidth(), java.util.logging.Logger getLogger(String forClass), void err(String msg), void out(String msg), void saveProperties(), void setProperty(String key, String value), void setView(MapView view), void setWaitingCursor(boolean waiting)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_201[[freemind.main.FreeMindApplet, freemind.main.FreeMindMain],[Container getViewport(), Controller getController(), File getPatternsFile(), MapView getView(), MenuBar getFreeMindMenuBar(), ResourceBundle getResources(), String getFreemindDirectory(), String getFreemindVersion(), String getProperty(String key), URL getResource(String name), boolean isApplet(), int getMaxNodeWidth(), int getWinHeight(), int getWinState(), int getWinWidth(), java.util.logging.Logger getLogger(String forClass), void FreeMindApplet(), void err(String msg), void openDocument(URL doc), void out(String msg), void saveProperties(), void setProperty(String key, String value), void setTitle(String title), void setView(MapView view), void setWaitingCursor(boolean waiting)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_202[[freemind.main.FreeMindMain],[Container getContentPane(), Container getViewport(), Controller getController(), File getPatternsFile(), JLayeredPane getLayeredPane(), MapView getView(), MenuBar getFreeMindMenuBar(), ResourceBundle getResources(), String getFreemindDirectory(), String getFreemindVersion(), String getProgramForFile(String type), String getProperty(String key), String transpose(String input, char findChar, String replaceString), URL getResource(String name), boolean isApplet(), int getMaxNodeWidth(), int getWinHeight(), int getWinState(), int getWinWidth(), java.util.logging.Logger getLogger(String forClass), void FreeMind(), void FreeMindApplet(), void err(String msg), void main(String[] args), void openDocument(URL doc), void openDocument(URL location), void openDocument(URL url), void out(String msg), void repaint(), void saveProperties(), void setProperty(String key, String value), void setTitle(String title), void setView(MapView view), void setWaitingCursor(boolean waiting)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->	->NODE_203[[freemind.main.FreeMind, freemind.main.FreeMindMain],[Container getViewport(), Controller getController(), File getPatternsFile(), MapView getView(), MenuBar getFreeMindMenuBar(), ResourceBundle getResources(), String getFreemindDirectory(), String getFreemindVersion(), String getProgramForFile(String type), String getProperty(String key), String transpose(String input, char findChar, String replaceString), URL getResource(String name), boolean isApplet(), int getWinHeight(), int getWinState(), int getWinWidth(), java.util.logging.Logger getLogger(String forClass), void FreeMind(), void err(String msg), void main(String[] args), void openDocument(URL url), void out(String msg), void saveProperties(), void setProperty(String key, String value), void setView(MapView view), void setWaitingCursor(boolean waiting)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_202[...,...]
	->	->	->NODE_90[...,...]
	->	->NODE_94[...,...]
	->	->NODE_204[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.modes.ControllerAdapter, freemind.modes.ModeController],[Controller getController(), MapView getView(), URL getResource(String name)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_21[...,...]
	->	->	->NODE_200[...,...]
	->NODE_205[[freemind.modes.mindmapmode.MindMapController.JoinNodesAction],[void JoinNodesAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_206[[freemind.controller.Controller.DocumentationAction],[void DocumentationAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_207[[freemind.controller.Controller.PrintAction],[void PrintAction(Controller controller, boolean isDlg)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_208[[freemind.controller.Controller.ToggleToolbarAction],[void ToggleToolbarAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_209[[freemind.controller.MapMouseWheelListener],[void MapMouseWheelListener(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_210[[freemind.controller.Controller.HistoryNextMapAction],[void HistoryNextMapAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_211[[freemind.main.XMLElement, freemind.main.XMLParseException],[int getLineNr()]]
	->ITS CHILDREN:=================
	->	->NODE_88[...,...]
	->	->NODE_212[[freemind.main.XMLParseException],[int getLineNr(), void XMLParseException(String name, String message), void XMLParseException(String name, int lineNr, String message)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_213[[freemind.modes.ControllerAdapter.EditPopupMenu],[void EditPopupMenu(JTextComponent textComponent)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_214[[freemind.modes.mindmapmode.MindMapController.BubbleAction],[void BubbleAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_215[[freemind.modes.ControllerAdapter.NewPreviousSiblingAction],[void NewPreviousSiblingAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_216[[freemind.controller.Controller.ZoomInAction],[void ZoomInAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_217[[freemind.controller.Controller, freemind.controller.Controller.MapModuleManager, freemind.modes.ControllerAdapter, freemind.modes.ModeController],[MapModule getMapModule()]]
	->ITS CHILDREN:=================
	->	->NODE_218[[freemind.controller.Controller.MapModuleManager, freemind.modes.ControllerAdapter, freemind.modes.ModeController],[MapModule getMapModule(), boolean close(), void updateMapModuleName()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_21[...,...]
	->	->	->NODE_219[[freemind.controller.Controller.MapModuleManager],[Map getMapModules(), MapModule getMapModule(), boolean close(), boolean tryToChangeToMapModule(String mapModule), void MapModuleManager(Controller c), void addToMapModules(String key, MapModule value), void changeToAnotherMap(String toBeClosed), void changeToMapModule(String mapModule), void changeToMapModuleWithoutHistory(MapModule map), void changeToMapOfMode(Mode mode), void mapModuleChanged(), void newMapModule(MindMap map), void nextMapModule(), void previousMapModule(), void setMapModule(MapModule mapModule), void updateMapModuleName(), void updateNavigationActions(), void updateZoomBar()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->NODE_20[...,...]
	->NODE_220[[freemind.modes.schememode.SchemeController.EvaluateAction],[void EvaluateAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_221[[freemind.modes.ControllerAdapter.GotoLinkNodeAction],[void GotoLinkNodeAction(String text, MindMapNode source)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_222[[freemind.view.mindmapview.ConvexHull],[Vector calculateHull(LinkedList coordinates), Vector doGraham(Vector p), int ccw(Point p0, Point p1, Point p2)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_223[[freemind.modes.mindmapmode.MindMapController.ImportExplorerFavoritesAction],[void ImportExplorerFavoritesAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_224[[freemind.modes.ControllerAdapter.CutAction],[void CutAction(Object controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_225[[freemind.modes.ControllerAdapter.OpenAction],[void OpenAction(ControllerAdapter modeController)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_226[[freemind.modes.ControllerAdapter.NewMapAction],[void NewMapAction(ControllerAdapter controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_227[[freemind.controller.NodeDragListener],[Cursor getCursorByAction(int dragAction), void NodeDragListener(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_228[[freemind.controller.Controller.HistoryPreviousMapAction],[void HistoryPreviousMapAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_229[[freemind.modes.mindmapmode.MindMapController.ExportBranchAction],[void ExportBranchAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_230[[freemind.controller.Controller.OptionAntialiasAction],[void OptionAntialiasAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_231[[freemind.modes.ControllerAdapter, freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.ModeController, freemind.modes.browsemode.BrowseController, freemind.modes.browsemode.BrowseMapModel],[void load(URL url)]]
	->ITS CHILDREN:=================
	->	->NODE_27[...,...]
	->	->NODE_170[...,...]
	->NODE_232[[freemind.controller.Controller.LicenseAction],[void LicenseAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_233[[freemind.main.Tools.BooleanHolder],[boolean getValue(), void BooleanHolder(), void setValue(boolean value)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_234[[freemind.modes.mindmapmode.MindMapController.ExportToHTMLAction],[void ExportToHTMLAction(MindMapController controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_235[[freemind.modes.ControllerAdapter.NodeUpAction],[void NodeUpAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_236[[freemind.modes.ControllerAdapter.EditCopyAction],[void EditCopyAction(JTextComponent textComponent)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_237[[freemind.controller.Controller, freemind.main.XMLElement, freemind.modes.ControllerAdapter, freemind.modes.LineAdapter, freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.Mode, freemind.modes.ModeController, freemind.modes.NodeAdapter, freemind.modes.XMLElementAdapter, freemind.modes.schememode.SchemeMode, freemind.view.mindmapview.MindMapLayout],[FreeMindMain getFrame()]]
	->ITS CHILDREN:=================
	->	->NODE_171[...,...]
	->	->NODE_20[...,...]
	->	->NODE_48[...,...]
	->	->NODE_141[...,...]
	->	->NODE_238[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.MindMapNode, freemind.modes.NodeAdapter],[File getFile(), FreeMindMain getFrame()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_11[...,...]
	->	->	->NODE_45[...,...]
	->	->NODE_176[...,...]
	->	->NODE_118[...,...]
	->	->NODE_239[[freemind.view.mindmapview.MindMapLayout],[FreeMindMain getFrame(), MapView getMapView(), RootNodeView getRoot(), int sumOfAlreadyComputedTreeHeights(LinkedList v), void MindMapLayout(MapView map), void layout(), void layout(NodeView node), void placeNode(NodeView node, int relativeX, int relativeY), void resizeMap(int outmostX), void updateRelativeYOfChildren(NodeView node), void updateTreeHeightFromChildren(NodeView node), void updateTreeHeightsAndRelativeYOfAncestors(NodeView node), void updateTreeHeightsAndRelativeYOfDescendants(NodeView node), void updateTreeHeightsAndRelativeYOfDescendantsAndAncestors(NodeView node), void updateTreeHeightsAndRelativeYOfWholeMap()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_91[...,...]
	->NODE_240[[freemind.modes.mindmapmode.MindMapController.EdgeWidthAction],[void EdgeWidthAction(int width)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_241[[freemind.modes.ControllerAdapter.NewChildWithoutFocusAction],[void NewChildWithoutFocusAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_242[[freemind.modes.ControllerAdapter.EditAction],[void EditAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_243[[freemind.controller.Controller.CloseAction],[void CloseAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_244[[freemind.controller.MenuBar],[JPopupMenu getMapsPopupMenu(), void MenuBar(Controller controller), void addOptionSet(Action action, String[] textIDs, JMenu menu, String selectedTextID), void copyMenuItems(JMenu source, JMenu dest), void updateEditMenu(), void updateFileMenu(), void updateLastOpenedList(), void updateMapsMenu()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_245[[freemind.main.XMLElement, freemind.modes.MindIcon, freemind.modes.StylePattern],[String getName()]]
	->ITS CHILDREN:=================
	->	->NODE_87[...,...]
	->	->NODE_246[[freemind.modes.StylePattern],[Color getEdgeColor(), Color getNodeColor(), Font getNodeFont(), List loadPatterns(File file), List loadPatterns(Reader reader), MindIcon getNodeIcon(), String getEdgeStyle(), String getName(), String getNodeStyle(), String getText(), StylePattern getChildrenStylePattern(), boolean getAppliesToChildren(), boolean getAppliesToEdge(), boolean getAppliesToNode(), boolean getAppliesToNodeFont(), boolean getAppliesToNodeIcon(), boolean getFolded(), boolean getRecursive(), int getEdgeWidth(), void StylePattern(XMLElement elm, List justConstructedPatterns), void loadPattern(XMLElement pattern, List justConstructedPatterns), void setChildrenStylePattern(StylePattern ChildrenStylePattern), void setEdgeColor(Color edgeColor), void setEdgeStyle(String edgeStyle), void setEdgeWidth(int edgeWidth), void setFolded(boolean v), void setName(String v), void setNodeColor(Color v), void setNodeFont(Font nodeFont), void setNodeIcon(MindIcon nodeIcon), void setNodeStyle(String nodeStyle), void setRecursive(boolean v), void setText(String v)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_247[[freemind.modes.LinkRegistryAdapter, freemind.modes.MindMapLinkRegistry],[ID_BasicState getState(MindMapNode node), ID_Registered registerLinkTarget(MindMapNode target), ID_Registered registerLinkTarget(MindMapNode target, String proposedID), MindMapNode getTargetForID(String ID), String generateUniqueID(String proposedID), String getIDString(MindMapNode node), String getLabel(MindMapNode target), Vector getAllLinks(MindMapNode node), Vector getAllLinksFromMe(MindMapNode source), Vector getAllLinksIntoMe(MindMapNode target), Vector getAllSources(MindMapNode target), Vector getAssignedLinksVector(ID_Registered state), Vector getCuttedNode(String oldTargetID), void LinkRegistryAdapter(), void clearCuttedNodeBuffer(), void cutNode(MindMapNode target), void deregisterLink(MindMapLink link), void deregisterLinkTarget(MindMapNode target), void registerLink(MindMapLink link)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_248[[freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.schememode.SchemeNodeModel],[String getCodeClassicStyle(), String getCodeMathStyle(), void SchemeNodeModel(FreeMindMain frame)]]
	->ITS CHILDREN:=================
	->	->NODE_45[...,...]
	->NODE_249[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseMapModel, freemind.modes.filemode.FileNodeModel],[File getFile()]]
	->ITS CHILDREN:=================
	->	->NODE_166[...,...]
	->	->NODE_125[...,...]
	->	->NODE_238[...,...]
	->NODE_250[[freemind.modes.ControllerAdapter.RemoveAction],[void RemoveAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_251[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.modes.ControllerAdapter, freemind.modes.Mode, freemind.modes.ModeController, freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode, freemind.view.mindmapview.MapView],[Controller getController()]]
	->ITS CHILDREN:=================
	->	->NODE_252[[freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.view.mindmapview.MapView],[Controller getController(), int getMaxNodeWidth()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_201[...,...]
	->	->	->NODE_64[...,...]
	->	->NODE_135[...,...]
	->	->NODE_204[...,...]
	->	->NODE_98[...,...]
Done printing lattice!
Using complex purge
Printing lattice after purging extents
NODE_0[[freemind.controller.ColorSwatch, freemind.controller.Controller, freemind.controller.Controller.AboutAction, freemind.controller.Controller.BackgroundAction, freemind.controller.Controller.BackgroundSwatch, freemind.controller.Controller.CloseAction, freemind.controller.Controller.DocumentationAction, freemind.controller.Controller.HistoryManager, freemind.controller.Controller.HistoryNextMapAction, freemind.controller.Controller.HistoryPreviousMapAction, freemind.controller.Controller.LicenseAction, freemind.controller.Controller.MapModuleManager, freemind.controller.Controller.MoveToRootAction, freemind.controller.Controller.NavigationNextMapAction, freemind.controller.Controller.NavigationPreviousMapAction, freemind.controller.Controller.OpenFAQAction, freemind.controller.Controller.OptionAntialiasAction, freemind.controller.Controller.OptionHTMLExportFoldingAction, freemind.controller.Controller.OptionSelectionMechanismAction, freemind.controller.Controller.PageAction, freemind.controller.Controller.PrintAction, freemind.controller.Controller.QuitAction, freemind.controller.Controller.ToggleLeftToolbarAction, freemind.controller.Controller.ToggleMenubarAction, freemind.controller.Controller.ToggleToolbarAction, freemind.controller.Controller.ZoomInAction, freemind.controller.Controller.ZoomOutAction, freemind.controller.LastOpenedList, freemind.controller.MainToolBar, freemind.controller.MapMouseMotionListener, freemind.controller.MapMouseWheelListener, freemind.controller.MenuBar, freemind.controller.MindMapNodesSelection, freemind.controller.NodeDragListener, freemind.controller.NodeDropListener, freemind.controller.NodeKeyListener, freemind.controller.NodeMouseMotionListener, freemind.controller.NodeMouseMotionListener.timeDelayedSelection, freemind.main.ExampleFileFilter, freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.main.Tools, freemind.main.Tools.BooleanHolder, freemind.main.Tools.IntHolder, freemind.main.Tools.ObjectHolder, freemind.main.Tools.Pair, freemind.main.XMLElement, freemind.main.XMLParseException, freemind.modes.ArrowLinkAdapter, freemind.modes.CloudAdapter, freemind.modes.ControllerAdapter, freemind.modes.ControllerAdapter.CopyAction, freemind.modes.ControllerAdapter.CopySingleAction, freemind.modes.ControllerAdapter.CutAction, freemind.modes.ControllerAdapter.EditAction, freemind.modes.ControllerAdapter.EditCopyAction, freemind.modes.ControllerAdapter.EditLongAction, freemind.modes.ControllerAdapter.EditPopupMenu, freemind.modes.ControllerAdapter.FileOpener, freemind.modes.ControllerAdapter.FindAction, freemind.modes.ControllerAdapter.FindNextAction, freemind.modes.ControllerAdapter.FollowLinkAction, freemind.modes.ControllerAdapter.GotoLinkNodeAction, freemind.modes.ControllerAdapter.NewChildAction, freemind.modes.ControllerAdapter.NewChildWithoutFocusAction, freemind.modes.ControllerAdapter.NewMapAction, freemind.modes.ControllerAdapter.NewPreviousSiblingAction, freemind.modes.ControllerAdapter.NewSiblingAction, freemind.modes.ControllerAdapter.NodeDownAction, freemind.modes.ControllerAdapter.NodeUpAction, freemind.modes.ControllerAdapter.OpenAction, freemind.modes.ControllerAdapter.PasteAction, freemind.modes.ControllerAdapter.RemoveAction, freemind.modes.ControllerAdapter.SaveAction, freemind.modes.ControllerAdapter.SaveAsAction, freemind.modes.ControllerAdapter.SetImageByFileChooserAction, freemind.modes.ControllerAdapter.SetLinkByFileChooserAction, freemind.modes.ControllerAdapter.SetLinkByTextFieldAction, freemind.modes.ControllerAdapter.ToggleChildrenFoldedAction, freemind.modes.ControllerAdapter.ToggleFoldedAction, freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.LinkAdapter, freemind.modes.LinkRegistryAdapter, freemind.modes.LinkRegistryAdapter.ID_BasicStateAdapter, freemind.modes.LinkRegistryAdapter.ID_RegisteredAdapter, freemind.modes.LinkRegistryAdapter.ID_UsedStateAdapter, freemind.modes.MapAdapter, freemind.modes.MindIcon, freemind.modes.MindMap, freemind.modes.MindMapArrowLink, freemind.modes.MindMapCloud, freemind.modes.MindMapEdge, freemind.modes.MindMapLine, freemind.modes.MindMapLink, freemind.modes.MindMapLinkRegistry, freemind.modes.MindMapLinkRegistry.ID_BasicState, freemind.modes.MindMapLinkRegistry.ID_Registered, freemind.modes.MindMapLinkRegistry.ID_UsedState, freemind.modes.MindMapNode, freemind.modes.Mode, freemind.modes.ModeController, freemind.modes.ModesCreator, freemind.modes.NodeAdapter, freemind.modes.StylePattern, freemind.modes.XMLElementAdapter, freemind.modes.browsemode.BrowseArrowLinkModel, freemind.modes.browsemode.BrowseCloudModel, freemind.modes.browsemode.BrowseController, freemind.modes.browsemode.BrowseController.FollowLinkAction, freemind.modes.browsemode.BrowseEdgeModel, freemind.modes.browsemode.BrowseMapModel, freemind.modes.browsemode.BrowseMode, freemind.modes.browsemode.BrowseNodeModel, freemind.modes.browsemode.BrowsePopupMenu, freemind.modes.browsemode.BrowseToolBar, freemind.modes.browsemode.BrowseXMLElement, freemind.modes.filemode.FileController, freemind.modes.filemode.FileController.CenterAction, freemind.modes.filemode.FileController.OpenPathAction, freemind.modes.filemode.FileEdgeModel, freemind.modes.filemode.FileMapModel, freemind.modes.filemode.FileMode, freemind.modes.filemode.FileNodeModel, freemind.modes.filemode.FilePopupMenu, freemind.modes.filemode.FileToolBar, freemind.modes.mindmapmode.MindMapArrowLinkModel, freemind.modes.mindmapmode.MindMapCloudModel, freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapController.ApplyPatternAction, freemind.modes.mindmapmode.MindMapController.BubbleAction, freemind.modes.mindmapmode.MindMapController.ChangeArrowsInArrowLinkAction, freemind.modes.mindmapmode.MindMapController.CloudColorAction, freemind.modes.mindmapmode.MindMapController.ColorArrowLinkAction, freemind.modes.mindmapmode.MindMapController.EdgeColorAction, freemind.modes.mindmapmode.MindMapController.EdgeStyleAction, freemind.modes.mindmapmode.MindMapController.EdgeWidthAction, freemind.modes.mindmapmode.MindMapController.ExportBranchAction, freemind.modes.mindmapmode.MindMapController.ExportBranchToHTMLAction, freemind.modes.mindmapmode.MindMapController.ExportToHTMLAction, freemind.modes.mindmapmode.MindMapController.FollowLinkAction, freemind.modes.mindmapmode.MindMapController.ForkAction, freemind.modes.mindmapmode.MindMapController.IconAction, freemind.modes.mindmapmode.MindMapController.ImportBranchAction, freemind.modes.mindmapmode.MindMapController.ImportExplorerFavoritesAction, freemind.modes.mindmapmode.MindMapController.ImportFolderStructureAction, freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchAction, freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchWithoutRootAction, freemind.modes.mindmapmode.MindMapController.JoinNodesAction, freemind.modes.mindmapmode.MindMapController.NodeColorAction, freemind.modes.mindmapmode.MindMapController.NodeGeneralAction, freemind.modes.mindmapmode.MindMapController.RemoveArrowLinkAction, freemind.modes.mindmapmode.MindMapController.SingleNodeOperation, freemind.modes.mindmapmode.MindMapEdgeModel, freemind.modes.mindmapmode.MindMapMapModel, freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager, freemind.modes.mindmapmode.MindMapMapModel.LockManager, freemind.modes.mindmapmode.MindMapMapModel.doAutomaticSave, freemind.modes.mindmapmode.MindMapMode, freemind.modes.mindmapmode.MindMapNodeModel, freemind.modes.mindmapmode.MindMapPopupMenu, freemind.modes.mindmapmode.MindMapToolBar, freemind.modes.mindmapmode.MindMapXMLElement, freemind.modes.schememode.SchemeController, freemind.modes.schememode.SchemeController.EvaluateAction, freemind.modes.schememode.SchemeEdgeModel, freemind.modes.schememode.SchemeMapModel, freemind.modes.schememode.SchemeMode, freemind.modes.schememode.SchemeNodeModel, freemind.modes.schememode.SchemePopupMenu, freemind.modes.schememode.SchemeToolBar, freemind.view.MapModule, freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.BubbleNodeView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.ConvexHull, freemind.view.mindmapview.ConvexHull.thetaComparator, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.ForkNodeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.MapView, freemind.view.mindmapview.MapView.nodesDepthComparator, freemind.view.mindmapview.MindMapLayout, freemind.view.mindmapview.MultipleImage, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.RootNodeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[]]
ITS CHILDREN:=================
	->NODE_1[[freemind.modes.browsemode.BrowsePopupMenu, freemind.modes.filemode.FilePopupMenu],[void add(Action action, String keystroke)]]
	->ITS CHILDREN:=================
	->	->NODE_2[[freemind.modes.browsemode.BrowsePopupMenu],[void BrowsePopupMenu(BrowseController c), void add(Action action, String keystroke)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[[],[ArrayList getSelectedNodesSortedByY(), ArrayList getSelectedsSortedByY(), ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), BrowseController getBrowseController(), BrowseMapModel getModel(), BrowseNodeModel getSelected(), BrowseNodeModel loadTree(URL url), BrowseToolBar getToolBar(), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), Color getBackgroundColor(), Color getColor(), Color getEdgeColor(), Color getExteriorColor(), Color getNodeColor(), Color xmlToColor(String string), Container getContentPane(), Container getViewport(), Controller getController(), Cursor getCursorByAction(int dragAction), DragGestureListener getNodeDragListener(), DropTargetListener getNodeDropListener(), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), EdgeView getEdge(), Enumeration enumerateAttributeNames(), Enumeration enumerateChildren(), Enumeration enumeratePropertyNames(), File getFile(), File getPatternsFile(), File getSemaphoreFile(File mapFile), FileFilter getFileFilter(), Font getDefaultFont(), Font getFont(), Font getFontThroughMap(Font font), Font getNodeFont(), FreeMindMain getFrame(), ID_BasicState getState(MindMapNode node), ID_Registered registerLinkTarget(MindMapNode target), ID_Registered registerLinkTarget(MindMapNode target, String proposedID), Icon getIcon(FreeMindMain frame), JLabel getLabel(), JLayeredPane getLayeredPane(), JMenu getBranchMenu(), JMenu getEdgeMenu(), JMenu getEditMenu(), JMenu getExtensionMenu(), JMenu getFileMenu(), JMenu getIconMenu(), JMenu getLeadingNodeMenu(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JMenu getNodeMenu(), JMenuItem add(JMenu menu, Action action, String keystroke), JPopupMenu getMapsPopupMenu(), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), JToolBar getToolBar(), LastOpenedList getLastOpenedList(), LinkedList getChildrenViews(), LinkedList getLeft(), LinkedList getRight(), LinkedList getSelecteds(), LinkedList getSelectedsByDepth(), LinkedList getSiblingViews(), List loadPatterns(File file), List loadPatterns(Reader reader), List stringToList(String string), ListIterator childrenFolded(), ListIterator childrenUnfolded(), ListIterator listIterator(), Map getAllModes(), Map getMapModules(), Map getModes(), MapAdapter getMap(), MapAdapter getModel(), MapAdapter newModel(), MapModule getMapModule(), MapModuleManager getMapModuleManager(), MapMouseMotionListener getMapMouseMotionListener(), MapMouseWheelListener getMapMouseWheelListener(), MapView getMap(), MapView getMapView(), MapView getView(), MenuBar getFreeMindMenuBar(), MindIcon getNodeIcon(), MindMap getModel(), MindMapArrowLink detectCollision(Point p), MindMapArrowLink getModel(), MindMapCloud getCloud(), MindMapCloud getModel(), MindMapController getMindMapController(), MindMapEdge getEdge(), MindMapEdge getModel(), MindMapLayout getMindMapLayout(), MindMapLinkRegistry getLinkRegistry(), MindMapMapModel getModel(), MindMapNode basicCopy(), MindMapNode getModel(), MindMapNode getParentNode(), MindMapNode getPreferredChild(), MindMapNode getSelected(), MindMapNode getSource(), MindMapNode getTarget(), MindMapNode getTargetForID(String ID), MindMapNode newNode(), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), MindMapNode shallowCopy(), MindMapNodeModel getSelected(), MindMapNodeModel loadTree(File file), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), MindMapToolBar getToolBar(), Mode getMode(), ModeController getModeController(), NodeAdapter createNodeAdapter(FreeMindMain frame), NodeAdapter getMapChild(), NodeAdapter getSelected(), NodeDragListener getNodeDragListener(), NodeDropListener getNodeDropListener(), NodeKeyListener getNodeKeyListener(), NodeMouseMotionListener getNodeMouseMotionListener(), NodeView getNeighbour(int directionCode), NodeView getNextPage(), NodeView getNextSibling(), NodeView getNextSiblingSingle(), NodeView getParentView(), NodeView getPreviousPage(), NodeView getPreviousSibling(), NodeView getPreviousSiblingSingle(), NodeView getRoot(), NodeView getSelected(), NodeView getSelected(int i), NodeView getViewer(), NodeView newNodeView(MindMapNode model, MapView map), Object clone(), Object getAttribute(String name), Object getAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiterals), Object getAttribute(String name, Object defaultValue), Object getFirst(), Object getObject(), Object getProperty(String name, Hashtable valueSet, String defaultKey), Object getSecond(), Object getUserObject(), Object[] getPathToRoot(TreeNode node), Point getEndInclination(), Point getInPoint(), Point getLinkPoint(), Point getOutPoint(), Point getStartInclination(), Point xmlToPoint(String string), Rectangle getBounds(), Rectangle getControlRegion(Point2D p), Rectangle getInnerBounds(NodeView source), Rectangle2D getControlPoint(Point2D p), ResourceBundle getResources(), RootNodeView getRoot(), Set getAvailableFontFamilyNames(), String BooleanToXml(boolean col), String PointToXml(Point col), String colorToXml(Color col), String expandFileName(String file), String expandPlaceholders(String message, String s1), String expandPlaceholders(String message, String s1, String s2), String expandPlaceholders(String message, String s1, String s2, String s3), String firstLetterCapitalized(String text), String generateUniqueID(String proposedID), String getAsPlainText(List mindMapNodes), String getAsRTF(List mindMapNodes), String getCode(), String getCodeClassicStyle(), String getCodeMathStyle(), String getContent(), String getContents(), String getDescription(FreeMindMain frame), String getDestinationLabel(), String getEdgeStyle(), String getEndArrow(), String getExtension(File f), String getExtension(String s), String getFindFromText(), String getFindWhat(), String getFontFamilyName(), String getFontSize(), String getFreemindDirectory(), String getFreemindVersion(), String getID(), String getIDString(MindMapNode node), String getIconFileName(), String getItemForZoom(float f), String getLabel(MindMapNode target), String getLink(), String getLink(NodeAdapter node), String getLinkByFileChooser(FileFilter fileFilter), String getName(), String getNodeStyle(), String getProgramForFile(String type), String getProperty(String key), String getProperty(String name), String getProperty(String name, String defaultValue), String getProperty(String property), String getReferenceText(), String getResourceString(String resource), String getRestoreable(), String getStartArrow(), String getStringAttribute(String name), String getStringAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiterals), String getStringAttribute(String name, String defaultValue), String getStringProperty(String name, Hashtable valueSet, String defaultKey), String getStyle(), String getTagName(), String getText(), String getText(String textId), String getWidthTitle(int width), String listToString(List list), String popLockingUserOfOldLock(), String removeExtension(String s), String save(), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), String toRelativeURL(URL base, URL target), String toString(), String toXMLEscapedText(String text), String toXMLEscapedTextWithNBSPizedSpaces(String text), String toXMLUnescapedText(String text), String transpose(String input, char findChar, String replaceString), String tryToLock(File file), String urlGetFile(URL url), String[] getZooms(), Stroke getStroke(), StylePattern getChildrenStylePattern(), Tools.BooleanHolder isLeft(), Transferable copy(), Transferable copy(ArrayList selectedNodes, String inPlainText), Transferable copy(MindMapNode node), Transferable copySingle(), Transferable cut(), Transferable cut(MindMapNode node), TreePath getPath(), URL getResource(String name), URL getResource(String resource), URL getURL(), Vector calculateHull(LinkedList coordinates), Vector doGraham(Vector p), Vector getAllIconNames(), Vector getAllLinks(MindMapNode node), Vector getAllLinksFromMe(MindMapNode source), Vector getAllLinksIntoMe(MindMapNode target), Vector getAllSources(MindMapNode target), Vector getAssignedLinksVector(ID_Registered state), Vector getAvailableFontFamilyNamesAsVector(), Vector getChildren(), Vector getCuttedNode(String oldTargetID), Vector getIcons(), XMLElement createAnotherElement(), XMLElement save(), XMLParseException expectedInput(String charSet), XMLParseException invalidValue(String name, String value), XMLParseException invalidValueSet(String name), XMLParseException syntaxError(String context), XMLParseException unexpectedEndOfData(), XMLParseException unknownEntity(String name), boolean acquirePrinterJobAndPageFormat(), boolean binOptionIsTrue(String option), boolean changeToMode(String mode), boolean checkCDATA(StringBuffer buf), boolean checkLiteral(String literal), boolean close(), boolean detectCollision(Point p), boolean dropAsSibling(double xCoord), boolean dropPosition(double xCoord), boolean executableByExtension(String file), boolean extendSelection(MouseEvent e), boolean find(LinkedList nodes, String what, boolean caseSensitive), boolean find(MindMapNode node, String what, boolean caseSensitive), boolean findNext(), boolean followLink(double xCoord), boolean getAntialiasAll(), boolean getAntialiasEdges(), boolean getAppliesToChildren(), boolean getAppliesToEdge(), boolean getAppliesToNode(), boolean getAppliesToNodeFont(), boolean getAppliesToNodeIcon(), boolean getBooleanAttribute(String name, String trueValue, String falseValue, boolean defaultValue), boolean getFolded(), boolean getIsLong(), boolean getProperty(String key, String trueValue, String falseValue, boolean defaultValue), boolean getRecursive(), boolean getValue(), boolean hasChildren(), boolean hasFoldedStrictDescendant(), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), boolean isAbsolutePath(String path), boolean isAntialiasAll(), boolean isAntialiasEdges(), boolean isApplet(), boolean isAvailableFontFamily(String fontFamilyName), boolean isBlocked(), boolean isBold(), boolean isChildOf(NodeView myNodeView), boolean isDescendantOf(MindMapNode node), boolean isDragAcceptable(DropTargetDragEvent ev), boolean isDragAcceptable(DropTargetDragEvent event), boolean isDropAcceptable(DropTargetDropEvent event), boolean isExtensionListInDescription(), boolean isFolded(), boolean isItalic(), boolean isLeft(), boolean isParentOf(NodeView myNodeView), boolean isPrinting(), boolean isReadOnly(), boolean isRoot(), boolean isSaved(), boolean isSelected(), boolean isSelected(NodeView n), boolean isSiblingOf(NodeView myNodeView), boolean isUnderlined(), boolean safeEquals(String string1, String string2), boolean save(), boolean save(File file), boolean saveAs(), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), boolean saveInternal(File file, boolean isInternal), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), boolean selectContinuous(NodeView newSelected), boolean tryToChangeToMapModule(String mapModule), boolean xmlToBoolean(String string), char readChar(), char scanWhitespace(), char scanWhitespace(StringBuffer result), double getDoubleAttribute(String name), double getDoubleAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiteralNumbers), double getDoubleAttribute(String name, double defaultValue), double getProperty(String name, double defaultValue), double getSpecialDoubleProperty(String name, Hashtable valueSet, String defaultKey), double getZoom(), double theta(Point p1, Point p2), float getZoom(), freemind.main.Tools.BooleanHolder isLeft(), int ccw(Point p0, Point p1, Point p2), int compare(Object p1, Object p2), int countChildren(), int getAlignment(), int getChildPosition(MindMapNode childNode), int getDraggedOver(), int getEdgeWidth(), int getImageCount(), int getIntAttribute(String name), int getIntAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiteralNumbers), int getIntAttribute(String name, int defaultValue), int getIntProperty(String name, Hashtable valueSet, String defaultKey), int getLeftWidthOverhead(), int getLineNr(), int getMaxNodeWidth(), int getNodeLevel(), int getNodeShift(NodeView node), int getNumberOfChangesSinceLastSave(), int getProperty(String name, int defaultValue), int getRealWidth(), int getSiblingMaxLevel(), int getSourceShift(), int getSpecialIntProperty(String name, Hashtable valueSet, String defaultKey), int getTargetShift(), int getTreeHeight(), int getValue(), int getWidth(), int getWinHeight(), int getWinState(), int getWinWidth(), int getZoomed(int number), int moveNodeTo(MindMapNode newChild, MindMapNode parent, int index, int direction), int removeLastIcon(), int removeLastIcon(MindMapNodeModel node), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), int sumOfAlreadyComputedTreeHeights(LinkedList v), java.util.logging.Logger getLogger(String forClass), void AboutAction(Controller controller), void ApplyPatternAction(StylePattern pattern), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void ArrowLinkView(MindMapArrowLink arrowLinkModel, NodeView source, NodeView target), void BackgroundAction(Controller controller, Icon icon), void BezierEdgeView(NodeView source, NodeView target), void BooleanHolder(), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseCloudModel(MindMapNode node, FreeMindMain frame), void BrowseController(Mode mode), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), void BrowseMapModel(FreeMindMain frame), void BrowseMode(), void BrowseNodeModel(FreeMindMain frame), void BrowseNodeModel(Object userObject, FreeMindMain frame), void BrowsePopupMenu(BrowseController c), void BrowseToolBar(BrowseController controller), void BrowseXMLElement(FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void BubbleAction(), void BubbleNodeView(MindMapNode model, MapView map), void CenterAction(), void ChangeArrowsInArrowLinkAction(String text, String iconPath, MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void CloseAction(Controller controller), void CloudAdapter(MindMapNode target, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void CloudColorAction(), void CloudView(MindMapCloud cloudModel, NodeView source, int iterativeLevel), void ColorArrowLinkAction(MindMapNode source, MindMapArrowLinkModel arrowLink), void ColorSwatch(), void ColorSwatch(Color color), void Controller(FreeMindMain frame), void ControllerAdapter(), void ControllerAdapter(Mode mode), void CopyAction(Object controller), void CopySingleAction(Object controller), void CutAction(Object controller), void DocumentationAction(Controller controller), void EdgeAdapter(MindMapNode target, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void EdgeColorAction(), void EdgeStyleAction(String style), void EdgeView(NodeView source, NodeView target), void EdgeWidthAction(int width), void EditAction(), void EditCopyAction(JTextComponent textComponent), void EditLongAction(), void EditPopupMenu(JTextComponent textComponent), void EvaluateAction(), void ExampleFileFilter(), void ExampleFileFilter(String extension), void ExampleFileFilter(String extension, String description), void ExampleFileFilter(String[] filters), void ExampleFileFilter(String[] filters, String description), void ExportBranchAction(), void ExportBranchToHTMLAction(MindMapController controller), void ExportToHTMLAction(MindMapController controller), void FileController(Mode mode), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void FileMapModel(File root, FreeMindMain frame), void FileMapModel(FreeMindMain frame), void FileMode(), void FileNodeModel(File file, FreeMindMain frame), void FilePopupMenu(FileController c), void FileToolBar(FileController controller), void FindAction(), void FindNextAction(), void FollowLinkAction(), void ForkAction(), void ForkNodeView(MindMapNode model, MapView map), void FreeMind(), void FreeMindApplet(), void GotoLinkNodeAction(String text, MindMapNode source), void HistoryManager(), void HistoryNextMapAction(Controller controller), void HistoryPreviousMapAction(Controller controller), void ID_RegisteredAdapter(MindMapNode target, String ID), void ID_UsedStateAdapter(), void ID_UsedStateAdapter(MindMapNode target, String ID), void IconAction(MindIcon _icon), void ImportBranchAction(), void ImportExplorerFavoritesAction(), void ImportFolderStructureAction(), void ImportLinkedBranchAction(), void ImportLinkedBranchWithoutRootAction(), void IntHolder(), void IntHolder(int value), void JoinNodesAction(), void LastOpenedList(Controller c, String restored), void LicenseAction(Controller controller), void LineAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void LinearEdgeView(NodeView source, NodeView target), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void LinkRegistryAdapter(), void MainToolBar(Controller c), void MapAdapter(FreeMindMain frame), void MapModule(MindMap model, MapView view, Mode mode), void MapModuleManager(Controller c), void MapMouseMotionListener(Controller controller), void MapMouseWheelListener(Controller controller), void MapView(MindMap model, Controller controller), void MenuBar(Controller controller), void MindIcon(String name), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapCloudModel(MindMapNode node, FreeMindMain frame), void MindMapController(Mode mode), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void MindMapLayout(MapView map), void MindMapMapModel(FreeMindMain frame), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void MindMapMode(), void MindMapNodeModel(FreeMindMain frame), void MindMapNodeModel(Object userObject, FreeMindMain frame), void MindMapNodesSelection(String nodesContent, String stringContent, String rtfContent, String dropActionContent), void MindMapPopupMenu(MindMapController c), void MindMapToolBar(MindMapController controller), void MindMapXMLElement(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void ModesCreator(Controller c), void MoveToRootAction(Controller controller), void MultipleImage(double zoom), void NavigationNextMapAction(Controller controller), void NavigationPreviousMapAction(Controller controller), void NewChildAction(), void NewChildWithoutFocusAction(), void NewMapAction(ControllerAdapter controller), void NewPreviousSiblingAction(), void NewSiblingAction(), void NodeAdapter(FreeMindMain frame), void NodeAdapter(Object userObject, FreeMindMain frame), void NodeColorAction(), void NodeDownAction(), void NodeDragListener(Controller controller), void NodeDropListener(Controller controller), void NodeGeneralAction(String textID, String iconPath, SingleNodeOperation singleNodeOperation), void NodeKeyListener(Controller controller), void NodeMouseMotionListener(Controller controller), void NodeUpAction(), void NodeView(MindMapNode model, MapView map), void ObjectHolder(), void OpenAction(ControllerAdapter modeController), void OpenFAQAction(Controller controller), void OpenPathAction(), void OptionAntialiasAction(Controller controller), void OptionHTMLExportFoldingAction(Controller controller), void OptionSelectionMechanismAction(Controller controller), void PageAction(Controller controller), void Pair(Object first, Object second), void PasteAction(Object controller), void PrintAction(Controller controller, boolean isDlg), void QuitAction(Controller controller), void RemoveAction(), void RemoveArrowLinkAction(MindMapNode source, MindMapArrowLinkModel arrowLink), void RootNodeView(MindMapNode model, MapView map), void SaveAction(ControllerAdapter modeController), void SaveAsAction(ControllerAdapter modeController), void SchemeController(Mode mode), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void SchemeMapModel(FreeMindMain frame), void SchemeMode(), void SchemeNodeModel(FreeMindMain frame), void SchemePopupMenu(SchemeController c), void SchemeToolBar(SchemeController controller), void SetImageByFileChooserAction(), void SetLinkByFileChooserAction(), void SetLinkByTextFieldAction(), void SharpBezierEdgeView(NodeView source, NodeView target), void SharpLinearEdgeView(NodeView source, NodeView target), void StylePattern(XMLElement elm, List justConstructedPatterns), void ToggleChildrenFoldedAction(), void ToggleFoldedAction(), void ToggleLeftToolbarAction(Controller controller), void ToggleMenubarAction(Controller controller), void ToggleToolbarAction(Controller controller), void XMLElement(), void XMLElement(Hashtable entities), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace, boolean fillBasicConversionTable, boolean ignoreCase), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace, boolean ignoreCase), void XMLElement(boolean skipLeadingWhitespace), void XMLElementAdapter(FreeMindMain frame), void XMLElementAdapter(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void XMLParseException(String name, String message), void XMLParseException(String name, int lineNr, String message), void ZoomInAction(Controller controller), void ZoomOutAction(Controller controller), void activate(), void add(Action action, String keystroke), void add(JMenu menu, Action action), void addChild(XMLElement child), void addDragListener(DragGestureListener dgl), void addDropListener(DropTargetListener dtl), void addExtension(String extension), void addIcon(MindIcon _icon), void addIcon(MindIcon icon), void addIcon(MindMapNodeModel node, MindIcon icon), void addImage(ImageIcon image), void addLink(MindMapNodeModel source, MindMapNodeModel target), void addNew(NodeView target, int newNodeMode, KeyEvent e), void addOptionSet(Action action, String[] textIDs, JMenu menu, String selectedTextID), void addProperty(String key, int value), void addProperty(String name, Object value), void addProperty(String name, double value), void addToMapModules(String key, MapModule value), void addToPathVector(Vector pathVector), void anotherNodeSelected(MindMapNode n), void apply(MindMapMapModel map, MindMapNodeModel node), void applyPattern(NodeAdapter node, StylePattern pattern), void applyPattern(NodeAdapter node, StylePattern pattern, boolean visible), void blendNodeColor(MindMapNodeModel node), void centerNode(NodeView node), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void changeComponentHeight(JComponent component, int difference, int minimum), void changeNode(MindMapNode node, String newText), void changeToAnotherMap(String toBeClosed), void changeToMapModule(String mapModule), void changeToMapModuleWithoutHistory(MapModule map), void changeToMapOfMode(Mode mode), void checkJavaVersion(), void clearCuttedNodeBuffer(), void clone(ID_UsedStateAdapter state), void closeEdit(), void collectColors(HashSet colors), void collectLabels(NodeView source, HashMap labels), void completeElement(), void copyMenuItems(JMenu source, JMenu dest), void createIconActions(), void createPatterns(List patternsList), void createTimer(MouseEvent e), void cutNode(MindMapNode target), void deregisterLink(MindMapLink link), void deregisterLinkTarget(MindMapNode target), void deselect(NodeView newSelected), void destroy(), void displayNode(MindMapNode node, ArrayList NodesUnfoldedByDisplay), void doAutomaticSave(MindMapMapModel model, int numberOfTempFiles, boolean filesShouldBeDeletedAfterShutdown, File pathToStore), void doubleClick(), void doubleClick(MouseEvent e), void dragScroll(DropTargetDragEvent e), void edit(KeyEvent e, boolean addNew, boolean editLong), void edit(NodeView node, NodeView prevSelected, KeyEvent firstEvent, boolean isNewNode, boolean parentFolded, boolean editLong), void editLong(NodeView node, String text, KeyEvent firstEvent), void err(String msg), void errorMessage(Object message), void errorMessage(Object message, JComponent component), void estabilishOwnFont(), void extendSelectionWithKeyMove(NodeView newlySelectedNodeView, KeyEvent e), void fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children), void getCoordinates(LinkedList inList, int additionalDistanceForConvexHull), void handleLoadingException(Exception ex), void handlePopup(MouseEvent e), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void increaseFontSize(MindMapNodeModel node, int increment), void informationMessage(Object message), void informationMessage(Object message, JComponent component), void init(Controller c), void initRoot(), void insert(), void insert(MindMapNode newNode), void insertNodeInto(MindMapNode newChild, MindMapNode parent), void insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent, boolean asSibling), void joinNodes(), void layout(), void layout(NodeView node), void load(File file), void load(String data), void load(URL url), void loadMathStyle(Reader re), void loadPattern(XMLElement pattern, List justConstructedPatterns), void loadPatterns(File file), void loadPatterns(Reader reader), void loadURL(), void loadURL(String relative), void main(String[] args), void makeTheSelected(NodeView newSelected), void mapChanged(MapModule map), void mapClosed(MapModule map), void mapModuleChanged(), void mapOpened(MapModule map), void mapOpened(boolean open), void mouseWheelMoved(MouseWheelEvent e), void move(KeyEvent e), void moveToRoot(), void newMap(), void newMap(MindMap map), void newMapModule(MindMap map), void nextMap(), void nextMapModule(), void nodeChanged(MindMapNode n), void nodeChanged(TreeNode node), void nodeStructureChanged(TreeNode node), void nodesChanged(TreeNode node, int[] childIndices), void nodesDepthComparator(), void nodesWereInserted(TreeNode node, int[] childIndices), void nodesWereRemoved(TreeNode parent, int[] childIndices, Object[] removedChildren), void obtainFocusForSelected(), void open(), void open(String restoreable), void openDocument(URL doc), void openDocument(URL location), void openDocument(URL url), void out(String msg), void paint(Graphics graphics), void paint(Graphics2D g), void paintArrow(Point p1, Point p3, Graphics2D g), void paintClouds(Graphics2D g, Graphics2D gstroke, double x0, double y0, double x1, double y1, double distanceToConvexHull), void paintClouds(NodeView source, Graphics graphics, int iterativeLevel), void paintDragOver(Graphics2D graphics, Dimension size), void paintEdges(NodeView source, Graphics2D g), void paintLinks(NodeView source, Graphics2D graphics, HashMap labels, HashSet LinkAlreadyVisited), void paintSelected(Graphics2D graphics, Dimension size), void parseCharArray(char[] input, int offset, int end), void parseCharArray(char[] input, int offset, int end, int startingLineNr), void parseFromReader(Reader reader), void parseFromReader(Reader reader, int startingLineNr), void parseString(String string), void parseString(String string, int offset), void parseString(String string, int offset, int end), void parseString(String string, int offset, int end, int startingLineNr), void paste(MindMapNode node, MindMapNode parent), void paste(Transferable t, MindMapNode parent), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void placeNode(NodeView node, int relativeX, int relativeY), void plainClick(MouseEvent e), void previousMap(), void previousMapModule(), void processUnfinishedLinks(MindMapLinkRegistry registry), void quit(), void registerLink(MindMapLink link), void releaseLock(), void releaseTimer(), void reload(TreeNode node), void remove(), void removeAttribute(String name), void removeChild(String name), void removeChild(XMLElement child), void removeNodeFromParent(MutableTreeNode node), void removeNodeFromParent(MutableTreeNode node, boolean notify), void removeProperty(String name), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), void rename(), void repaint(), void resizeMap(int outmostX), void resolveEntity(StringBuffer buf), void restore(String restorable), void restore(String restoreable), void save(Writer writer, MindMapMapModel model), void saveProperties(), void saveRTF(Writer fileout, int depth, HashMap colorTable), void saveTXT(Writer fileout, int depth), void scanElement(XMLElement elt), void scanIdentifier(StringBuffer result), void scanPCData(StringBuffer data), void scanString(StringBuffer string), void scrollBy(int x, int y), void scrollNodeToVisible(NodeView node), void scrollNodeToVisible(NodeView node, int extraWidth), void select(NodeView node), void selectAsTheOnlyOneSelected(NodeView newSelected), void selectBranch(NodeView newlySelectedNodeView, boolean extend), void selectFontName(String fontName), void selectFontSize(String fontSize), void setAllActions(boolean enabled), void setAntialiasAll(boolean antialiasAll), void setAntialiasEdges(boolean antialiasEdges), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void setAttribute(String name, Object value), void setBackgroundColor(Color backgroundColor), void setBackgroundColor(Color color), void setBlocked(boolean isBlocked), void setBold(MindMapNodeModel node), void setBold(boolean bold), void setChildrenStylePattern(StylePattern ChildrenStylePattern), void setCloud(MindMapCloud cloud), void setCloud(MindMapNodeModel node), void setCloudColor(MindMapNodeModel node, Color color), void setCloudStyle(MindMapNodeModel node, String style), void setCloudWidth(MindMapNodeModel node, int width), void setColor(Color color), void setContent(String content), void setDescription(String description), void setDestinationLabel(String destinationLabel), void setDoubleAttribute(String name, double value), void setDraggedOver(Point p), void setDraggedOver(int draggedOver), void setDropAction(String dropActionContent), void setEdge(EdgeView edge), void setEdge(MindMapEdge edge), void setEdgeColor(Color edgeColor), void setEdgeColor(MindMapNodeModel node, Color color), void setEdgeStyle(MindMapNodeModel node, String style), void setEdgeStyle(String edgeStyle), void setEdgeWidth(MindMapNodeModel node, int width), void setEdgeWidth(int edgeWidth), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setExtensionListInDescription(boolean b), void setFile(), void setFile(File file), void setFolded(MindMapNode node, boolean folded), void setFolded(boolean folded), void setFolded(boolean v), void setFont(Font font), void setFontFamily(MindMapNodeModel node, String fontFamily), void setFontFamily(String fontFamily), void setFontSize(MindMapNodeModel node, int fontSize), void setFontSize(int fontSize), void setFrame(FreeMindMain frame), void setHidden(File file, boolean hidden, boolean synchronously), void setIDs(HashMap IDToTarget, MindMapLinkRegistry registry), void setIcon(Icon _associatedIcon), void setImageByFileChooser(), void setIntAttribute(String name, int value), void setItalic(MindMapNodeModel node), void setItalic(boolean italic), void setLeft(boolean isLeft), void setLeft(boolean left), void setLeftToolbarVisible(boolean visible), void setLink(NodeAdapter node, String link), void setLink(String link), void setLinkByFileChooser(), void setLinkByTextField(), void setMap(MapView map), void setMapModule(MapModule mapModule), void setMenubarVisible(boolean visible), void setMode(Mode mode), void setModel(MindMap model), void setModel(MindMapNode model), void setMoveCursor(boolean isHand), void setName(String name), void setName(String v), void setNodeColor(Color v), void setNodeColor(MindMapNodeModel node, Color color), void setNodeFont(Font nodeFont), void setNodeFont(MindMapNodeModel node, Font font), void setNodeIcon(MindIcon nodeIcon), void setNodeStyle(MindMapNodeModel node, String style), void setNodeStyle(String nodeStyle), void setNormalFont(MindMapNodeModel node), void setObject(Object object), void setParent(MindMapNode newParent), void setPreferredChild(MindMapNode node), void setProperty(String key, String value), void setProperty(String property, String value), void setRecursive(boolean v), void setReferenceText(String referenceText), void setRendering(Graphics2D g), void setRoot(MindMapNode root), void setSaved(boolean saved), void setSiblingMaxLevel(int level), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination), void setStyle(String style), void setTagName(String name), void setTarget(MindMapNode node), void setTarget(MindMapNode target), void setText(String v), void setTitle(), void setTitle(String title), void setToolbarVisible(boolean visible), void setTreeHeight(int treeHeight), void setURL(URL v), void setURLField(String text), void setUnderlined(MindMapNodeModel node), void setUnderlined(boolean underlined), void setValue(boolean value), void setValue(int value), void setView(MapView view), void setViewer(NodeView viewer), void setWaitingCursor(boolean waiting), void setWidth(int width), void setZoom(float zoom), void setZoomByItem(Object item), void setZoomComboBox(float f), void showPopupMenu(MouseEvent e), void skipComment(), void skipSpecialTag(int bracketLevel), void splitNode(MindMapNode node, int caretPosition, String newText), void stopTimerForDelayedSelection(), void thetaComparator(Point p0), void timeDelayedSelection(Controller c, MouseEvent e), void toggleBold(), void toggleChildrenFolded(), void toggleFolded(), void toggleItalic(), void toggleSelected(NodeView newSelected), void unreadChar(char ch), void update(), void updateAll(), void updateCursor(double xCoord), void updateEditMenu(), void updateFileMenu(), void updateLastOpenedList(), void updateMapModuleName(), void updateMapsMenu(), void updateNavigationActions(), void updateRelativeYOfChildren(NodeView node), void updateSelectionMethod(Controller c), void updateTreeHeightFromChildren(NodeView node), void updateTreeHeightsAndRelativeYOfAncestors(NodeView node), void updateTreeHeightsAndRelativeYOfDescendants(NodeView node), void updateTreeHeightsAndRelativeYOfDescendantsAndAncestors(NodeView node), void updateTreeHeightsAndRelativeYOfWholeMap(), void updateZoomBar(), void write(Writer writer), void write(Writer writer, boolean withClosingTag), void writeClosingTag(Writer writer), void writeEncoded(Writer writer, String str), void writeSemaphoreFile(File inSemaphoreFile), void writeWithoutClosingTag(Writer writer), void zoomIn(), void zoomOut()]]
	->	->NODE_4[[freemind.modes.filemode.FilePopupMenu],[void FilePopupMenu(FileController c), void add(Action action, String keystroke)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_5[[freemind.modes.ControllerAdapter.ToggleChildrenFoldedAction],[void ToggleChildrenFoldedAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_6[[freemind.controller.NodeMouseMotionListener.timeDelayedSelection],[void timeDelayedSelection(Controller c, MouseEvent e)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_7[[freemind.modes.MapAdapter, freemind.modes.mindmapmode.MindMapMapModel, freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager, freemind.modes.mindmapmode.MindMapMapModel.LockManager],[String tryToLock(File file)]]
	->ITS CHILDREN:=================
	->	->NODE_8[[freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager, freemind.modes.mindmapmode.MindMapMapModel.LockManager],[String popLockingUserOfOldLock(), String tryToLock(File file), void releaseLock(), void releaseTimer()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_9[[freemind.modes.mindmapmode.MindMapMapModel.LockManager],[File getSemaphoreFile(File mapFile), String popLockingUserOfOldLock(), String tryToLock(File file), void releaseLock(), void releaseTimer(), void writeSemaphoreFile(File inSemaphoreFile)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->NODE_10[[freemind.modes.mindmapmode.MindMapMapModel],[MindMapLinkRegistry getLinkRegistry(), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), MindMapNodeModel loadTree(File file), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), String getAsPlainText(List mindMapNodes), String getAsRTF(List mindMapNodes), String getRestoreable(), String tryToLock(File file), Transferable copy(MindMapNode node), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), boolean save(File file), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), boolean saveInternal(File file, boolean isInternal), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), int removeLastIcon(MindMapNodeModel node), void MindMapMapModel(FreeMindMain frame), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void addIcon(MindMapNodeModel node, MindIcon icon), void addLink(MindMapNodeModel source, MindMapNodeModel target), void blendNodeColor(MindMapNodeModel node), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void destroy(), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void increaseFontSize(MindMapNodeModel node, int increment), void joinNodes(), void load(File file), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void setBold(MindMapNodeModel node), void setCloud(MindMapNodeModel node), void setCloudColor(MindMapNodeModel node, Color color), void setCloudStyle(MindMapNodeModel node, String style), void setCloudWidth(MindMapNodeModel node, int width), void setEdgeColor(MindMapNodeModel node, Color color), void setEdgeStyle(MindMapNodeModel node, String style), void setEdgeWidth(MindMapNodeModel node, int width), void setFontFamily(MindMapNodeModel node, String fontFamily), void setFontSize(MindMapNodeModel node, int fontSize), void setItalic(MindMapNodeModel node), void setNodeColor(MindMapNodeModel node, Color color), void setNodeFont(MindMapNodeModel node, Font font), void setNodeStyle(MindMapNodeModel node, String style), void setNormalFont(MindMapNodeModel node), void setUnderlined(MindMapNodeModel node), void splitNode(MindMapNode node, int caretPosition, String newText)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_11[[freemind.modes.MapAdapter],[BrowseNodeModel loadTree(URL url), Color getBackgroundColor(), File getFile(), FreeMindMain getFrame(), MindMapLinkRegistry getLinkRegistry(), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), MindMapNodeModel loadTree(File file), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), Object[] getPathToRoot(TreeNode node), String getAsPlainText(List mindMapNodes), String getAsRTF(List mindMapNodes), String getCode(), String getFindFromText(), String getFindWhat(), String getLink(NodeAdapter node), String getRestoreable(), String getText(String textId), String tryToLock(File file), Transferable copy(), Transferable copy(ArrayList selectedNodes, String inPlainText), Transferable copy(MindMapNode node), Transferable copySingle(), Transferable cut(), Transferable cut(MindMapNode node), URL getURL(), boolean find(LinkedList nodes, String what, boolean caseSensitive), boolean find(MindMapNode node, String what, boolean caseSensitive), boolean findNext(), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), boolean isReadOnly(), boolean isSaved(), boolean save(File file), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), boolean saveInternal(File file, boolean isInternal), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), int getNumberOfChangesSinceLastSave(), int moveNodeTo(MindMapNode newChild, MindMapNode parent, int index, int direction), int removeLastIcon(MindMapNodeModel node), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), void BrowseMapModel(FreeMindMain frame), void FileMapModel(File root, FreeMindMain frame), void FileMapModel(FreeMindMain frame), void MapAdapter(FreeMindMain frame), void MindMapMapModel(FreeMindMain frame), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void SchemeMapModel(FreeMindMain frame), void addIcon(MindMapNodeModel node, MindIcon icon), void addLink(MindMapNodeModel source, MindMapNodeModel target), void applyPattern(NodeAdapter node, StylePattern pattern), void applyPattern(NodeAdapter node, StylePattern pattern, boolean visible), void blendNodeColor(MindMapNodeModel node), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void changeNode(MindMapNode node, String newText), void destroy(), void displayNode(MindMapNode node, ArrayList NodesUnfoldedByDisplay), void fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void increaseFontSize(MindMapNodeModel node, int increment), void insertNodeInto(MindMapNode newChild, MindMapNode parent), void insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent, boolean asSibling), void joinNodes(), void load(File file), void load(URL url), void loadMathStyle(Reader re), void nodeChanged(TreeNode node), void nodeStructureChanged(TreeNode node), void nodesChanged(TreeNode node, int[] childIndices), void nodesWereInserted(TreeNode node, int[] childIndices), void nodesWereRemoved(TreeNode parent, int[] childIndices, Object[] removedChildren), void paste(MindMapNode node, MindMapNode parent), void paste(Transferable t, MindMapNode parent), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void reload(TreeNode node), void removeNodeFromParent(MutableTreeNode node), void removeNodeFromParent(MutableTreeNode node, boolean notify), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void setBackgroundColor(Color backgroundColor), void setBold(MindMapNodeModel node), void setCloud(MindMapNodeModel node), void setCloudColor(MindMapNodeModel node, Color color), void setCloudStyle(MindMapNodeModel node, String style), void setCloudWidth(MindMapNodeModel node, int width), void setEdgeColor(MindMapNodeModel node, Color color), void setEdgeStyle(MindMapNodeModel node, String style), void setEdgeWidth(MindMapNodeModel node, int width), void setFile(), void setFile(File file), void setFolded(MindMapNode node, boolean folded), void setFontFamily(MindMapNodeModel node, String fontFamily), void setFontSize(MindMapNodeModel node, int fontSize), void setItalic(MindMapNodeModel node), void setLink(NodeAdapter node, String link), void setNodeColor(MindMapNodeModel node, Color color), void setNodeFont(MindMapNodeModel node, Font font), void setNodeStyle(MindMapNodeModel node, String style), void setNormalFont(MindMapNodeModel node), void setRoot(MindMapNode root), void setSaved(boolean saved), void setURL(URL v), void setUnderlined(MindMapNodeModel node), void splitNode(MindMapNode node, int caretPosition, String newText)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_12[[freemind.modes.MindMap],[BrowseNodeModel loadTree(URL url), Color getBackgroundColor(), File getFile(), FreeMindMain getFrame(), MindMapLinkRegistry getLinkRegistry(), MindMapNode pasteStringWithoutRedisplay(String textFromClipboard, MindMapNode parent, boolean asSibling), MindMapNodeModel loadTree(File file), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target), MindMapNodeModel pasteXMLWithoutRedisplay(String pasted, MindMapNode target, boolean asSibling), Object[] getPathToRoot(TreeNode node), String getAsPlainText(List mindMapNodes), String getAsRTF(List mindMapNodes), String getCode(), String getFindFromText(), String getFindWhat(), String getLink(NodeAdapter node), String getRestoreable(), String getText(String textId), String tryToLock(File file), Transferable copy(), Transferable copy(ArrayList selectedNodes, String inPlainText), Transferable copy(MindMapNode node), Transferable copySingle(), Transferable cut(), Transferable cut(MindMapNode node), URL getURL(), boolean find(LinkedList nodes, String what, boolean caseSensitive), boolean find(MindMapNode node, String what, boolean caseSensitive), boolean findNext(), boolean importExplorerFavorites(File folder, MindMapNode target, boolean redisplay), boolean isReadOnly(), boolean isSaved(), boolean save(File file), boolean saveHTML(MindMapNodeModel rootNodeOfBranch, File file), boolean saveInternal(File file, boolean isInternal), boolean saveRTF(List mindMapNodes, BufferedWriter fileout), boolean saveTXT(MindMapNodeModel rootNodeOfBranch, File file), int getNumberOfChangesSinceLastSave(), int moveNodeTo(MindMapNode newChild, MindMapNode parent, int index, int direction), int removeLastIcon(MindMapNodeModel node), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), void BrowseMapModel(FreeMindMain frame), void FileMapModel(File root, FreeMindMain frame), void FileMapModel(FreeMindMain frame), void MapAdapter(FreeMindMain frame), void MindMapMapModel(FreeMindMain frame), void MindMapMapModel(MindMapNodeModel root, FreeMindMain frame), void SchemeMapModel(FreeMindMain frame), void addIcon(MindMapNodeModel node, MindIcon icon), void addLink(MindMapNodeModel source, MindMapNodeModel target), void applyPattern(NodeAdapter node, StylePattern pattern), void applyPattern(NodeAdapter node, StylePattern pattern, boolean visible), void blendNodeColor(MindMapNodeModel node), void changeArrowsOfArrowLink(MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow), void changeNode(MindMapNode node, String newText), void destroy(), void displayNode(MindMapNode node, ArrayList NodesUnfoldedByDisplay), void fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children), void fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children), void importFolderStructure(File folder, MindMapNode target, boolean redisplay), void increaseFontSize(MindMapNodeModel node, int increment), void insertNodeInto(MindMapNode newChild, MindMapNode parent), void insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent), void insertNodeIntoNoEvent(MindMapNode newChild, MindMapNode parent, boolean asSibling), void joinNodes(), void load(File file), void load(URL url), void loadMathStyle(Reader re), void nodeChanged(TreeNode node), void nodeStructureChanged(TreeNode node), void nodesChanged(TreeNode node, int[] childIndices), void nodesWereInserted(TreeNode node, int[] childIndices), void nodesWereRemoved(TreeNode parent, int[] childIndices, Object[] removedChildren), void paste(MindMapNode node, MindMapNode parent), void paste(Transferable t, MindMapNode parent), void paste(Transferable t, MindMapNode target, boolean asSibling, boolean isLeft), void reload(TreeNode node), void removeNodeFromParent(MutableTreeNode node), void removeNodeFromParent(MutableTreeNode node, boolean notify), void removeReference(MindMapNode source, MindMapArrowLinkModel arrowLink), void setArrowLinkColor(MindMapNode source, MindMapArrowLinkModel arrowLink, Color color), void setBackgroundColor(Color backgroundColor), void setBackgroundColor(Color color), void setBold(MindMapNodeModel node), void setCloud(MindMapNodeModel node), void setCloudColor(MindMapNodeModel node, Color color), void setCloudStyle(MindMapNodeModel node, String style), void setCloudWidth(MindMapNodeModel node, int width), void setEdgeColor(MindMapNodeModel node, Color color), void setEdgeStyle(MindMapNodeModel node, String style), void setEdgeWidth(MindMapNodeModel node, int width), void setFile(), void setFile(File file), void setFolded(MindMapNode node, boolean folded), void setFontFamily(MindMapNodeModel node, String fontFamily), void setFontSize(MindMapNodeModel node, int fontSize), void setItalic(MindMapNodeModel node), void setLink(NodeAdapter node, String link), void setNodeColor(MindMapNodeModel node, Color color), void setNodeFont(MindMapNodeModel node, Font font), void setNodeStyle(MindMapNodeModel node, String style), void setNormalFont(MindMapNodeModel node), void setRoot(MindMapNode root), void setSaved(boolean saved), void setURL(URL v), void setUnderlined(MindMapNodeModel node), void splitNode(MindMapNode node, int caretPosition, String newText)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_3[...,...]
	->NODE_13[[freemind.controller.Controller.ToggleMenubarAction],[void ToggleMenubarAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_14[[freemind.controller.Controller.ZoomOutAction],[void ZoomOutAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_15[[freemind.modes.mindmapmode.MindMapController.ApplyPatternAction],[void ApplyPatternAction(StylePattern pattern)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_16[[freemind.controller.Controller.PageAction],[void PageAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_17[[freemind.modes.schememode.SchemePopupMenu],[void SchemePopupMenu(SchemeController c)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_18[[freemind.controller.Controller, freemind.controller.MainToolBar, freemind.modes.ControllerAdapter, freemind.modes.browsemode.BrowseController, freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapToolBar],[void setAllActions(boolean enabled)]]
	->ITS CHILDREN:=================
	->	->NODE_19[[freemind.controller.MainToolBar],[String getItemForZoom(float f), void MainToolBar(Controller c), void setAllActions(boolean enabled), void setZoomByItem(Object item), void setZoomComboBox(float f), void zoomIn(), void zoomOut()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_20[[freemind.controller.Controller, freemind.modes.ControllerAdapter],[FreeMindMain getFrame(), MapModule getMapModule(), MapView getView(), MindMap getModel(), Mode getMode(), void setAllActions(boolean enabled)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_21[[freemind.modes.ControllerAdapter],[BrowseMapModel getModel(), BrowseNodeModel getSelected(), BrowseToolBar getToolBar(), Controller getController(), FileFilter getFileFilter(), FreeMindMain getFrame(), JMenu getBranchMenu(), JMenu getEdgeMenu(), JMenu getEditMenu(), JMenu getExtensionMenu(), JMenu getFileMenu(), JMenu getIconMenu(), JMenu getLeadingNodeMenu(), JMenu getNodeMenu(), JMenuItem add(JMenu menu, Action action, String keystroke), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), JToolBar getLeftToolBar(), LinkedList getSelecteds(), MapAdapter getMap(), MapAdapter getModel(), MapAdapter newModel(), MapModule getMapModule(), MapView getView(), MindMap getModel(), MindMapMapModel getModel(), MindMapNode getSelected(), MindMapNode newNode(), MindMapNodeModel getSelected(), MindMapToolBar getToolBar(), Mode getMode(), NodeAdapter getSelected(), String getLinkByFileChooser(FileFilter fileFilter), String getText(String textId), String getWidthTitle(int width), URL getResource(String name), boolean binOptionIsTrue(String option), boolean close(), boolean extendSelection(MouseEvent e), boolean isBlocked(), boolean save(), boolean save(File file), boolean saveAs(), void BrowseController(Mode mode), void ControllerAdapter(), void ControllerAdapter(Mode mode), void FileController(Mode mode), void MindMapController(Mode mode), void SchemeController(Mode mode), void add(JMenu menu, Action action), void addNew(NodeView target, int newNodeMode, KeyEvent e), void anotherNodeSelected(MindMapNode n), void changeComponentHeight(JComponent component, int difference, int minimum), void closeEdit(), void createIconActions(), void createPatterns(List patternsList), void doubleClick(), void doubleClick(MouseEvent e), void edit(KeyEvent e, boolean addNew, boolean editLong), void edit(NodeView node, NodeView prevSelected, KeyEvent firstEvent, boolean isNewNode, boolean parentFolded, boolean editLong), void editLong(NodeView node, String text, KeyEvent firstEvent), void handleLoadingException(Exception ex), void load(File file), void load(URL url), void loadPatterns(File file), void loadPatterns(Reader reader), void loadURL(), void loadURL(String relative), void mapOpened(boolean open), void mouseWheelMoved(MouseWheelEvent e), void newMap(), void newMap(MindMap map), void nodeChanged(MindMapNode n), void open(), void plainClick(MouseEvent e), void select(NodeView node), void setAllActions(boolean enabled), void setBlocked(boolean isBlocked), void setFontFamily(String fontFamily), void setFontSize(int fontSize), void setImageByFileChooser(), void setLinkByFileChooser(), void setLinkByTextField(), void setMode(Mode mode), void showPopupMenu(MouseEvent e), void toggleChildrenFolded(), void toggleFolded(), void updateMapModuleName()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->	->NODE_22[[freemind.controller.Controller],[Font getDefaultFont(), Font getFontThroughMap(Font font), FreeMindMain getFrame(), JToolBar getToolBar(), LastOpenedList getLastOpenedList(), Map getModes(), MapModule getMapModule(), MapModuleManager getMapModuleManager(), MapMouseMotionListener getMapMouseMotionListener(), MapMouseWheelListener getMapMouseWheelListener(), MapView getView(), MindMap getModel(), Mode getMode(), NodeDragListener getNodeDragListener(), NodeDropListener getNodeDropListener(), NodeKeyListener getNodeKeyListener(), NodeMouseMotionListener getNodeMouseMotionListener(), String getProperty(String property), String getResourceString(String resource), String[] getZooms(), URL getResource(String resource), boolean acquirePrinterJobAndPageFormat(), boolean changeToMode(String mode), boolean getAntialiasAll(), boolean getAntialiasEdges(), void Controller(FreeMindMain frame), void checkJavaVersion(), void errorMessage(Object message), void errorMessage(Object message, JComponent component), void informationMessage(Object message), void informationMessage(Object message, JComponent component), void moveToRoot(), void obtainFocusForSelected(), void quit(), void setAllActions(boolean enabled), void setAntialiasAll(boolean antialiasAll), void setAntialiasEdges(boolean antialiasEdges), void setFrame(FreeMindMain frame), void setLeftToolbarVisible(boolean visible), void setMenubarVisible(boolean visible), void setProperty(String property, String value), void setTitle(), void setToolbarVisible(boolean visible), void setZoom(float zoom)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->NODE_23[[freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapToolBar],[JToolBar getLeftToolBar(), void setAllActions(boolean enabled)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_24[[freemind.modes.mindmapmode.MindMapToolBar],[JToolBar getLeftToolBar(), void MindMapToolBar(MindMapController controller), void selectFontName(String fontName), void selectFontSize(String fontSize), void setAllActions(boolean enabled)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->	->NODE_25[[freemind.modes.mindmapmode.MindMapController],[FileFilter getFileFilter(), JMenu getBranchMenu(), JMenu getEdgeMenu(), JMenu getEditMenu(), JMenu getExtensionMenu(), JMenu getFileMenu(), JMenu getIconMenu(), JMenu getLeadingNodeMenu(), JMenu getNodeMenu(), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), JToolBar getLeftToolBar(), MapAdapter newModel(), MindMapMapModel getModel(), MindMapNode newNode(), MindMapNodeModel getSelected(), MindMapToolBar getToolBar(), String getWidthTitle(int width), void MindMapController(Mode mode), void anotherNodeSelected(MindMapNode n), void createIconActions(), void createPatterns(List patternsList), void loadPatterns(File file), void loadPatterns(Reader reader), void nodeChanged(MindMapNode n), void setAllActions(boolean enabled), void setFontFamily(String fontFamily), void setFontSize(int fontSize)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_21[...,...]
	->	->NODE_26[[freemind.modes.browsemode.BrowseController, freemind.modes.mindmapmode.MindMapController],[JMenu getEditMenu(), JMenu getFileMenu(), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode(), void setAllActions(boolean enabled)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_25[...,...]
	->	->	->NODE_27[[freemind.modes.browsemode.BrowseController],[BrowseMapModel getModel(), BrowseNodeModel getSelected(), BrowseToolBar getToolBar(), JMenu getEditMenu(), JMenu getFileMenu(), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode(), void BrowseController(Mode mode), void addNew(NodeView target, int newNodeMode, KeyEvent e), void doubleClick(), void edit(KeyEvent e, boolean addNew, boolean editLong), void load(URL url), void loadURL(), void loadURL(String relative), void setAllActions(boolean enabled)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_21[...,...]
	->NODE_28[[freemind.modes.ControllerAdapter.NewSiblingAction],[void NewSiblingAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_29[[freemind.modes.schememode.SchemeToolBar],[void SchemeToolBar(SchemeController controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_30[[freemind.modes.browsemode.BrowseToolBar],[void BrowseToolBar(BrowseController controller), void setURLField(String text)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_31[[freemind.modes.ControllerAdapter.CopySingleAction],[void CopySingleAction(Object controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_32[[freemind.modes.browsemode.BrowseArrowLinkModel, freemind.modes.browsemode.BrowseCloudModel, freemind.modes.browsemode.BrowseEdgeModel, freemind.modes.browsemode.BrowseNodeModel, freemind.modes.mindmapmode.MindMapArrowLinkModel, freemind.modes.mindmapmode.MindMapCloudModel, freemind.modes.mindmapmode.MindMapEdgeModel],[XMLElement save()]]
	->ITS CHILDREN:=================
	->	->NODE_33[[freemind.modes.browsemode.BrowseCloudModel],[XMLElement save(), void BrowseCloudModel(MindMapNode node, FreeMindMain frame)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_34[[freemind.modes.CloudAdapter],[Color getExteriorColor(), XMLElement save(), void BrowseCloudModel(MindMapNode node, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapCloudModel(MindMapNode node, FreeMindMain frame)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_35[[freemind.modes.LineAdapter],[Color getColor(), Color getExteriorColor(), FreeMindMain getFrame(), MindMapNode getSource(), MindMapNode getTarget(), Point getEndInclination(), Point getStartInclination(), String getDestinationLabel(), String getEndArrow(), String getReferenceText(), String getStartArrow(), String getStyle(), Stroke getStroke(), XMLElement save(), int getWidth(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseCloudModel(MindMapNode node, FreeMindMain frame), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void EdgeAdapter(MindMapNode target, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void LineAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapCloudModel(MindMapNode node, FreeMindMain frame), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), void setDestinationLabel(String destinationLabel), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setReferenceText(String referenceText), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination), void setStyle(String style), void setTarget(MindMapNode target), void setWidth(int width)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_36[[freemind.modes.MindMapLine],[Color getColor(), Color getExteriorColor(), FreeMindMain getFrame(), MindMapNode getSource(), MindMapNode getTarget(), Object clone(), Point getEndInclination(), Point getStartInclination(), String getDestinationLabel(), String getEndArrow(), String getReferenceText(), String getStartArrow(), String getStyle(), String toString(), Stroke getStroke(), XMLElement save(), int getWidth(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseCloudModel(MindMapNode node, FreeMindMain frame), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame), void CloudAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void EdgeAdapter(MindMapNode target, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void LineAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapCloudModel(MindMapNode node, FreeMindMain frame), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), void setDestinationLabel(String destinationLabel), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setReferenceText(String referenceText), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination), void setStyle(String style), void setTarget(MindMapNode node), void setTarget(MindMapNode target), void setWidth(int width)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->NODE_37[[freemind.modes.mindmapmode.MindMapArrowLinkModel],[XMLElement save(), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_38[[freemind.modes.ArrowLinkAdapter],[Point getEndInclination(), Point getStartInclination(), String getEndArrow(), String getStartArrow(), XMLElement save(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setStartArrow(String startArrow), void setStartInclination(Point startInclination)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_39[[freemind.modes.LinkAdapter],[MindMapNode getSource(), Point getEndInclination(), Point getStartInclination(), String getDestinationLabel(), String getEndArrow(), String getReferenceText(), String getStartArrow(), XMLElement save(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void setDestinationLabel(String destinationLabel), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setReferenceText(String referenceText), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_40[[freemind.modes.LineAdapter, freemind.modes.MindMapLink],[MindMapNode getSource(), MindMapNode getTarget(), Point getEndInclination(), Point getStartInclination(), String getDestinationLabel(), String getEndArrow(), String getReferenceText(), String getStartArrow(), XMLElement save(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void setDestinationLabel(String destinationLabel), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setReferenceText(String referenceText), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_35[...,...]
	->	->NODE_41[[freemind.modes.EdgeAdapter, freemind.modes.LinkAdapter],[MindMapNode getSource(), XMLElement save()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_42[[freemind.modes.EdgeAdapter],[Color getColor(), MindMapNode getSource(), String getStyle(), Stroke getStroke(), XMLElement save(), int getWidth(), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame), void EdgeAdapter(MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void FileEdgeModel(MindMapNode node, FreeMindMain frame), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void SchemeEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), void setStyle(String style), void setWidth(int width)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_35[...,...]
	->	->	->NODE_39[...,...]
	->	->NODE_43[[freemind.modes.EdgeAdapter, freemind.modes.browsemode.BrowseNodeModel],[String getStyle(), XMLElement save()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_44[[freemind.modes.browsemode.BrowseNodeModel],[String getStyle(), XMLElement save(), void BrowseNodeModel(FreeMindMain frame), void BrowseNodeModel(Object userObject, FreeMindMain frame)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_45[[freemind.modes.NodeAdapter],[Color getColor(), File getFile(), Font getFont(), FreeMindMain getFrame(), ListIterator childrenFolded(), ListIterator childrenUnfolded(), MindMapCloud getCloud(), MindMapEdge getEdge(), MindMapNode basicCopy(), MindMapNode getParentNode(), MindMapNode getPreferredChild(), MindMapNode shallowCopy(), NodeView getViewer(), String getCodeClassicStyle(), String getCodeMathStyle(), String getFontFamilyName(), String getFontSize(), String getLink(), String getStyle(), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), Tools.BooleanHolder isLeft(), TreePath getPath(), Vector getIcons(), XMLElement save(), boolean hasChildren(), boolean hasFoldedStrictDescendant(), boolean isBold(), boolean isDescendantOf(MindMapNode node), boolean isFolded(), boolean isItalic(), boolean isRoot(), boolean isUnderlined(), int getChildPosition(MindMapNode childNode), int getNodeLevel(), int removeLastIcon(), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), void BrowseNodeModel(FreeMindMain frame), void BrowseNodeModel(Object userObject, FreeMindMain frame), void FileNodeModel(File file, FreeMindMain frame), void MindMapNodeModel(FreeMindMain frame), void MindMapNodeModel(Object userObject, FreeMindMain frame), void NodeAdapter(FreeMindMain frame), void NodeAdapter(Object userObject, FreeMindMain frame), void SchemeNodeModel(FreeMindMain frame), void addIcon(MindIcon _icon), void addToPathVector(Vector pathVector), void collectColors(HashSet colors), void estabilishOwnFont(), void save(Writer writer, MindMapMapModel model), void saveRTF(Writer fileout, int depth, HashMap colorTable), void saveTXT(Writer fileout, int depth), void setBold(boolean bold), void setCloud(MindMapCloud cloud), void setColor(Color color), void setEdge(MindMapEdge edge), void setFolded(boolean folded), void setFont(Font font), void setFontSize(int fontSize), void setItalic(boolean italic), void setLeft(boolean isLeft), void setLink(String link), void setParent(MindMapNode newParent), void setPreferredChild(MindMapNode node), void setStyle(String style), void setUnderlined(boolean underlined), void setViewer(NodeView viewer), void toggleBold(), void toggleItalic()]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_46[[freemind.modes.MindMapNode],[Color getColor(), File getFile(), Font getFont(), FreeMindMain getFrame(), ListIterator childrenFolded(), ListIterator childrenUnfolded(), MindMapCloud getCloud(), MindMapEdge getEdge(), MindMapNode basicCopy(), MindMapNode getParentNode(), MindMapNode getPreferredChild(), MindMapNode shallowCopy(), NodeView getViewer(), String getCodeClassicStyle(), String getCodeMathStyle(), String getFontFamilyName(), String getFontSize(), String getLink(), String getStyle(), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), String toString(), Tools.BooleanHolder isLeft(), TreePath getPath(), Vector getIcons(), XMLElement save(), boolean hasChildren(), boolean hasFoldedStrictDescendant(), boolean isBold(), boolean isDescendantOf(MindMapNode node), boolean isFolded(), boolean isItalic(), boolean isRoot(), boolean isUnderlined(), freemind.main.Tools.BooleanHolder isLeft(), int getChildPosition(MindMapNode childNode), int getNodeLevel(), int removeLastIcon(), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), void BrowseNodeModel(FreeMindMain frame), void BrowseNodeModel(Object userObject, FreeMindMain frame), void FileNodeModel(File file, FreeMindMain frame), void MindMapNodeModel(FreeMindMain frame), void MindMapNodeModel(Object userObject, FreeMindMain frame), void NodeAdapter(FreeMindMain frame), void NodeAdapter(Object userObject, FreeMindMain frame), void SchemeNodeModel(FreeMindMain frame), void addIcon(MindIcon _icon), void addIcon(MindIcon icon), void addToPathVector(Vector pathVector), void collectColors(HashSet colors), void estabilishOwnFont(), void save(Writer writer, MindMapMapModel model), void saveRTF(Writer fileout, int depth, HashMap colorTable), void saveTXT(Writer fileout, int depth), void setBold(boolean bold), void setCloud(MindMapCloud cloud), void setColor(Color color), void setEdge(MindMapEdge edge), void setFolded(boolean folded), void setFont(Font font), void setFontSize(int fontSize), void setItalic(boolean italic), void setLeft(boolean isLeft), void setLink(String link), void setParent(MindMapNode newParent), void setPreferredChild(MindMapNode node), void setStyle(String style), void setUnderlined(boolean underlined), void setViewer(NodeView viewer), void toggleBold(), void toggleItalic()]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->NODE_47[[freemind.modes.EdgeAdapter, freemind.modes.NodeAdapter],[Color getColor(), String getStyle(), XMLElement save(), void setColor(Color color), void setStyle(String style)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_42[...,...]
	->	->	->	->NODE_48[[freemind.modes.LineAdapter, freemind.modes.NodeAdapter],[Color getColor(), FreeMindMain getFrame(), String getStyle(), XMLElement save(), void setColor(Color color), void setStyle(String style)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_45[...,...]
	->	->	->	->	->NODE_35[...,...]
	->	->	->	->	->NODE_49[[freemind.modes.MindMapLine, freemind.modes.MindMapNode],[Color getColor(), FreeMindMain getFrame(), String getStyle(), String toString(), XMLElement save(), void setColor(Color color), void setStyle(String style)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_36[...,...]
	->	->	->	->	->	->NODE_46[...,...]
	->	->NODE_50[[freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseEdgeModel, freemind.modes.mindmapmode.MindMapEdgeModel],[XMLElement save(), void setColor(Color color), void setStyle(String style)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_51[[freemind.modes.browsemode.BrowseEdgeModel],[XMLElement save(), void BrowseEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), void setStyle(String style)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_42[...,...]
	->	->	->NODE_52[[freemind.modes.mindmapmode.MindMapEdgeModel],[XMLElement save(), void MindMapEdgeModel(MindMapNode node, FreeMindMain frame), void setColor(Color color), void setStyle(String style), void setWidth(int width)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_42[...,...]
	->	->	->NODE_47[...,...]
	->	->NODE_53[[freemind.modes.mindmapmode.MindMapCloudModel],[XMLElement save(), void MindMapCloudModel(MindMapNode node, FreeMindMain frame)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_34[...,...]
	->	->NODE_54[[freemind.modes.browsemode.BrowseArrowLinkModel],[XMLElement save(), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_38[...,...]
	->NODE_55[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.MapView, freemind.view.mindmapview.NodeView],[MapView getMap()]]
	->ITS CHILDREN:=================
	->	->NODE_56[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeView],[MapView getMap(), void setRendering(Graphics2D g)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_57[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView],[Color getColor(), MapView getMap(), Stroke getStroke(), int getRealWidth(), int getWidth(), void setRendering(Graphics2D g)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_58[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView],[Color getColor(), MapView getMap(), Stroke getStroke(), double getZoom(), int getRealWidth(), int getWidth(), void paint(Graphics graphics), void setRendering(Graphics2D g)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_59[[freemind.view.mindmapview.CloudView],[Color getColor(), Color getExteriorColor(), MapView getMap(), MindMapCloud getModel(), Stroke getStroke(), double getZoom(), int getRealWidth(), int getWidth(), void CloudView(MindMapCloud cloudModel, NodeView source, int iterativeLevel), void paint(Graphics graphics), void paintClouds(Graphics2D g, Graphics2D gstroke, double x0, double y0, double x1, double y1, double distanceToConvexHull), void setRendering(Graphics2D g)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->	->	->NODE_60[[freemind.view.mindmapview.ArrowLinkView],[Color getColor(), MapView getMap(), MindMapArrowLink getModel(), Rectangle getBounds(), Rectangle2D getControlPoint(Point2D p), Stroke getStroke(), boolean detectCollision(Point p), double getZoom(), int getRealWidth(), int getWidth(), void ArrowLinkView(MindMapArrowLink arrowLinkModel, NodeView source, NodeView target), void paint(Graphics graphics), void paintArrow(Point p1, Point p3, Graphics2D g), void setRendering(Graphics2D g)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->	->NODE_61[[freemind.view.mindmapview.EdgeView],[Color getColor(), JLabel getLabel(), MapView getMap(), MindMapEdge getModel(), Stroke getStroke(), boolean isAntialiasAll(), boolean isAntialiasEdges(), int getNodeShift(NodeView node), int getRealWidth(), int getSourceShift(), int getTargetShift(), int getWidth(), void BezierEdgeView(NodeView source, NodeView target), void EdgeView(NodeView source, NodeView target), void LinearEdgeView(NodeView source, NodeView target), void SharpBezierEdgeView(NodeView source, NodeView target), void SharpLinearEdgeView(NodeView source, NodeView target), void paint(Graphics2D g), void remove(), void setRendering(Graphics2D g), void update()]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_3[...,...]
	->	->	->NODE_62[[freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeView],[MapView getMap(), void remove(), void setRendering(Graphics2D g), void update()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_61[...,...]
	->	->	->	->NODE_63[[freemind.view.mindmapview.NodeView],[EdgeView getEdge(), LinkedList getChildrenViews(), LinkedList getLeft(), LinkedList getRight(), LinkedList getSiblingViews(), MapView getMap(), MindMapNode getModel(), NodeView getNextPage(), NodeView getNextSibling(), NodeView getNextSiblingSingle(), NodeView getParentView(), NodeView getPreviousPage(), NodeView getPreviousSibling(), NodeView getPreviousSiblingSingle(), NodeView newNodeView(MindMapNode model, MapView map), Point getInPoint(), Point getLinkPoint(), Point getOutPoint(), boolean dropAsSibling(double xCoord), boolean dropPosition(double xCoord), boolean followLink(double xCoord), boolean getIsLong(), boolean isChildOf(NodeView myNodeView), boolean isLeft(), boolean isParentOf(NodeView myNodeView), boolean isRoot(), boolean isSelected(), boolean isSiblingOf(NodeView myNodeView), int getAlignment(), int getDraggedOver(), int getLeftWidthOverhead(), int getTreeHeight(), void BubbleNodeView(MindMapNode model, MapView map), void ForkNodeView(MindMapNode model, MapView map), void NodeView(MindMapNode model, MapView map), void RootNodeView(MindMapNode model, MapView map), void addDragListener(DragGestureListener dgl), void addDropListener(DropTargetListener dtl), void getCoordinates(LinkedList inList, int additionalDistanceForConvexHull), void insert(), void insert(MindMapNode newNode), void paintDragOver(Graphics2D graphics, Dimension size), void paintSelected(Graphics2D graphics, Dimension size), void remove(), void setDraggedOver(Point p), void setDraggedOver(int draggedOver), void setEdge(EdgeView edge), void setLeft(boolean left), void setMap(MapView map), void setModel(MindMapNode model), void setRendering(Graphics2D g), void setTreeHeight(int treeHeight), void update(), void updateAll(), void updateCursor(double xCoord)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_3[...,...]
	->	->NODE_64[[freemind.view.mindmapview.MapView],[ArrayList getSelectedNodesSortedByY(), ArrayList getSelectedsSortedByY(), Controller getController(), DragGestureListener getNodeDragListener(), DropTargetListener getNodeDropListener(), LinkedList getSelecteds(), LinkedList getSelectedsByDepth(), MapView getMap(), MindMap getModel(), MindMapArrowLink detectCollision(Point p), MindMapLayout getMindMapLayout(), NodeKeyListener getNodeKeyListener(), NodeMouseMotionListener getNodeMouseMotionListener(), NodeView getNeighbour(int directionCode), NodeView getRoot(), NodeView getSelected(), NodeView getSelected(int i), Rectangle getInnerBounds(NodeView source), boolean isPrinting(), boolean isSelected(NodeView n), boolean selectContinuous(NodeView newSelected), float getZoom(), int getMaxNodeWidth(), int getSiblingMaxLevel(), int getZoomed(int number), void MapView(MindMap model, Controller controller), void centerNode(NodeView node), void collectLabels(NodeView source, HashMap labels), void deselect(NodeView newSelected), void extendSelectionWithKeyMove(NodeView newlySelectedNodeView, KeyEvent e), void initRoot(), void makeTheSelected(NodeView newSelected), void move(KeyEvent e), void moveToRoot(), void paintClouds(NodeView source, Graphics graphics, int iterativeLevel), void paintEdges(NodeView source, Graphics2D g), void paintLinks(NodeView source, Graphics2D graphics, HashMap labels, HashSet LinkAlreadyVisited), void scrollBy(int x, int y), void scrollNodeToVisible(NodeView node), void scrollNodeToVisible(NodeView node, int extraWidth), void selectAsTheOnlyOneSelected(NodeView newSelected), void selectBranch(NodeView newlySelectedNodeView, boolean extend), void setMoveCursor(boolean isHand), void setSiblingMaxLevel(int level), void setZoom(float zoom), void toggleSelected(NodeView newSelected)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_65[[freemind.controller.Controller.QuitAction],[void QuitAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_66[[freemind.modes.mindmapmode.MindMapPopupMenu],[void MindMapPopupMenu(MindMapController c)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_67[[freemind.view.mindmapview.BubbleNodeView, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.RootNodeView],[Point getInPoint(), Point getOutPoint(), void paintSelected(Graphics2D graphics, Dimension size)]]
	->ITS CHILDREN:=================
	->	->NODE_68[[freemind.view.mindmapview.RootNodeView],[EdgeView getEdge(), LinkedList getLeft(), LinkedList getRight(), NodeView getNextSibling(), NodeView getParentView(), NodeView getPreviousSibling(), Point getInPoint(), Point getOutPoint(), boolean dropAsSibling(double xCoord), boolean dropPosition(double xCoord), void RootNodeView(MindMapNode model, MapView map), void insert(MindMapNode newNode), void paintDragOver(Graphics2D graphics, Dimension size), void paintSelected(Graphics2D graphics, Dimension size), void setDraggedOver(Point p), void setEdge(EdgeView edge), void setRendering(Graphics2D g)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_63[...,...]
	->	->NODE_69[[freemind.view.mindmapview.BubbleNodeView],[Point getInPoint(), Point getOutPoint(), int getAlignment(), int getLeftWidthOverhead(), void BubbleNodeView(MindMapNode model, MapView map), void paintSelected(Graphics2D graphics, Dimension size)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_63[...,...]
	->NODE_70[[freemind.modes.LinkRegistryAdapter.ID_RegisteredAdapter],[void ID_RegisteredAdapter(MindMapNode target, String ID)]]
	->ITS CHILDREN:=================
	->	->NODE_71[[freemind.modes.LinkRegistryAdapter.ID_UsedStateAdapter],[MindMapNode getTarget(), void ID_RegisteredAdapter(MindMapNode target, String ID), void ID_UsedStateAdapter(), void ID_UsedStateAdapter(MindMapNode target, String ID), void clone(ID_UsedStateAdapter state)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_72[[freemind.modes.LinkRegistryAdapter.ID_BasicStateAdapter],[MindMapNode getTarget(), String getID(), void ID_RegisteredAdapter(MindMapNode target, String ID), void ID_UsedStateAdapter(), void ID_UsedStateAdapter(MindMapNode target, String ID), void clone(ID_UsedStateAdapter state)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_73[[freemind.modes.MindMapLinkRegistry.ID_BasicState],[MindMapNode getTarget(), String getID(), String toString(), void ID_RegisteredAdapter(MindMapNode target, String ID), void ID_UsedStateAdapter(), void ID_UsedStateAdapter(MindMapNode target, String ID), void clone(ID_UsedStateAdapter state)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_3[...,...]
	->NODE_74[[freemind.controller.Controller.AboutAction],[void AboutAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_75[[freemind.main.ExampleFileFilter, freemind.main.Tools],[String getExtension(File f)]]
	->ITS CHILDREN:=================
	->	->NODE_76[[freemind.main.Tools],[Color xmlToColor(String string), List stringToList(String string), Point xmlToPoint(String string), Set getAvailableFontFamilyNames(), String BooleanToXml(boolean col), String PointToXml(Point col), String colorToXml(Color col), String expandFileName(String file), String expandPlaceholders(String message, String s1), String expandPlaceholders(String message, String s1, String s2), String expandPlaceholders(String message, String s1, String s2, String s3), String firstLetterCapitalized(String text), String getExtension(File f), String getExtension(String s), String listToString(List list), String removeExtension(String s), String toRelativeURL(URL base, URL target), String toXMLEscapedText(String text), String toXMLEscapedTextWithNBSPizedSpaces(String text), String toXMLUnescapedText(String text), String urlGetFile(URL url), Vector getAvailableFontFamilyNamesAsVector(), boolean executableByExtension(String file), boolean isAbsolutePath(String path), boolean isAvailableFontFamily(String fontFamilyName), boolean safeEquals(String string1, String string2), boolean xmlToBoolean(String string), void setHidden(File file, boolean hidden, boolean synchronously)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_77[[freemind.main.ExampleFileFilter],[String getExtension(File f), boolean isExtensionListInDescription(), void ExampleFileFilter(), void ExampleFileFilter(String extension), void ExampleFileFilter(String extension, String description), void ExampleFileFilter(String[] filters), void ExampleFileFilter(String[] filters, String description), void addExtension(String extension), void setDescription(String description), void setExtensionListInDescription(boolean b)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_78[[freemind.modes.ControllerAdapter.SaveAction],[void SaveAction(ControllerAdapter modeController)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_79[[freemind.view.mindmapview.ConvexHull.thetaComparator, freemind.view.mindmapview.MapView.nodesDepthComparator],[int compare(Object p1, Object p2)]]
	->ITS CHILDREN:=================
	->	->NODE_80[[freemind.view.mindmapview.ConvexHull.thetaComparator],[double theta(Point p1, Point p2), int compare(Object p1, Object p2), void thetaComparator(Point p0)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_81[[freemind.view.mindmapview.MapView.nodesDepthComparator],[int compare(Object p1, Object p2), void nodesDepthComparator()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_82[[freemind.modes.ControllerAdapter.NewChildAction],[void NewChildAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_83[[freemind.main.Tools.Pair],[Object getFirst(), Object getSecond(), void Pair(Object first, Object second)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_84[[freemind.modes.filemode.FileToolBar],[void FileToolBar(FileController controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_85[[freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchWithoutRootAction],[void ImportLinkedBranchWithoutRootAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_86[[freemind.main.XMLElement, freemind.modes.MindIcon, freemind.modes.XMLElementAdapter, freemind.view.MapModule],[void setName(String name)]]
	->ITS CHILDREN:=================
	->	->NODE_87[[freemind.main.XMLElement, freemind.modes.MindIcon],[String getName(), void setName(String name)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_88[[freemind.main.XMLElement],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), Enumeration enumerateAttributeNames(), Enumeration enumerateChildren(), Enumeration enumeratePropertyNames(), FreeMindMain getFrame(), NodeAdapter createNodeAdapter(FreeMindMain frame), NodeAdapter getMapChild(), Object getAttribute(String name), Object getAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiterals), Object getAttribute(String name, Object defaultValue), Object getProperty(String name, Hashtable valueSet, String defaultKey), Object getUserObject(), String getContent(), String getContents(), String getName(), String getProperty(String name), String getProperty(String name, String defaultValue), String getStringAttribute(String name), String getStringAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiterals), String getStringAttribute(String name, String defaultValue), String getStringProperty(String name, Hashtable valueSet, String defaultKey), String getTagName(), Vector getChildren(), XMLElement createAnotherElement(), XMLParseException expectedInput(String charSet), XMLParseException invalidValue(String name, String value), XMLParseException invalidValueSet(String name), XMLParseException syntaxError(String context), XMLParseException unexpectedEndOfData(), XMLParseException unknownEntity(String name), boolean checkCDATA(StringBuffer buf), boolean checkLiteral(String literal), boolean getBooleanAttribute(String name, String trueValue, String falseValue, boolean defaultValue), boolean getProperty(String key, String trueValue, String falseValue, boolean defaultValue), char readChar(), char scanWhitespace(), char scanWhitespace(StringBuffer result), double getDoubleAttribute(String name), double getDoubleAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiteralNumbers), double getDoubleAttribute(String name, double defaultValue), double getProperty(String name, double defaultValue), double getSpecialDoubleProperty(String name, Hashtable valueSet, String defaultKey), int countChildren(), int getIntAttribute(String name), int getIntAttribute(String name, Hashtable valueSet, String defaultKey, boolean allowLiteralNumbers), int getIntAttribute(String name, int defaultValue), int getIntProperty(String name, Hashtable valueSet, String defaultKey), int getLineNr(), int getProperty(String name, int defaultValue), int getSpecialIntProperty(String name, Hashtable valueSet, String defaultKey), void BrowseXMLElement(FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void MindMapXMLElement(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void XMLElement(), void XMLElement(Hashtable entities), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace, boolean fillBasicConversionTable, boolean ignoreCase), void XMLElement(Hashtable entities, boolean skipLeadingWhitespace, boolean ignoreCase), void XMLElement(boolean skipLeadingWhitespace), void XMLElementAdapter(FreeMindMain frame), void XMLElementAdapter(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void addChild(XMLElement child), void addProperty(String key, int value), void addProperty(String name, Object value), void addProperty(String name, double value), void completeElement(), void parseCharArray(char[] input, int offset, int end), void parseCharArray(char[] input, int offset, int end, int startingLineNr), void parseFromReader(Reader reader), void parseFromReader(Reader reader, int startingLineNr), void parseString(String string), void parseString(String string, int offset), void parseString(String string, int offset, int end), void parseString(String string, int offset, int end, int startingLineNr), void processUnfinishedLinks(MindMapLinkRegistry registry), void removeAttribute(String name), void removeChild(String name), void removeChild(XMLElement child), void removeProperty(String name), void resolveEntity(StringBuffer buf), void scanElement(XMLElement elt), void scanIdentifier(StringBuffer result), void scanPCData(StringBuffer data), void scanString(StringBuffer string), void setAttribute(String name, Object value), void setContent(String content), void setDoubleAttribute(String name, double value), void setIDs(HashMap IDToTarget, MindMapLinkRegistry registry), void setIntAttribute(String name, int value), void setName(String name), void setTagName(String name), void skipComment(), void skipSpecialTag(int bracketLevel), void unreadChar(char ch), void write(Writer writer), void write(Writer writer, boolean withClosingTag), void writeClosingTag(Writer writer), void writeEncoded(Writer writer, String str), void writeWithoutClosingTag(Writer writer)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->	->NODE_89[[freemind.modes.MindIcon],[Icon getIcon(FreeMindMain frame), String getDescription(FreeMindMain frame), String getIconFileName(), String getName(), Vector getAllIconNames(), void MindIcon(String name), void setIcon(Icon _associatedIcon), void setName(String name)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->NODE_90[[freemind.view.MapModule],[MapView getView(), MindMap getModel(), Mode getMode(), void MapModule(MindMap model, MapView view, Mode mode), void rename(), void setModel(MindMap model), void setName(String name), void setView(MapView view)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_91[[freemind.modes.XMLElementAdapter],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), FreeMindMain getFrame(), NodeAdapter createNodeAdapter(FreeMindMain frame), NodeAdapter getMapChild(), Object getUserObject(), XMLElement createAnotherElement(), void BrowseXMLElement(FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void MindMapXMLElement(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void XMLElementAdapter(FreeMindMain frame), void XMLElementAdapter(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget), void addChild(XMLElement child), void completeElement(), void processUnfinishedLinks(MindMapLinkRegistry registry), void setAttribute(String name, Object value), void setIDs(HashMap IDToTarget, MindMapLinkRegistry registry), void setName(String name)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_88[...,...]
	->NODE_92[[freemind.controller.Controller, freemind.modes.filemode.FileController, freemind.modes.schememode.SchemeController, freemind.view.MapModule, freemind.view.mindmapview.MapView],[MindMap getModel()]]
	->ITS CHILDREN:=================
	->	->NODE_93[[freemind.controller.Controller, freemind.view.mindmapview.MapView],[MindMap getModel(), NodeKeyListener getNodeKeyListener(), NodeMouseMotionListener getNodeMouseMotionListener(), void moveToRoot(), void setZoom(float zoom)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_22[...,...]
	->	->	->NODE_64[...,...]
	->	->NODE_94[[freemind.controller.Controller, freemind.modes.ControllerAdapter, freemind.view.MapModule],[MapView getView(), MindMap getModel(), Mode getMode()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_20[...,...]
	->	->	->NODE_90[...,...]
	->	->NODE_95[[freemind.modes.filemode.FileController, freemind.modes.schememode.SchemeController],[JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMap getModel(), MindMapNode getSelected(), MindMapNode newNode()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_96[[freemind.modes.schememode.SchemeController],[JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMap getModel(), MindMapNode getSelected(), MindMapNode newNode(), boolean saveAs(), void SchemeController(Mode mode)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_21[...,...]
	->	->	->NODE_97[[freemind.modes.filemode.FileController],[JMenu getEditMenu(), JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMap getModel(), MindMapNode getSelected(), MindMapNode newNode(), void FileController(Mode mode)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_21[...,...]
	->	->NODE_98[[freemind.modes.ControllerAdapter, freemind.view.mindmapview.MapView],[Controller getController(), LinkedList getSelecteds(), MindMap getModel()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_21[...,...]
	->	->	->NODE_64[...,...]
	->NODE_99[[freemind.modes.mindmapmode.MindMapController.NodeColorAction],[void NodeColorAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_100[[freemind.modes.LineAdapter, freemind.modes.LinkRegistryAdapter.ID_UsedStateAdapter, freemind.modes.MindMapLink, freemind.modes.MindMapLinkRegistry.ID_UsedState],[MindMapNode getTarget()]]
	->ITS CHILDREN:=================
	->	->NODE_40[...,...]
	->	->NODE_101[[freemind.modes.MindMapLine, freemind.modes.MindMapLinkRegistry.ID_BasicState],[MindMapNode getTarget(), String toString()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_73[...,...]
	->	->	->NODE_36[...,...]
	->	->NODE_71[...,...]
	->NODE_102[[freemind.modes.ControllerAdapter.SetLinkByTextFieldAction],[void SetLinkByTextFieldAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_103[[freemind.modes.ControllerAdapter.EditLongAction],[void EditLongAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_104[[freemind.modes.mindmapmode.MindMapController.IconAction],[void IconAction(MindIcon _icon)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_105[[freemind.modes.XMLElementAdapter, freemind.modes.browsemode.BrowseXMLElement, freemind.modes.mindmapmode.MindMapXMLElement],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), NodeAdapter createNodeAdapter(FreeMindMain frame), XMLElement createAnotherElement()]]
	->ITS CHILDREN:=================
	->	->NODE_106[[freemind.modes.mindmapmode.MindMapXMLElement],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), NodeAdapter createNodeAdapter(FreeMindMain frame), XMLElement createAnotherElement(), void MindMapXMLElement(FreeMindMain frame), void MindMapXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_91[...,...]
	->	->NODE_107[[freemind.modes.browsemode.BrowseXMLElement],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), NodeAdapter createNodeAdapter(FreeMindMain frame), XMLElement createAnotherElement(), void BrowseXMLElement(FreeMindMain frame), void BrowseXMLElement(FreeMindMain frame, Vector ArrowLinkAdapters, HashMap IDToTarget)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_91[...,...]
	->NODE_108[[freemind.modes.ControllerAdapter.SaveAsAction],[void SaveAsAction(ControllerAdapter modeController)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_109[[freemind.modes.mindmapmode.MindMapController.ForkAction],[void ForkAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_110[[freemind.modes.ControllerAdapter.CopyAction],[void CopyAction(Object controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_111[[freemind.controller.Controller.HistoryManager],[void HistoryManager(), void mapChanged(MapModule map), void nextMap(), void previousMap()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_112[[freemind.modes.mindmapmode.MindMapController.RemoveArrowLinkAction],[void RemoveArrowLinkAction(MindMapNode source, MindMapArrowLinkModel arrowLink)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_113[[freemind.modes.mindmapmode.MindMapController.NodeGeneralAction],[void NodeGeneralAction(String textID, String iconPath, SingleNodeOperation singleNodeOperation)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_114[[freemind.controller.Controller.MoveToRootAction],[void MoveToRootAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_115[[freemind.modes.mindmapmode.MindMapController.EdgeStyleAction],[void EdgeStyleAction(String style)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_116[[freemind.controller.Controller.OptionHTMLExportFoldingAction],[void OptionHTMLExportFoldingAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_117[[freemind.modes.MindMapLine, freemind.modes.MindMapLinkRegistry.ID_BasicState, freemind.modes.MindMapNode, freemind.modes.Mode],[String toString()]]
	->ITS CHILDREN:=================
	->	->NODE_101[...,...]
	->	->NODE_118[[freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.Mode],[FreeMindMain getFrame(), String toString()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_119[[freemind.modes.Mode],[BrowseController getBrowseController(), Controller getController(), FreeMindMain getFrame(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), MindMapController getMindMapController(), ModeController getModeController(), String toString(), void BrowseMode(), void FileMode(), void MindMapMode(), void SchemeMode(), void activate(), void init(Controller c), void restore(String restorable), void restore(String restoreable)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->	->NODE_49[...,...]
	->NODE_120[[freemind.controller.ColorSwatch, freemind.controller.Controller.BackgroundSwatch, freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.filemode.FileNodeModel, freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[Color getColor()]]
	->ITS CHILDREN:=================
	->	->NODE_121[[freemind.controller.ColorSwatch],[Color getColor(), void ColorSwatch(), void ColorSwatch(Color color)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_122[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView],[Color getColor(), Stroke getStroke(), int getWidth()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_42[...,...]
	->	->	->NODE_57[...,...]
	->	->	->NODE_123[[freemind.modes.LineAdapter, freemind.view.mindmapview.CloudView],[Color getColor(), Color getExteriorColor(), Stroke getStroke(), int getWidth()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_59[...,...]
	->	->	->	->NODE_35[...,...]
	->	->NODE_124[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.filemode.FileNodeModel],[Color getColor(), String getStyle()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_125[[freemind.modes.filemode.FileNodeModel],[Color getColor(), File getFile(), ListIterator childrenFolded(), ListIterator childrenUnfolded(), String getLink(), String getStyle(), boolean hasChildren(), void FileNodeModel(File file, FreeMindMain frame)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_45[...,...]
	->	->	->NODE_47[...,...]
	->	->NODE_126[[freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[Color getColor(), void paint(Graphics2D g), void update()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_127[[freemind.view.mindmapview.SharpBezierEdgeView],[Color getColor(), void SharpBezierEdgeView(NodeView source, NodeView target), void paint(Graphics2D g), void update()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_61[...,...]
	->	->	->NODE_128[[freemind.view.mindmapview.BezierEdgeView],[Color getColor(), void BezierEdgeView(NodeView source, NodeView target), void paint(Graphics2D g), void update()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_61[...,...]
	->	->	->NODE_129[[freemind.view.mindmapview.LinearEdgeView],[Color getColor(), void LinearEdgeView(NodeView source, NodeView target), void paint(Graphics2D g), void update()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_61[...,...]
	->	->	->NODE_130[[freemind.view.mindmapview.SharpLinearEdgeView],[Color getColor(), void SharpLinearEdgeView(NodeView source, NodeView target), void paint(Graphics2D g), void update()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_61[...,...]
	->NODE_131[[freemind.controller.LastOpenedList],[ListIterator listIterator(), String save(), void LastOpenedList(Controller c, String restored), void load(String data), void mapClosed(MapModule map), void mapOpened(MapModule map), void open(String restoreable)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_132[[freemind.modes.mindmapmode.MindMapController.ImportFolderStructureAction],[void ImportFolderStructureAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_133[[freemind.controller.Controller.BackgroundAction],[void BackgroundAction(Controller controller, Icon icon)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_134[[freemind.modes.Mode, freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapMode, freemind.modes.mindmapmode.MindMapToolBar, freemind.modes.schememode.SchemeMode],[JToolBar getLeftToolBar()]]
	->ITS CHILDREN:=================
	->	->NODE_23[...,...]
	->	->NODE_135[[freemind.modes.ControllerAdapter, freemind.modes.Mode, freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode],[Controller getController(), JToolBar getLeftToolBar()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_136[[freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode],[Controller getController(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), ModeController getModeController(), void activate(), void init(Controller c), void restore(String restoreable)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_137[[freemind.modes.mindmapmode.MindMapMode],[Controller getController(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), MindMapController getMindMapController(), ModeController getModeController(), void MindMapMode(), void activate(), void init(Controller c), void restore(String restoreable)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_119[...,...]
	->	->	->	->NODE_138[[freemind.modes.browsemode.BrowseMode],[BrowseController getBrowseController(), Controller getController(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), ModeController getModeController(), void BrowseMode(), void activate(), void init(Controller c), void restore(String restoreable)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_119[...,...]
	->	->	->	->NODE_139[[freemind.modes.schememode.SchemeMode],[Controller getController(), FreeMindMain getFrame(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), ModeController getModeController(), void SchemeMode(), void activate(), void init(Controller c), void restore(String restoreable)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_119[...,...]
	->	->	->	->NODE_140[[freemind.modes.filemode.FileMode],[Controller getController(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), ModeController getModeController(), void FileMode(), void activate(), void init(Controller c), void restore(String restoreable)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_119[...,...]
	->	->	->NODE_141[[freemind.modes.ControllerAdapter, freemind.modes.schememode.SchemeMode],[Controller getController(), FreeMindMain getFrame(), JToolBar getLeftToolBar()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_21[...,...]
	->	->	->	->NODE_139[...,...]
	->NODE_142[[freemind.controller.Controller.ToggleLeftToolbarAction],[void ToggleLeftToolbarAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_143[[freemind.modes.ControllerAdapter.FollowLinkAction, freemind.modes.browsemode.BrowseController.FollowLinkAction, freemind.modes.mindmapmode.MindMapController.FollowLinkAction],[void FollowLinkAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_144[[freemind.modes.filemode.FileController.CenterAction],[void CenterAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_145[[freemind.main.Tools.ObjectHolder],[Object getObject(), void ObjectHolder(), void setObject(Object object)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_146[[freemind.controller.NodeDropListener, freemind.modes.ControllerAdapter.FileOpener],[boolean isDropAcceptable(DropTargetDropEvent event), void dragScroll(DropTargetDragEvent e)]]
	->ITS CHILDREN:=================
	->	->NODE_147[[freemind.controller.NodeDropListener],[boolean isDragAcceptable(DropTargetDragEvent ev), boolean isDropAcceptable(DropTargetDropEvent event), void NodeDropListener(Controller controller), void dragScroll(DropTargetDragEvent e)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_148[[freemind.modes.ControllerAdapter.FileOpener],[boolean isDragAcceptable(DropTargetDragEvent event), boolean isDropAcceptable(DropTargetDropEvent event), void dragScroll(DropTargetDragEvent e)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_149[[freemind.modes.mindmapmode.MindMapController.SingleNodeOperation],[void apply(MindMapMapModel map, MindMapNodeModel node)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_150[[freemind.modes.ControllerAdapter.FindAction],[void FindAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_151[[freemind.view.mindmapview.ForkNodeView],[void ForkNodeView(MindMapNode model, MapView map)]]
	->ITS CHILDREN:=================
	->	->NODE_63[...,...]
	->NODE_152[[freemind.modes.ControllerAdapter.ToggleFoldedAction],[void ToggleFoldedAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_153[[freemind.view.mindmapview.MultipleImage],[int getImageCount(), void MultipleImage(double zoom), void addImage(ImageIcon image)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_154[[freemind.modes.filemode.FileEdgeModel],[void FileEdgeModel(MindMapNode node, FreeMindMain frame)]]
	->ITS CHILDREN:=================
	->	->NODE_42[...,...]
	->NODE_155[[freemind.modes.filemode.FileController.OpenPathAction],[void OpenPathAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_156[[freemind.modes.mindmapmode.MindMapController.ChangeArrowsInArrowLinkAction],[void ChangeArrowsInArrowLinkAction(String text, String iconPath, MindMapNode source, MindMapArrowLinkModel arrowLink, boolean hasStartArrow, boolean hasEndArrow)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_157[[freemind.modes.mindmapmode.MindMapController.ImportBranchAction],[void ImportBranchAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_158[[freemind.controller.MindMapNodesSelection],[void MindMapNodesSelection(String nodesContent, String stringContent, String rtfContent, String dropActionContent), void setDropAction(String dropActionContent)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_159[[freemind.controller.Controller.NavigationNextMapAction],[void NavigationNextMapAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_160[[freemind.controller.MapMouseMotionListener],[void MapMouseMotionListener(Controller controller), void handlePopup(MouseEvent e)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_161[[freemind.modes.mindmapmode.MindMapMapModel.doAutomaticSave],[void doAutomaticSave(MindMapMapModel model, int numberOfTempFiles, boolean filesShouldBeDeletedAfterShutdown, File pathToStore)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_162[[freemind.controller.Controller.OpenFAQAction],[void OpenFAQAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_163[[freemind.main.Tools.IntHolder],[int getValue(), void IntHolder(), void IntHolder(int value), void setValue(int value)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_164[[freemind.modes.ControllerAdapter, freemind.modes.MapAdapter, freemind.modes.ModeController, freemind.modes.browsemode.BrowseMapModel, freemind.modes.filemode.FileMapModel, freemind.modes.mindmapmode.MindMapMapModel, freemind.modes.schememode.SchemeMapModel],[boolean save(File file), void load(File file)]]
	->ITS CHILDREN:=================
	->	->NODE_165[[freemind.modes.MapAdapter, freemind.modes.browsemode.BrowseMapModel, freemind.modes.mindmapmode.MindMapMapModel],[MindMapLinkRegistry getLinkRegistry(), boolean save(File file), void load(File file)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_166[[freemind.modes.browsemode.BrowseMapModel],[BrowseNodeModel loadTree(URL url), File getFile(), MindMapLinkRegistry getLinkRegistry(), URL getURL(), boolean isSaved(), boolean save(File file), void BrowseMapModel(BrowseNodeModel root, FreeMindMain frame), void BrowseMapModel(FreeMindMain frame), void load(File file), void load(URL url), void setFile(), void setURL(URL v)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_11[...,...]
	->	->	->NODE_10[...,...]
	->	->NODE_167[[freemind.modes.MapAdapter, freemind.modes.browsemode.BrowseMapModel, freemind.modes.filemode.FileMapModel],[boolean isSaved(), boolean save(File file), void load(File file)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_166[...,...]
	->	->	->NODE_168[[freemind.modes.filemode.FileMapModel],[boolean isSaved(), boolean save(File file), void FileMapModel(File root, FreeMindMain frame), void FileMapModel(FreeMindMain frame), void changeNode(MindMapNode node, String newText), void load(File file)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_11[...,...]
	->	->NODE_169[[freemind.modes.schememode.SchemeMapModel],[String getCode(), boolean save(File file), void SchemeMapModel(FreeMindMain frame), void load(File file), void loadMathStyle(Reader re)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_11[...,...]
	->	->NODE_170[[freemind.modes.ControllerAdapter, freemind.modes.browsemode.BrowseMapModel],[boolean save(File file), void load(File file), void load(URL url)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_171[[freemind.modes.ControllerAdapter, freemind.modes.MapAdapter],[FreeMindMain getFrame(), String getText(String textId), boolean save(File file), void load(File file), void load(URL url)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_11[...,...]
	->	->	->	->NODE_21[...,...]
	->	->	->NODE_166[...,...]
	->NODE_172[[freemind.modes.ModesCreator],[Map getAllModes(), void ModesCreator(Controller c)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_173[[freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.view.mindmapview.NodeView],[boolean isRoot()]]
	->ITS CHILDREN:=================
	->	->NODE_45[...,...]
	->	->NODE_63[...,...]
	->NODE_174[[freemind.modes.ControllerAdapter.NodeDownAction],[void NodeDownAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_175[[freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.mindmapmode.MindMapController],[void setFontSize(int fontSize)]]
	->ITS CHILDREN:=================
	->	->NODE_25[...,...]
	->	->NODE_176[[freemind.modes.ControllerAdapter, freemind.modes.NodeAdapter],[FreeMindMain getFrame(), void setFontSize(int fontSize)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_45[...,...]
	->	->	->NODE_21[...,...]
	->NODE_177[[freemind.modes.mindmapmode.MindMapController.ExportBranchToHTMLAction],[void ExportBranchToHTMLAction(MindMapController controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_178[[freemind.modes.mindmapmode.MindMapController.CloudColorAction],[void CloudColorAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_179[[freemind.controller.NodeKeyListener],[void NodeKeyListener(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_180[[freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[void update()]]
	->ITS CHILDREN:=================
	->	->NODE_126[...,...]
	->	->NODE_62[...,...]
	->NODE_181[[freemind.controller.NodeMouseMotionListener],[Rectangle getControlRegion(Point2D p), void NodeMouseMotionListener(Controller controller), void createTimer(MouseEvent e), void stopTimerForDelayedSelection(), void updateSelectionMethod(Controller c)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_182[[freemind.modes.ControllerAdapter.PasteAction],[void PasteAction(Object controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_183[[freemind.modes.ControllerAdapter.SetLinkByFileChooserAction],[void SetLinkByFileChooserAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_184[[freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchAction],[void ImportLinkedBranchAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_185[[freemind.modes.mindmapmode.MindMapController.EdgeColorAction],[void EdgeColorAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_186[[freemind.modes.schememode.SchemeEdgeModel],[void SchemeEdgeModel(MindMapNode node, FreeMindMain frame)]]
	->ITS CHILDREN:=================
	->	->NODE_42[...,...]
	->NODE_187[[freemind.modes.ControllerAdapter.SetImageByFileChooserAction],[void SetImageByFileChooserAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_188[[freemind.modes.mindmapmode.MindMapController.ColorArrowLinkAction],[void ColorArrowLinkAction(MindMapNode source, MindMapArrowLinkModel arrowLink)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_189[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseNodeModel, freemind.modes.filemode.FileNodeModel, freemind.modes.mindmapmode.MindMapNodeModel],[String getStyle()]]
	->ITS CHILDREN:=================
	->	->NODE_124[...,...]
	->	->NODE_43[...,...]
	->	->NODE_190[[freemind.modes.mindmapmode.MindMapNodeModel],[MindMapNode basicCopy(), String getStyle(), String saveHTML_escapeUnicodeAndSpecialCharacters(String text), String saveRFT_escapeUnicodeAndSpecialCharacters(String text), int saveHTML(Writer fileout, String parentID, int lastChildNumber, boolean isRoot, boolean treatAsParagraph, int depth), void MindMapNodeModel(FreeMindMain frame), void MindMapNodeModel(Object userObject, FreeMindMain frame), void collectColors(HashSet colors), void save(Writer writer, MindMapMapModel model), void saveRTF(Writer fileout, int depth, HashMap colorTable), void saveTXT(Writer fileout, int depth)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_45[...,...]
	->NODE_191[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.RootNodeView],[void setRendering(Graphics2D g)]]
	->ITS CHILDREN:=================
	->	->NODE_68[...,...]
	->	->NODE_56[...,...]
	->NODE_192[[freemind.modes.ControllerAdapter.FindNextAction],[void FindNextAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_193[[freemind.modes.browsemode.BrowseController, freemind.modes.filemode.FileController, freemind.modes.mindmapmode.MindMapController, freemind.modes.schememode.SchemeController],[JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode()]]
	->ITS CHILDREN:=================
	->	->NODE_194[[freemind.modes.browsemode.BrowseController, freemind.modes.filemode.FileController, freemind.modes.mindmapmode.MindMapController],[JMenu getEditMenu(), JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_26[...,...]
	->	->	->NODE_97[...,...]
	->	->NODE_95[...,...]
	->NODE_195[[freemind.controller.Controller.NavigationPreviousMapAction],[void NavigationPreviousMapAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_196[[freemind.modes.CloudAdapter, freemind.modes.MindMapCloud, freemind.view.mindmapview.CloudView],[Color getExteriorColor()]]
	->ITS CHILDREN:=================
	->	->NODE_34[...,...]
	->	->NODE_123[...,...]
	->NODE_197[[freemind.controller.Controller.OptionSelectionMechanismAction],[void OptionSelectionMechanismAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_198[[freemind.controller.Controller, freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.modes.ControllerAdapter, freemind.view.MapModule],[MapView getView()]]
	->ITS CHILDREN:=================
	->	->NODE_199[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.view.MapModule],[MapView getView(), void setView(MapView view)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_200[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain],[Container getViewport(), Controller getController(), File getPatternsFile(), MapView getView(), MenuBar getFreeMindMenuBar(), ResourceBundle getResources(), String getFreemindDirectory(), String getFreemindVersion(), String getProperty(String key), URL getResource(String name), boolean isApplet(), int getWinHeight(), int getWinState(), int getWinWidth(), java.util.logging.Logger getLogger(String forClass), void err(String msg), void out(String msg), void saveProperties(), void setProperty(String key, String value), void setView(MapView view), void setWaitingCursor(boolean waiting)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_201[[freemind.main.FreeMindApplet],[Container getViewport(), Controller getController(), File getPatternsFile(), MapView getView(), MenuBar getFreeMindMenuBar(), ResourceBundle getResources(), String getFreemindDirectory(), String getFreemindVersion(), String getProperty(String key), URL getResource(String name), boolean isApplet(), int getMaxNodeWidth(), int getWinHeight(), int getWinState(), int getWinWidth(), java.util.logging.Logger getLogger(String forClass), void FreeMindApplet(), void err(String msg), void openDocument(URL doc), void out(String msg), void saveProperties(), void setProperty(String key, String value), void setTitle(String title), void setView(MapView view), void setWaitingCursor(boolean waiting)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_202[[freemind.main.FreeMindMain],[Container getContentPane(), Container getViewport(), Controller getController(), File getPatternsFile(), JLayeredPane getLayeredPane(), MapView getView(), MenuBar getFreeMindMenuBar(), ResourceBundle getResources(), String getFreemindDirectory(), String getFreemindVersion(), String getProgramForFile(String type), String getProperty(String key), String transpose(String input, char findChar, String replaceString), URL getResource(String name), boolean isApplet(), int getMaxNodeWidth(), int getWinHeight(), int getWinState(), int getWinWidth(), java.util.logging.Logger getLogger(String forClass), void FreeMind(), void FreeMindApplet(), void err(String msg), void main(String[] args), void openDocument(URL doc), void openDocument(URL location), void openDocument(URL url), void out(String msg), void repaint(), void saveProperties(), void setProperty(String key, String value), void setTitle(String title), void setView(MapView view), void setWaitingCursor(boolean waiting)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->	->NODE_203[[freemind.main.FreeMind],[Container getViewport(), Controller getController(), File getPatternsFile(), MapView getView(), MenuBar getFreeMindMenuBar(), ResourceBundle getResources(), String getFreemindDirectory(), String getFreemindVersion(), String getProgramForFile(String type), String getProperty(String key), String transpose(String input, char findChar, String replaceString), URL getResource(String name), boolean isApplet(), int getWinHeight(), int getWinState(), int getWinWidth(), java.util.logging.Logger getLogger(String forClass), void FreeMind(), void err(String msg), void main(String[] args), void openDocument(URL url), void out(String msg), void saveProperties(), void setProperty(String key, String value), void setView(MapView view), void setWaitingCursor(boolean waiting)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_202[...,...]
	->	->	->NODE_90[...,...]
	->	->NODE_94[...,...]
	->	->NODE_204[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.modes.ControllerAdapter],[Controller getController(), MapView getView(), URL getResource(String name)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_21[...,...]
	->	->	->NODE_200[...,...]
	->NODE_205[[freemind.modes.mindmapmode.MindMapController.JoinNodesAction],[void JoinNodesAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_206[[freemind.controller.Controller.DocumentationAction],[void DocumentationAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_207[[freemind.controller.Controller.PrintAction],[void PrintAction(Controller controller, boolean isDlg)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_208[[freemind.controller.Controller.ToggleToolbarAction],[void ToggleToolbarAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_209[[freemind.controller.MapMouseWheelListener],[void MapMouseWheelListener(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_210[[freemind.controller.Controller.HistoryNextMapAction],[void HistoryNextMapAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_211[[freemind.main.XMLElement, freemind.main.XMLParseException],[int getLineNr()]]
	->ITS CHILDREN:=================
	->	->NODE_88[...,...]
	->	->NODE_212[[freemind.main.XMLParseException],[int getLineNr(), void XMLParseException(String name, String message), void XMLParseException(String name, int lineNr, String message)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_213[[freemind.modes.ControllerAdapter.EditPopupMenu],[void EditPopupMenu(JTextComponent textComponent)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_214[[freemind.modes.mindmapmode.MindMapController.BubbleAction],[void BubbleAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_215[[freemind.modes.ControllerAdapter.NewPreviousSiblingAction],[void NewPreviousSiblingAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_216[[freemind.controller.Controller.ZoomInAction],[void ZoomInAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_217[[freemind.controller.Controller, freemind.controller.Controller.MapModuleManager, freemind.modes.ControllerAdapter],[MapModule getMapModule()]]
	->ITS CHILDREN:=================
	->	->NODE_218[[freemind.controller.Controller.MapModuleManager, freemind.modes.ControllerAdapter],[MapModule getMapModule(), boolean close(), void updateMapModuleName()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_21[...,...]
	->	->	->NODE_219[[freemind.controller.Controller.MapModuleManager],[Map getMapModules(), MapModule getMapModule(), boolean close(), boolean tryToChangeToMapModule(String mapModule), void MapModuleManager(Controller c), void addToMapModules(String key, MapModule value), void changeToAnotherMap(String toBeClosed), void changeToMapModule(String mapModule), void changeToMapModuleWithoutHistory(MapModule map), void changeToMapOfMode(Mode mode), void mapModuleChanged(), void newMapModule(MindMap map), void nextMapModule(), void previousMapModule(), void setMapModule(MapModule mapModule), void updateMapModuleName(), void updateNavigationActions(), void updateZoomBar()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_3[...,...]
	->	->NODE_20[...,...]
	->NODE_220[[freemind.modes.schememode.SchemeController.EvaluateAction],[void EvaluateAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_221[[freemind.modes.ControllerAdapter.GotoLinkNodeAction],[void GotoLinkNodeAction(String text, MindMapNode source)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_222[[freemind.view.mindmapview.ConvexHull],[Vector calculateHull(LinkedList coordinates), Vector doGraham(Vector p), int ccw(Point p0, Point p1, Point p2)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_223[[freemind.modes.mindmapmode.MindMapController.ImportExplorerFavoritesAction],[void ImportExplorerFavoritesAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_224[[freemind.modes.ControllerAdapter.CutAction],[void CutAction(Object controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_225[[freemind.modes.ControllerAdapter.OpenAction],[void OpenAction(ControllerAdapter modeController)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_226[[freemind.modes.ControllerAdapter.NewMapAction],[void NewMapAction(ControllerAdapter controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_227[[freemind.controller.NodeDragListener],[Cursor getCursorByAction(int dragAction), void NodeDragListener(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_228[[freemind.controller.Controller.HistoryPreviousMapAction],[void HistoryPreviousMapAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_229[[freemind.modes.mindmapmode.MindMapController.ExportBranchAction],[void ExportBranchAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_230[[freemind.controller.Controller.OptionAntialiasAction],[void OptionAntialiasAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_231[[freemind.modes.browsemode.BrowseController, freemind.modes.browsemode.BrowseMapModel],[void load(URL url)]]
	->ITS CHILDREN:=================
	->	->NODE_27[...,...]
	->	->NODE_170[...,...]
	->NODE_232[[freemind.controller.Controller.LicenseAction],[void LicenseAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_233[[freemind.main.Tools.BooleanHolder],[boolean getValue(), void BooleanHolder(), void setValue(boolean value)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_234[[freemind.modes.mindmapmode.MindMapController.ExportToHTMLAction],[void ExportToHTMLAction(MindMapController controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_235[[freemind.modes.ControllerAdapter.NodeUpAction],[void NodeUpAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_236[[freemind.modes.ControllerAdapter.EditCopyAction],[void EditCopyAction(JTextComponent textComponent)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_237[[freemind.controller.Controller, freemind.modes.ControllerAdapter, freemind.modes.LineAdapter, freemind.modes.MapAdapter, freemind.modes.NodeAdapter, freemind.modes.XMLElementAdapter, freemind.modes.schememode.SchemeMode, freemind.view.mindmapview.MindMapLayout],[FreeMindMain getFrame()]]
	->ITS CHILDREN:=================
	->	->NODE_171[...,...]
	->	->NODE_20[...,...]
	->	->NODE_48[...,...]
	->	->NODE_141[...,...]
	->	->NODE_238[[freemind.modes.MapAdapter, freemind.modes.NodeAdapter],[File getFile(), FreeMindMain getFrame()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_11[...,...]
	->	->	->NODE_45[...,...]
	->	->NODE_176[...,...]
	->	->NODE_118[...,...]
	->	->NODE_239[[freemind.view.mindmapview.MindMapLayout],[FreeMindMain getFrame(), MapView getMapView(), RootNodeView getRoot(), int sumOfAlreadyComputedTreeHeights(LinkedList v), void MindMapLayout(MapView map), void layout(), void layout(NodeView node), void placeNode(NodeView node, int relativeX, int relativeY), void resizeMap(int outmostX), void updateRelativeYOfChildren(NodeView node), void updateTreeHeightFromChildren(NodeView node), void updateTreeHeightsAndRelativeYOfAncestors(NodeView node), void updateTreeHeightsAndRelativeYOfDescendants(NodeView node), void updateTreeHeightsAndRelativeYOfDescendantsAndAncestors(NodeView node), void updateTreeHeightsAndRelativeYOfWholeMap()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->	->NODE_91[...,...]
	->NODE_240[[freemind.modes.mindmapmode.MindMapController.EdgeWidthAction],[void EdgeWidthAction(int width)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_241[[freemind.modes.ControllerAdapter.NewChildWithoutFocusAction],[void NewChildWithoutFocusAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_242[[freemind.modes.ControllerAdapter.EditAction],[void EditAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_243[[freemind.controller.Controller.CloseAction],[void CloseAction(Controller controller)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_244[[freemind.controller.MenuBar],[JPopupMenu getMapsPopupMenu(), void MenuBar(Controller controller), void addOptionSet(Action action, String[] textIDs, JMenu menu, String selectedTextID), void copyMenuItems(JMenu source, JMenu dest), void updateEditMenu(), void updateFileMenu(), void updateLastOpenedList(), void updateMapsMenu()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_245[[freemind.main.XMLElement, freemind.modes.MindIcon, freemind.modes.StylePattern],[String getName()]]
	->ITS CHILDREN:=================
	->	->NODE_87[...,...]
	->	->NODE_246[[freemind.modes.StylePattern],[Color getEdgeColor(), Color getNodeColor(), Font getNodeFont(), List loadPatterns(File file), List loadPatterns(Reader reader), MindIcon getNodeIcon(), String getEdgeStyle(), String getName(), String getNodeStyle(), String getText(), StylePattern getChildrenStylePattern(), boolean getAppliesToChildren(), boolean getAppliesToEdge(), boolean getAppliesToNode(), boolean getAppliesToNodeFont(), boolean getAppliesToNodeIcon(), boolean getFolded(), boolean getRecursive(), int getEdgeWidth(), void StylePattern(XMLElement elm, List justConstructedPatterns), void loadPattern(XMLElement pattern, List justConstructedPatterns), void setChildrenStylePattern(StylePattern ChildrenStylePattern), void setEdgeColor(Color edgeColor), void setEdgeStyle(String edgeStyle), void setEdgeWidth(int edgeWidth), void setFolded(boolean v), void setName(String v), void setNodeColor(Color v), void setNodeFont(Font nodeFont), void setNodeIcon(MindIcon nodeIcon), void setNodeStyle(String nodeStyle), void setRecursive(boolean v), void setText(String v)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[...,...]
	->NODE_247[[freemind.modes.LinkRegistryAdapter],[ID_BasicState getState(MindMapNode node), ID_Registered registerLinkTarget(MindMapNode target), ID_Registered registerLinkTarget(MindMapNode target, String proposedID), MindMapNode getTargetForID(String ID), String generateUniqueID(String proposedID), String getIDString(MindMapNode node), String getLabel(MindMapNode target), Vector getAllLinks(MindMapNode node), Vector getAllLinksFromMe(MindMapNode source), Vector getAllLinksIntoMe(MindMapNode target), Vector getAllSources(MindMapNode target), Vector getAssignedLinksVector(ID_Registered state), Vector getCuttedNode(String oldTargetID), void LinkRegistryAdapter(), void clearCuttedNodeBuffer(), void cutNode(MindMapNode target), void deregisterLink(MindMapLink link), void deregisterLinkTarget(MindMapNode target), void registerLink(MindMapLink link)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_248[[freemind.modes.schememode.SchemeNodeModel],[String getCodeClassicStyle(), String getCodeMathStyle(), void SchemeNodeModel(FreeMindMain frame)]]
	->ITS CHILDREN:=================
	->	->NODE_45[...,...]
	->NODE_249[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.browsemode.BrowseMapModel, freemind.modes.filemode.FileNodeModel],[File getFile()]]
	->ITS CHILDREN:=================
	->	->NODE_166[...,...]
	->	->NODE_125[...,...]
	->	->NODE_238[...,...]
	->NODE_250[[freemind.modes.ControllerAdapter.RemoveAction],[void RemoveAction()]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_251[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.modes.ControllerAdapter, freemind.modes.Mode, freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode, freemind.view.mindmapview.MapView],[Controller getController()]]
	->ITS CHILDREN:=================
	->	->NODE_252[[freemind.main.FreeMindApplet, freemind.view.mindmapview.MapView],[Controller getController(), int getMaxNodeWidth()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_201[...,...]
	->	->	->NODE_64[...,...]
	->	->NODE_135[...,...]
	->	->NODE_204[...,...]
	->	->NODE_98[...,...]
Done printing lattice!
Printing candidate nodes
	->NODE_0[[freemind.modes.browsemode.BrowsePopupMenu, freemind.modes.filemode.FilePopupMenu],[void add(Action action, String keystroke)]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_1[[freemind.modes.MapAdapter, freemind.modes.mindmapmode.MindMapMapModel, freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager, freemind.modes.mindmapmode.MindMapMapModel.LockManager],[String tryToLock(File file)]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.MapAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.016393442 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.09090909 ]; RELATED TYPES: [freemind.modes.mindmapmode.MindMapMapModel] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.mindmapmode.MindMapMapModel.LockManager]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.16666667 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.25 ]; RELATED TYPES: [freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.mindmapmode.MindMapMapModel.LockManager]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.16666667 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.mindmapmode.MindMapMapModel]
	  	->NODE_2[[freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager, freemind.modes.mindmapmode.MindMapMapModel.LockManager],[String popLockingUserOfOldLock(), String tryToLock(File file), void releaseLock(), void releaseTimer()]]
	  	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.mindmapmode.MindMapMapModel.LockManager]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.6666667 ]##
	->NODE_3[[freemind.controller.Controller, freemind.controller.MainToolBar, freemind.modes.ControllerAdapter, freemind.modes.browsemode.BrowseController, freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapToolBar],[void setAllActions(boolean enabled)]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.ControllerAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.01754386 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.25 ]; RELATED TYPES: [freemind.modes.browsemode.BrowseController, freemind.modes.mindmapmode.MindMapController] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.mindmapmode.MindMapController]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.035714287 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.5 ]; RELATED TYPES: [freemind.modes.mindmapmode.MindMapToolBar] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.mindmapmode.MindMapToolBar]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.2 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.5 ]; RELATED TYPES: [freemind.modes.mindmapmode.MindMapController] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.controller.Controller]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.022727273 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.controller.MainToolBar]
	  	->NODE_4[[freemind.controller.Controller, freemind.modes.ControllerAdapter],[FreeMindMain getFrame(), MapModule getMapModule(), MapView getView(), MindMap getModel(), Mode getMode(), void setAllActions(boolean enabled)]]
	  	  FEATURE TYPE:  ## ADHOC
	  	->NODE_5[[freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapToolBar],[JToolBar getLeftToolBar(), void setAllActions(boolean enabled)]]
	  	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.mindmapmode.MindMapToolBar]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.4 ]##FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.mindmapmode.MindMapController]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.071428575 ]##
	  	->NODE_6[[freemind.modes.browsemode.BrowseController, freemind.modes.mindmapmode.MindMapController],[JMenu getEditMenu(), JMenu getFileMenu(), JPopupMenu getPopupForModel(java.lang.Object obj), JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode(), void setAllActions(boolean enabled)]]
	  	  FEATURE TYPE:  ## ADHOC
	->NODE_7[[freemind.modes.browsemode.BrowseArrowLinkModel, freemind.modes.browsemode.BrowseCloudModel, freemind.modes.browsemode.BrowseEdgeModel, freemind.modes.browsemode.BrowseNodeModel, freemind.modes.mindmapmode.MindMapArrowLinkModel, freemind.modes.mindmapmode.MindMapCloudModel, freemind.modes.mindmapmode.MindMapEdgeModel],[XMLElement save()]]
	  FEATURE TYPE:  ## ADHOC
	  	->	->	->	->NODE_8[[freemind.modes.LineAdapter, freemind.modes.MindMapLink],[MindMapNode getSource(), MindMapNode getTarget(), Point getEndInclination(), Point getStartInclination(), String getDestinationLabel(), String getEndArrow(), String getReferenceText(), String getStartArrow(), XMLElement save(), void ArrowLinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void BrowseArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame), void LinkAdapter(MindMapNode source, MindMapNode target, FreeMindMain frame, String standardColorPropertyString, String standardStylePropertyString), void MindMapArrowLinkModel(MindMapNode source, MindMapNode target, FreeMindMain frame), void setDestinationLabel(String destinationLabel), void setEndArrow(String endArrow), void setEndInclination(Point endInclination), void setReferenceText(String referenceText), void setSource(MindMapNode source), void setStartArrow(String startArrow), void setStartInclination(Point startInclination)]]
	  	  	  	  	  FEATURE TYPE:  ## ADHOC
	  	->NODE_9[[freemind.modes.EdgeAdapter, freemind.modes.LinkAdapter],[MindMapNode getSource(), XMLElement save()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	->	->	->	->NODE_10[[freemind.modes.MindMapLine, freemind.modes.MindMapNode],[Color getColor(), FreeMindMain getFrame(), String getStyle(), String toString(), XMLElement save(), void setColor(Color color), void setStyle(String style)]]
	  	  	  	  	  FEATURE TYPE:  ## ADHOC
	  	->NODE_11[[freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseEdgeModel, freemind.modes.mindmapmode.MindMapEdgeModel],[XMLElement save(), void setColor(Color color), void setStyle(String style)]]
	  	  FEATURE TYPE:  ## ADHOC
	->NODE_12[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.MapView, freemind.view.mindmapview.NodeView],[MapView getMap()]]
	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.NodeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.02 ]## ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.EdgeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.05882353 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.25 ]; RELATED TYPES: [freemind.view.mindmapview.NodeView] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.MapView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.02173913 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.view.mindmapview.NodeView]
	  	->NODE_13[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeView],[MapView getMap(), void setRendering(Graphics2D g)]]
	  	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.NodeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.04 ]## ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.EdgeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.11764706 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.5 ]; RELATED TYPES: [freemind.view.mindmapview.NodeView]
	  	  	->NODE_14[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView],[Color getColor(), MapView getMap(), Stroke getStroke(), int getRealWidth(), int getWidth(), void setRendering(Graphics2D g)]]
	  	  	  FEATURE TYPE:  ## ADHOC
	  	  	  	->NODE_15[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView],[Color getColor(), MapView getMap(), Stroke getStroke(), double getZoom(), int getRealWidth(), int getWidth(), void paint(Graphics graphics), void setRendering(Graphics2D g)]]
	  	  	  	  FEATURE TYPE:  ## ADHOC
	  	  	->NODE_16[[freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeView],[MapView getMap(), void remove(), void setRendering(Graphics2D g), void update()]]
	  	  	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.NodeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.08 ]##FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.EdgeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.23529412 ]##
	->NODE_17[[freemind.view.mindmapview.BubbleNodeView, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.RootNodeView],[Point getInPoint(), Point getOutPoint(), void paintSelected(Graphics2D graphics, Dimension size)]]
	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.view.mindmapview.NodeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.06 ]##
	->NODE_18[[freemind.main.ExampleFileFilter, freemind.main.Tools],[String getExtension(File f)]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_19[[freemind.view.mindmapview.ConvexHull.thetaComparator, freemind.view.mindmapview.MapView.nodesDepthComparator],[int compare(Object p1, Object p2)]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_20[[freemind.main.XMLElement, freemind.modes.MindIcon, freemind.modes.XMLElementAdapter, freemind.view.MapModule],[void setName(String name)]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.main.XMLElement]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.011363637 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.16666667 ]; RELATED TYPES: [freemind.modes.XMLElementAdapter]
	  	->NODE_21[[freemind.main.XMLElement, freemind.modes.MindIcon],[String getName(), void setName(String name)]]
	  	  FEATURE TYPE:  ## ADHOC
	->NODE_22[[freemind.controller.Controller, freemind.modes.filemode.FileController, freemind.modes.schememode.SchemeController, freemind.view.MapModule, freemind.view.mindmapview.MapView],[MindMap getModel()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.controller.Controller]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.022727273 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.2 ]; RELATED TYPES: [freemind.view.mindmapview.MapView] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.MapView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.02173913 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.view.MapModule]
	  	->NODE_23[[freemind.controller.Controller, freemind.view.mindmapview.MapView],[MindMap getModel(), NodeKeyListener getNodeKeyListener(), NodeMouseMotionListener getNodeMouseMotionListener(), void moveToRoot(), void setZoom(float zoom)]]
	  	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.controller.Controller]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.11363637 ]##
	  	->NODE_24[[freemind.controller.Controller, freemind.modes.ControllerAdapter, freemind.view.MapModule],[MapView getView(), MindMap getModel(), Mode getMode()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	  	->NODE_4[...,...]
	  	->NODE_25[[freemind.modes.filemode.FileController, freemind.modes.schememode.SchemeController],[JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMap getModel(), MindMapNode getSelected(), MindMapNode newNode()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	->NODE_26[[freemind.modes.ControllerAdapter, freemind.view.mindmapview.MapView],[Controller getController(), LinkedList getSelecteds(), MindMap getModel()]]
	  	  FEATURE TYPE:  ## ADHOC
	->NODE_27[[freemind.modes.LineAdapter, freemind.modes.LinkRegistryAdapter.ID_UsedStateAdapter, freemind.modes.MindMapLink, freemind.modes.MindMapLinkRegistry.ID_UsedState],[MindMapNode getTarget()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapLinkRegistry.ID_UsedState]; ANCHOR TYPE BEHAVIOR COVERAGE: [1.0 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.LinkRegistryAdapter.ID_UsedStateAdapter]
	  	->NODE_8[...,...]
	  	->NODE_28[[freemind.modes.MindMapLine, freemind.modes.MindMapLinkRegistry.ID_BasicState],[MindMapNode getTarget(), String toString()]]
	  	  FEATURE TYPE:  ## ADHOC
	->NODE_29[[freemind.modes.XMLElementAdapter, freemind.modes.browsemode.BrowseXMLElement, freemind.modes.mindmapmode.MindMapXMLElement],[ArrowLinkAdapter createArrowLinkAdapter(NodeAdapter source, NodeAdapter target, FreeMindMain frame), CloudAdapter createCloudAdapter(NodeAdapter node, FreeMindMain frame), EdgeAdapter createEdgeAdapter(NodeAdapter node, FreeMindMain frame), NodeAdapter createNodeAdapter(FreeMindMain frame), XMLElement createAnotherElement()]]
	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.XMLElementAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.3125 ]##
	->NODE_30[[freemind.modes.MindMapLine, freemind.modes.MindMapLinkRegistry.ID_BasicState, freemind.modes.MindMapNode, freemind.modes.Mode],[String toString()]]
	  FEATURE TYPE:  ## ADHOC
	  	->NODE_28[...,...]
	  	->NODE_31[[freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.Mode],[FreeMindMain getFrame(), String toString()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	  	->NODE_10[...,...]
	->NODE_32[[freemind.controller.ColorSwatch, freemind.controller.Controller.BackgroundSwatch, freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.filemode.FileNodeModel, freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[Color getColor()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapLine]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.14285715 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.25 ]; RELATED TYPES: [freemind.modes.EdgeAdapter, freemind.modes.LineAdapter] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapNode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.027027028 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.16666667 ]; RELATED TYPES: [freemind.modes.NodeAdapter, freemind.modes.filemode.FileNodeModel] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.NodeAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.01923077 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.16666667 ]; RELATED TYPES: [freemind.modes.filemode.FileNodeModel] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.view.mindmapview.EdgeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.05882353 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.33333334 ]; RELATED TYPES: [freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.controller.ColorSwatch]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.33333334 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.controller.Controller.BackgroundSwatch] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.LineAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.09090909 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.14285715 ]; RELATED TYPES: [freemind.modes.EdgeAdapter] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.MindMapNode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.027027028 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.33333334 ]; RELATED TYPES: [freemind.modes.LineAdapter, freemind.modes.NodeAdapter]
	  	->NODE_33[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView],[Color getColor(), Stroke getStroke(), int getWidth()]]
	  	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapLine]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.42857143 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.75 ]; RELATED TYPES: [freemind.modes.EdgeAdapter, freemind.modes.LineAdapter] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.LineAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.27272728 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.42857143 ]; RELATED TYPES: [freemind.modes.EdgeAdapter]
	  	  	->NODE_14[...,...]
	  	  	->NODE_34[[freemind.modes.LineAdapter, freemind.view.mindmapview.CloudView],[Color getColor(), Color getExteriorColor(), Stroke getStroke(), int getWidth()]]
	  	  	  FEATURE TYPE:  ## ADHOC
	  	->NODE_35[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.filemode.FileNodeModel],[Color getColor(), String getStyle()]]
	  	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapLine]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.2857143 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.5 ]; RELATED TYPES: [freemind.modes.EdgeAdapter, freemind.modes.LineAdapter] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapNode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.054054055 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.33333334 ]; RELATED TYPES: [freemind.modes.NodeAdapter, freemind.modes.filemode.FileNodeModel] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.NodeAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.03846154 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.33333334 ]; RELATED TYPES: [freemind.modes.filemode.FileNodeModel] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.LineAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.18181819 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.2857143 ]; RELATED TYPES: [freemind.modes.EdgeAdapter] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.MindMapNode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.054054055 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.6666667 ]; RELATED TYPES: [freemind.modes.LineAdapter, freemind.modes.NodeAdapter]
	  	->NODE_36[[freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[Color getColor(), void paint(Graphics2D g), void update()]]
	  	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.view.mindmapview.EdgeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.1764706 ]##
	->NODE_37[[freemind.modes.Mode, freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapController, freemind.modes.mindmapmode.MindMapMode, freemind.modes.mindmapmode.MindMapToolBar, freemind.modes.schememode.SchemeMode],[JToolBar getLeftToolBar()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.Mode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.1 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.125 ]; RELATED TYPES: [freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.mindmapmode.MindMapController]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.035714287 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.mindmapmode.MindMapMode, freemind.modes.mindmapmode.MindMapToolBar] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.mindmapmode.MindMapToolBar]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.2 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.5 ]; RELATED TYPES: [freemind.modes.mindmapmode.MindMapController]
	  	->NODE_5[...,...]
	  	->NODE_38[[freemind.modes.ControllerAdapter, freemind.modes.Mode, freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode],[Controller getController(), JToolBar getLeftToolBar()]]
	  	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.Mode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.2 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.25 ]; RELATED TYPES: [freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.Mode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.2 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.ControllerAdapter]
	  	  	->NODE_39[[freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode],[Controller getController(), JMenu getModeEditMenu(), JMenu getModeFileMenu(), JToolBar getLeftToolBar(), JToolBar getModeToolBar(), ModeController getModeController(), void activate(), void init(Controller c), void restore(String restoreable)]]
	  	  	  FEATURE TYPE:  ## ADHOC
	  	  	->NODE_40[[freemind.modes.ControllerAdapter, freemind.modes.schememode.SchemeMode],[Controller getController(), FreeMindMain getFrame(), JToolBar getLeftToolBar()]]
	  	  	  FEATURE TYPE:  ## ADHOC
	->NODE_41[[freemind.modes.ControllerAdapter.FollowLinkAction, freemind.modes.browsemode.BrowseController.FollowLinkAction, freemind.modes.mindmapmode.MindMapController.FollowLinkAction],[void FollowLinkAction()]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_42[[freemind.controller.NodeDropListener, freemind.modes.ControllerAdapter.FileOpener],[boolean isDropAcceptable(DropTargetDropEvent event), void dragScroll(DropTargetDragEvent e)]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_43[[freemind.modes.ControllerAdapter, freemind.modes.MapAdapter, freemind.modes.ModeController, freemind.modes.browsemode.BrowseMapModel, freemind.modes.filemode.FileMapModel, freemind.modes.mindmapmode.MindMapMapModel, freemind.modes.schememode.SchemeMapModel],[boolean save(File file), void load(File file)]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.ModeController]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.1 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.1 ]; RELATED TYPES: [freemind.modes.ControllerAdapter] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.MapAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.032786883 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.browsemode.BrowseMapModel, freemind.modes.filemode.FileMapModel, freemind.modes.mindmapmode.MindMapMapModel, freemind.modes.schememode.SchemeMapModel]
	  	->NODE_44[[freemind.modes.MapAdapter, freemind.modes.browsemode.BrowseMapModel, freemind.modes.mindmapmode.MindMapMapModel],[MindMapLinkRegistry getLinkRegistry(), boolean save(File file), void load(File file)]]
	  	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.MapAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.04918033 ]##
	  	->NODE_45[[freemind.modes.MapAdapter, freemind.modes.browsemode.BrowseMapModel, freemind.modes.filemode.FileMapModel],[boolean isSaved(), boolean save(File file), void load(File file)]]
	  	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.MapAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.04918033 ]##
	  	->	->NODE_46[[freemind.modes.ControllerAdapter, freemind.modes.MapAdapter],[FreeMindMain getFrame(), String getText(String textId), boolean save(File file), void load(File file), void load(URL url)]]
	  	  	  FEATURE TYPE:  ## ADHOC
	->NODE_47[[freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.view.mindmapview.NodeView],[boolean isRoot()]]
	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.MindMapNode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.027027028 ]## ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapNode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.027027028 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.029411765 ]; RELATED TYPES: [freemind.modes.NodeAdapter] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.NodeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.02 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.NodeAdapter]
	->NODE_48[[freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.mindmapmode.MindMapController],[void setFontSize(int fontSize)]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapNode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.027027028 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.029411765 ]; RELATED TYPES: [freemind.modes.NodeAdapter] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.MindMapNode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.027027028 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.029411765 ]; RELATED TYPES: [freemind.modes.NodeAdapter]
	  	->NODE_49[[freemind.modes.ControllerAdapter, freemind.modes.NodeAdapter],[FreeMindMain getFrame(), void setFontSize(int fontSize)]]
	  	  FEATURE TYPE:  ## ADHOC
	->NODE_50[[freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView],[void update()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.view.mindmapview.EdgeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.05882353 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.33333334 ]; RELATED TYPES: [freemind.view.mindmapview.BezierEdgeView, freemind.view.mindmapview.LinearEdgeView, freemind.view.mindmapview.SharpBezierEdgeView, freemind.view.mindmapview.SharpLinearEdgeView] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.EdgeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.05882353 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.25 ]; RELATED TYPES: [freemind.view.mindmapview.NodeView] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.NodeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.02 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.25 ]; RELATED TYPES: [freemind.view.mindmapview.EdgeView]
	  	->NODE_36[...,...]
	  	->NODE_16[...,...]
	->NODE_51[[freemind.modes.EdgeAdapter, freemind.modes.LineAdapter, freemind.modes.MindMapLine, freemind.modes.MindMapNode, freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseNodeModel, freemind.modes.filemode.FileNodeModel, freemind.modes.mindmapmode.MindMapNodeModel],[String getStyle()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapLine]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.14285715 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.25 ]; RELATED TYPES: [freemind.modes.EdgeAdapter, freemind.modes.LineAdapter] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapNode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.027027028 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.NodeAdapter, freemind.modes.browsemode.BrowseNodeModel, freemind.modes.filemode.FileNodeModel, freemind.modes.mindmapmode.MindMapNodeModel] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.NodeAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.01923077 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.browsemode.BrowseNodeModel, freemind.modes.filemode.FileNodeModel, freemind.modes.mindmapmode.MindMapNodeModel] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.LineAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.09090909 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.14285715 ]; RELATED TYPES: [freemind.modes.EdgeAdapter] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.MindMapNode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.027027028 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.33333334 ]; RELATED TYPES: [freemind.modes.LineAdapter, freemind.modes.NodeAdapter]
	  	->NODE_35[...,...]
	->NODE_52[[freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeView, freemind.view.mindmapview.RootNodeView],[void setRendering(Graphics2D g)]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.view.mindmapview.NodeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.02 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.071428575 ]; RELATED TYPES: [freemind.view.mindmapview.RootNodeView] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.EdgeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.05882353 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.25 ]; RELATED TYPES: [freemind.view.mindmapview.NodeView] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.view.mindmapview.NodeView]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.02 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.5 ]; RELATED TYPES: [freemind.view.mindmapview.ArrowLinkView, freemind.view.mindmapview.CloudView, freemind.view.mindmapview.EdgeView]
	  	->NODE_13[...,...]
	->NODE_53[[freemind.modes.browsemode.BrowseController, freemind.modes.filemode.FileController, freemind.modes.mindmapmode.MindMapController, freemind.modes.schememode.SchemeController],[JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode()]]
	  FEATURE TYPE:  ## ADHOC
	  	->NODE_54[[freemind.modes.browsemode.BrowseController, freemind.modes.filemode.FileController, freemind.modes.mindmapmode.MindMapController],[JMenu getEditMenu(), JPopupMenu getPopupMenu(), MapAdapter newModel(), MindMapNode newNode()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	  	->NODE_6[...,...]
	  	->NODE_25[...,...]
	->NODE_55[[freemind.modes.CloudAdapter, freemind.modes.MindMapCloud, freemind.view.mindmapview.CloudView],[Color getExteriorColor()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMapCloud]; ANCHOR TYPE BEHAVIOR COVERAGE: [1.0 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.CloudAdapter] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.MindMapCloud]; ANCHOR TYPE BEHAVIOR COVERAGE: [1.0 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.view.mindmapview.CloudView]
	  	->NODE_34[...,...]
	->NODE_56[[freemind.controller.Controller, freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.modes.ControllerAdapter, freemind.view.MapModule],[MapView getView()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.main.FreeMindMain]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.03846154 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.04761905 ]; RELATED TYPES: [freemind.main.FreeMind, freemind.main.FreeMindApplet] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.controller.Controller]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.022727273 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.main.FreeMind, freemind.main.FreeMindApplet] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.main.FreeMindMain]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.03846154 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.controller.Controller]
	  	->NODE_57[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.view.MapModule],[MapView getView(), void setView(MapView view)]]
	  	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.main.FreeMindMain]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.07692308 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.0952381 ]; RELATED TYPES: [freemind.main.FreeMind, freemind.main.FreeMindApplet]
	  	  	->NODE_58[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain],[Container getViewport(), Controller getController(), File getPatternsFile(), MapView getView(), MenuBar getFreeMindMenuBar(), ResourceBundle getResources(), String getFreemindDirectory(), String getFreemindVersion(), String getProperty(String key), URL getResource(String name), boolean isApplet(), int getWinHeight(), int getWinState(), int getWinWidth(), java.util.logging.Logger getLogger(String forClass), void err(String msg), void out(String msg), void saveProperties(), void setProperty(String key, String value), void setView(MapView view), void setWaitingCursor(boolean waiting)]]
	  	  	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.main.FreeMindMain]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.8076923 ]##
	  	->NODE_24[...,...]
	  	->NODE_59[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.modes.ControllerAdapter],[Controller getController(), MapView getView(), URL getResource(String name)]]
	  	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.main.FreeMindMain]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.115384616 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.14285715 ]; RELATED TYPES: [freemind.main.FreeMind, freemind.main.FreeMindApplet]
	  	  	->NODE_58[...,...]
	->NODE_60[[freemind.main.XMLElement, freemind.main.XMLParseException],[int getLineNr()]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_61[[freemind.controller.Controller, freemind.controller.Controller.MapModuleManager, freemind.modes.ControllerAdapter],[MapModule getMapModule()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.controller.Controller.MapModuleManager]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.055555556 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.controller.Controller] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.controller.Controller]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.022727273 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.controller.Controller.MapModuleManager]
	  	->NODE_62[[freemind.controller.Controller.MapModuleManager, freemind.modes.ControllerAdapter],[MapModule getMapModule(), boolean close(), void updateMapModuleName()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	->NODE_4[...,...]
	->NODE_63[[freemind.controller.Controller, freemind.modes.ControllerAdapter, freemind.modes.LineAdapter, freemind.modes.MapAdapter, freemind.modes.NodeAdapter, freemind.modes.XMLElementAdapter, freemind.modes.schememode.SchemeMode, freemind.view.mindmapview.MindMapLayout],[FreeMindMain getFrame()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.NodeAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.01923077 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.XMLElementAdapter] ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.controller.Controller]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.022727273 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.schememode.SchemeMode]
	  	->NODE_46[...,...]
	  	->NODE_4[...,...]
	  	->NODE_40[...,...]
	  	->NODE_64[[freemind.modes.MapAdapter, freemind.modes.NodeAdapter],[File getFile(), FreeMindMain getFrame()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	->NODE_49[...,...]
	  	->NODE_31[...,...]
	->NODE_65[[freemind.main.XMLElement, freemind.modes.MindIcon, freemind.modes.StylePattern],[String getName()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_FULL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.MindIcon]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.125 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 1.0 ]; RELATED TYPES: [freemind.modes.StylePattern] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.StylePattern]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.030303031 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.030303031 ]; RELATED TYPES: [freemind.modes.StylePattern]
	  	->NODE_21[...,...]
	->NODE_66[[freemind.modes.MapAdapter, freemind.modes.MindMap, freemind.modes.browsemode.BrowseMapModel, freemind.modes.filemode.FileNodeModel],[File getFile()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.MindMap]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.03846154 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.33333334 ]; RELATED TYPES: [freemind.modes.MapAdapter, freemind.modes.browsemode.BrowseMapModel] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [freemind.modes.MapAdapter]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.016393442 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.16666667 ]; RELATED TYPES: [freemind.modes.browsemode.BrowseMapModel]
	  	->NODE_64[...,...]
	->NODE_67[[freemind.main.FreeMind, freemind.main.FreeMindApplet, freemind.main.FreeMindMain, freemind.modes.ControllerAdapter, freemind.modes.Mode, freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode, freemind.view.mindmapview.MapView],[Controller getController()]]
	  FEATURE TYPE:  ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.modes.Mode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.1 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.125 ]; RELATED TYPES: [freemind.modes.browsemode.BrowseMode, freemind.modes.filemode.FileMode, freemind.modes.mindmapmode.MindMapMode, freemind.modes.schememode.SchemeMode] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [freemind.main.FreeMindMain]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.03846154 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.04761905 ]; RELATED TYPES: [freemind.main.FreeMind, freemind.main.FreeMindApplet] ## PARTIAL_EXTENT_PARTIAL_BEHAVIOR_EXPLICIT_AGGREGATIONS; ANCHOR: [freemind.modes.Mode]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.1 ]; CONFIGURATION BEHAVIOR COVERAGE: [ 0.5 ]; RELATED TYPES: [freemind.modes.ControllerAdapter]
	  	->NODE_68[[freemind.main.FreeMindApplet, freemind.view.mindmapview.MapView],[Controller getController(), int getMaxNodeWidth()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	->NODE_38[...,...]
	  	->NODE_59[...,...]
	  	->NODE_26[...,...]
Done printing candidate nodes!
true
