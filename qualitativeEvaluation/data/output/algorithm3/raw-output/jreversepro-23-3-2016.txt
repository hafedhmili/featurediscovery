
!ENTRY com.ibm.ws.st.core 4 0 2016-03-23 19:56:45.434
!MESSAGE Could not load classpathExtension: com.ibm.ws.osgi.core.serverExtension
!STACK 0
java.lang.IllegalArgumentException: Project facet osgi.app has not been defined.
	at org.eclipse.wst.common.project.facet.core.internal.FacetedProjectFrameworkImpl.getProjectFacet(FacetedProjectFrameworkImpl.java:234)
	at org.eclipse.wst.common.project.facet.core.ProjectFacetsManager.getProjectFacet(ProjectFacetsManager.java:75)
	at com.ibm.ws.st.core.internal.ClasspathExtension.<init>(ClasspathExtension.java:69)
	at com.ibm.ws.st.core.internal.ClasspathExtension.createClasspathExtensions(ClasspathExtension.java:45)
	at com.ibm.ws.st.core.internal.Activator.start(Activator.java:384)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:771)
	at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:1)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:764)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:721)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:941)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:318)
	at org.eclipse.osgi.container.Module.doStart(Module.java:571)
	at org.eclipse.osgi.container.Module.start(Module.java:439)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:454)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:107)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:531)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:324)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:327)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:36)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:386)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:352)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:344)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:160)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.Class.getDeclaredConstructors0(Native Method)
	at java.lang.Class.privateGetDeclaredConstructors(Unknown Source)
	at java.lang.Class.getConstructor0(Unknown Source)
	at java.lang.Class.newInstance(Unknown Source)
	at org.eclipse.core.internal.registry.osgi.RegistryStrategyOSGI.createExecutableExtension(RegistryStrategyOSGI.java:184)
	at org.eclipse.core.internal.registry.ExtensionRegistry.createExecutableExtension(ExtensionRegistry.java:905)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:243)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:55)
	at org.eclipse.wst.server.core.internal.ResourceManager.executeStartups(ResourceManager.java:205)
	at org.eclipse.wst.server.core.internal.ResourceManager.init(ResourceManager.java:245)
	at org.eclipse.wst.server.core.internal.ResourceManager.getServers(ResourceManager.java:795)
	at org.eclipse.wst.server.core.ServerCore.getServers(ServerCore.java:402)
	at org.eclipse.wst.server.ui.internal.InitializeJob.run(InitializeJob.java:34)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
processing compilation unit: JCmdMain.java
processing compilation unit: JAwtFrame.java
processing compilation unit: JMainFrame.java
processing compilation unit: MainMenu.java
processing compilation unit: JCustomFileChooser.java
processing compilation unit: JCustomListPanel.java
processing compilation unit: JJavaDocumentEditor.java
processing compilation unit: JClassEditPanel.java
processing compilation unit: JDlgFont.java
processing compilation unit: JErrorDlg.java
processing compilation unit: JDlgAbout.java
processing compilation unit: Helper.java
processing compilation unit: AppConstants.java
processing compilation unit: JJvmOpcodes.java
processing compilation unit: KeyWords.java
processing compilation unit: JJvmSet.java
processing compilation unit: MyFavTheme.java
processing compilation unit: ConfirmCloseDialog.java
processing compilation unit: MainMenu.java
processing compilation unit: DlgClose.java
processing compilation unit: JCustomFileChooser.java
processing compilation unit: JErrorDlg.java
processing compilation unit: JClassEditPanel.java
processing compilation unit: JCpDialog.java
processing compilation unit: JCustomListPanel.java
processing compilation unit: JJavaDocumentEditor.java
processing compilation unit: JDlgAbout.java
processing compilation unit: JDlgFont.java
processing compilation unit: JLookFeelMenu.java
processing compilation unit: JStatusPanel.java
processing compilation unit: JPoolTable.java
processing compilation unit: ClassParserException.java
processing compilation unit: JAttribute.java
processing compilation unit: JClassParser.java
processing compilation unit: JField.java
processing compilation unit: JImport.java
processing compilation unit: JException.java
processing compilation unit: JInstruction.java
processing compilation unit: JMethod.java
processing compilation unit: JConstantPool.java
processing compilation unit: JMember.java
processing compilation unit: JConstantPoolEntry.java
processing compilation unit: JLineOfCode.java
processing compilation unit: JLineNumberTable.java
processing compilation unit: JClassInfo.java
processing compilation unit: JElseBlock.java
processing compilation unit: JSynchBlock.java
processing compilation unit: JMethodBlock.java
processing compilation unit: JTryBlock.java
processing compilation unit: JElseIfBlock.java
processing compilation unit: JCaseBlock.java
processing compilation unit: JFinallyBlock.java
processing compilation unit: JForBlock.java
processing compilation unit: JDoWhileBlock.java
processing compilation unit: JIfBlock.java
processing compilation unit: JBlockObject.java
processing compilation unit: JSwitchBlock.java
processing compilation unit: JCatchBlock.java
processing compilation unit: JDecompiler.java
processing compilation unit: JDisAssembler.java
processing compilation unit: JCaseComparator.java
processing compilation unit: JBranchEntry.java
processing compilation unit: JBranchTable.java
processing compilation unit: JSerializer.java
processing compilation unit: JSwitchTable.java
processing compilation unit: BranchConstants.java
processing compilation unit: JReverseEngineer.java
processing compilation unit: JCaseEntry.java
processing compilation unit: JBranchComparator.java
processing compilation unit: JCollatingTable.java
processing compilation unit: RevEngineException.java
processing compilation unit: JRunTimeContext.java
processing compilation unit: JRunTimeFrame.java
processing compilation unit: JSymbolTable.java
processing compilation unit: OperandConstants.java
processing compilation unit: JOperandStack.java
processing compilation unit: JLocalEntry.java
processing compilation unit: Operand.java
processing compilation unit: TestMain.java
processing compilation unit: TestHelper.java
processing compilation unit: TestContext.java
processing compilation unit: TestBase.java
processing compilation unit: TestSimpleReturns.java
Project JreversePro has : 83 compilation units, and 87 defined types
Printing the relation
jreversepro.JAwtFrame =====> [ void main(String[] aArgs), void reverseEngineer(File aFile), void initAppState(), void JAwtFrame(), void openFile(), void cutText(), void addListeners(), void copyText(), void showFontDialog(), void saveFile(), void showAbout(), void formatTitle(String aFileName), void saveProperties(), void appClose(), void viewPool() ]
jreversepro.JCmdMain =====> [ boolean process(JClassInfo infoClass, String cmd), void main(String[] aArgs), void listen(JClassInfo infoClass, String inputFile), JClassInfo loadClass(String inputFile), void process(String[] args) ]
jreversepro.JMainFrame =====> [ void JMainFrame(), void main(String[] aArgs), void reverseEngineer(File aFile), void initAppState(), void openFile(), void cutText(), void addListeners(), void copyText(), void createTree(JClassInfo aClassInfo, String aCurrentClass), void showFontDialog(), void saveFile(), void showAbout(), void formatTitle(String aFileName), void saveProperties(), void appClose(), void viewPool(), StringBuffer writeArgs(List aArgs, JImport aImports) ]
jreversepro.awtui.JClassEditPanel =====> [ void JClassEditPanel(), boolean writeToFile(Frame aParent, File aOutputFile), boolean confirmOverwrite(Frame aParent, File aOutputFile), void setEditorFont(Font aFont), Font getEditorFont(), void writeCode(String aCode) ]
jreversepro.awtui.JCustomFileChooser =====> [ void JCustomFileChooser(Frame parent, String aTitle, String aFileExtension, String aDir, int mode) ]
jreversepro.awtui.JCustomListPanel =====> [ void JCustomListPanel(int aMaxEntries), void addComponents() ]
jreversepro.awtui.JDlgAbout =====> [ void JDlgAbout(Frame aParent, String aTitle) ]
jreversepro.awtui.JDlgFont =====> [ int showFontDialog(), Font getChosenFont(), void JDlgFont(Frame owner, String title), void fillFontObjects() ]
jreversepro.awtui.JErrorDlg =====> [ void JErrorDlg(Frame parent, String FileName, Exception _ex), void addComponents(), String getStackTrace(Exception _ex) ]
jreversepro.awtui.JJavaDocumentEditor =====> [ void JJavaDocumentEditor() ]
jreversepro.awtui.MainMenu =====> [ void setFlag(String Rhs), void initMenuItems(), void MainMenu(Frame owner) ]
jreversepro.common.AppConstants =====> [ void main(String[] aArgs), void readCpEntries(int aNumEntry), void initAppState(), void parse(ByteArrayInputStream is, String pathToClass), void openFile(), void readTagClass(int aIndex), void copyText(), void readTagUtf8(int aIndex), void parse(InputStream is, int length, String pathToClass), JClassInfo getClassInfo(), void readTagLong(int aIndex), void listen(JClassInfo infoClass, String inputFile), void readConstantPool(), StringBuffer writeArgs(List aArgs, JImport aImports), void JMainFrame(), void readMethods(), void reverseEngineer(File aFile), void readTagMethodRef(int aIndex), void createTree(JClassInfo aClassInfo, String aCurrentClass), void fillThisClass(), void showFontDialog(), void saveFile(), void formatTitle(String aFileName), void readMagic(), void readTagFloat(int aIndex), boolean process(JClassInfo infoClass, String cmd), void parse(File aFile), void readVersion(), void readClassAttributes(), void parse(URL url), void readTagDouble(int aIndex), void viewPool(), void readFieldAttributes(JField aRhsField), void JAwtFrame(), void readAttributes(), void showAbout(), void readInterfaces(), JClassInfo loadClass(String inputFile), void parse(byte[] bytes), void process(String[] args), void readTagNameType(int aIndex), void appClose(), void JDlgAbout(Frame aParent, String aTitle), void readFields(), void cutText(), void addListeners(), void readMethodAttributes(JMethod aRhsMethod), void readTagInterfaceRef(int aIndex), void fillSuperClass(), boolean supportedMajorMinor(short major, short minor), void saveProperties(), void readTagFieldRef(int aIndex), void readTagString(int aIndex), void JDlgAbout(JFrame aParent, String aTitle), void readAccess(), JConstantPool getCpInfo(), void readTagInteger(int aIndex) ]
jreversepro.common.Helper =====> [ void log(Exception ex), boolean toggleDebug(), void Helper(), String getAtomicValue(String value, String datatype), String getPackageName(String aFullName), void log(String logMsg), String replaceEscapeChars(String aLiteral), String lowNbits(String aValue, int aNumBits), boolean versionCheck(), String getValue(String value, String datatype), String getReturnType(String aSignature), boolean isBasicType(String type), int getSignTokenLength(String aDataType), void logNoEol(String logMsg), int signedToUnsigned(int aByteVal), boolean isDebug(), String getJavaDataType(String aDataType, boolean associated), List getArguments(String aSignature), String representChar(char aChar) ]
jreversepro.common.JJvmOpcodes =====> [ int getArgUnsignedByte(), void opr172to186(JInstruction thisIns, JOperandStack myStack), List startsWith(int aInsIndex), void dealDefault(StringBuffer assembly, JInstruction thisIns), void opr187to201(JInstruction thisIns, JOperandStack myStack), void addGotoEntry(int startPc, int targetPc), void JJvmSet(), void assign8(), String doesMonitorBegin(int monitorBeginPc), int getTargetPc(), int getArgUnsignedInt(int pos), boolean isJSRTarget(int currPc), JInstruction next(), int getArgShort(int pos), String getIns(int index), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void assign9(), int getOffset(), void assign6(), String branchesToString(), JInstruction prev(), void setLastIns(int li), void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), int getArgUnsignedShort(), void processData(Map gotos), int getTargetPcW(), boolean isInvokeIns(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void opr202to255(JInstruction thisIns, JOperandStack myStack), void assign7(), void addCatchBranch(int insIndex, JBranchEntry brent), String getInsName(), void genCode(), void opr0to31(JInstruction thisIns, JOperandStack myStack), int findGotoTarget(int startPc), String disassemble(), void addCaseEntry(JCaseEntry caseEntry), String getStatement(), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), String getConditionalOperator(), void addRetPc(int retPc), void append(JInstruction rhsNext), boolean isASwitchIns(), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), int getLastInsPos(), int getArgWide(int pos), void addSwitch(JSwitchTable switchEntry), List getCases(), void setLastInsPos(int lip), void createLookupSwitch(byte[] entries, int offset, Map gotos), int getInsLen(int index, boolean wide), int getArgShort(), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void opr87to100(JInstruction thisIns, JOperandStack myStack), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), int getArgUnsignedWide(), void assign0(), void genSource(), JBranchEntry contains(List listBranchEntries, int type), void assign13(), void assign1(), JBranchEntry getBranchEntry(), void assign12(), void createTableSwitch(byte[] entries, int offset, Map gotos), void dealIntegerStore(String popValue, int intIndex, int insIndex), void opr32to53(JInstruction thisIns, JOperandStack myStack), JCollatingTable loadBranchTable(), boolean isAnIfIns(), int getArgUnsignedWide(int pos), int getArgUnsignedShort(int pos), int isStoreInstruction(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void closeCatchBranch(int closeIndex), int referredVariable(), int getArgInt(), int getArgInt(int pos), void assign14(), void setTypeValue(String rhsType, String rhsValue), int getTargetPc2(), void sort(), void assign10(), void assign4(), int getArgByte(int pos), String getOpr2(), int getDefaultByte(), JInstruction findGotoIns(List byteIns, int start, int end), int getArgByte(), JSymbolTable getSymbolTable(), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), int getNextIndex(), void loadSymbolTable(), void identifyMoreBranches(), void assign5(), int getArgWide(), String getOpr1(), void addMonitorPc(int aMonitorPc, String aMonObject), int getLength(), void JBranchTable(JMethod method), void addJSRPc(int targetPc), void setTables(List aBranches), Map getGotoTable(), void add(JBranchEntry ent), void assign2(), void opr148to171(JInstruction thisIns, JOperandStack myStack), int getArgUnsignedByte(int pos), int getLastIns(), boolean isEndOfCatch(), void deleteElse(int startElse), void assign11(), void addTryBlocks(List excTryTable), Operand getInvokedObject(), void assign3(), String getArgValues(List args, List argValues), int getArgUnsignedInt(), boolean isEndOfLine(), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), JRunTimeContext createRuntimeContext() ]
jreversepro.common.JJvmSet =====> [ void assign0(), void assign10(), void assign4(), void assign2(), void JJvmSet(), void assign8(), void assign6(), void assign11(), void assign13(), void assign1(), String getIns(int index), int getInsLen(int index, boolean wide), void assign5(), void assign3(), void assign9(), void assign7(), void assign12(), void assign14() ]
jreversepro.common.KeyWords =====> [ void JOperandStack(), void appendStartBlockStmtX(JDecompiler decomp), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void complementOperator(), String declare(int aVarIndex, int aInsIndex), int getTargetPc(), int getArgUnsignedInt(int pos), int signedToUnsigned(int aByteVal), void setTarget(int targetPc), List getEffectiveBranches(), JInstruction next(), void addDoubleEntry(String value), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void setPackageName(String packageName), int getStartExecPc(), int getOffset(), void processMethods(boolean getBytecode), void addInterfaceRefEntry(int ptr1, int ptr2), void addReference(int aVarIndex, String aDatatype, int aIndex), boolean versionCheck(), void removeAllConstants(), void setBytes(byte[] bytecodes), void formatTitle(String aFileName), void processData(Map gotos), int getTargetPcW(), void setBlockWrittenFlag(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), JImport getImportedClasses(), void opr202to255(JInstruction thisIns, JOperandStack myStack), int getMajor(), void addCatchBranch(int insIndex, JBranchEntry brent), void log(Exception ex), String getInsName(), List getInterfaces(), void addMethod(JMethod rhsMethod), JLineOfCode removeLastLineOfCode(), void genCode(), void setMaxStack(int maxStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), String getComplementOperator(String rhs), void addTextCode(String txt), JInstruction getFirstIns(), int dealLookupSwitch(int index), void logNoEol(String logMsg), String getAccessString(), byte[] getBytes(), void collate(), JBlockObject removeCurrentBlock(), String getStatement(), List getMethods(), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void JCollatingTable(JMethod method), void append(JInstruction rhsNext), String getStringifiedClass(boolean getBytecode, boolean includeMetadata), boolean isASwitchIns(), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void addListeners(), void assignDataType(int aVarIndex, String aDatatype, int aVarStore, boolean aDeclared), void push(String value, String datatype, int precedence), int getMaxLocals(), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), List getCases(), void saveProperties(), String getFirstDirectName(int index), List getThrowsClasses(), String getStringifiedClass(boolean getBytecode), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), boolean checkCase2(int a, int b), int getPtr2(int index), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), String getThisClass(), void addBlock(JBlockObject jbo), void initAppState(), void validatePairings(JBranchEntry ent), void openFile(), void genSource(), JLineNumberTable getLineTable(), void copyText(), void setEndBlockPc(int aNewPc), void processBreakContinue(int startPc, int targetPc), List getArgList(), boolean isTopDatatypeForeign(), JClassInfo loadClass(URL url), JBranchEntry getBranchEntry(), boolean isTagDouble(int index), List defineVariable(int endOfBranch), String getReturnType(), String getCondition(boolean complement), void executeInstruction(JInstruction ins), void createTableSwitch(byte[] entries, int offset, Map gotos), StringBuffer writeArgs(List aArgs, JImport aImports), boolean doesContain(int aPc), void JMainFrame(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void setPathName(String classPath), String getValue(String value, String datatype), void createTree(JClassInfo aClassInfo, String aCurrentClass), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), JCollatingTable loadBranchTable(), List getConstants(), int getArgUnsignedWide(int pos), void setLineTable(JLineNumberTable rhsLineTable), JConstantPool getConstantPool(), String getLdcString(int index), int isStoreInstruction(), String getFieldType(int index), void normalize(), int getNextPc(), void addEntry(int aVarIndex, int aStoreIndex, String aDatatype, boolean aDeclared), void setStartPc(int startPc), void opr54to86(JInstruction thisIns, JOperandStack myStack), void closeCatchBranch(int closeIndex), int referredVariable(), String genUniqueName(String name, int aVarIndex), int getMinor(), void setTypeValue(String rhsType, String rhsValue), void reverseEngineer(boolean getBytecode), void getEndStmt(int insIndex), void Helper(), void sort(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void addFieldRefEntry(int ptr1, int ptr2), void setSignature(String rhsSign), void pushControlEntry(JBranchEntry newent), int getArgByte(int pos), String disAssemble(), void JSymbolTable(JMethod rhsMethod, JImport imports), void addFloatEntry(String value), void setSymbolTable(JSymbolTable st), int getEndTarget(), String getDataType(int aVarIndex, int aInsIndex), int getSignTokenLength(String aDataType), JSymbolTable getSymbolTable(), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void JMethod(JClassInfo info), List getFields(), int readTargetSwitch(int newIndex), void setNextPc(int nextPc), void setWrittenFlag(), int getArgWide(), int getLength(), void convertToWhile(), boolean isStatic(), void setThrowsClasses(List throwsClasses), int getStartPc(), String getExitCode(), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable), int getTarget(), int getLastIns(), void addValue(String name), List getInstructions(), StringBuffer getPackageImports(), void touchVariable(String aVarName, String aNewType), void setThisClass(String rhsName), Operand getInvokedObject(), String getName(int aVarIndex, int aInsIndex), int getArgUnsignedInt(), boolean isEndOfLine(), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), JRunTimeContext createRuntimeContext(), void addNullEntry(), void identifyWhileLoops(Map mapGotos), String getLocalStackInfo(), int getMaxStack(), JOperandStack getOperandStack(), void JClassInfo(), void setStringifiedBytecode(String str), int getArgUnsignedByte(), void log(String logMsg), String lowNbits(String aValue, int aNumBits), int getEndBlockPc(), boolean isWhile(), int getMaxSymbols(), void getSingleEntryInfo(StringBuffer sb, int cpIndex), String getType(JConstantPoolEntry ent), int getArgShort(int pos), String getDataType(int index), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), StringBuffer getStringifiedInterfaces(), String getThisClass(boolean fullyQualified), void reverseEngineer(File aFile), boolean checkCase1(int a, int b), void addMethodRefEntry(int ptr1, int ptr2), String getName(JConstantPoolEntry ent), JInstruction prev(), void saveFile(), void setLastIns(int li), int getArgUnsignedShort(), String getSourceFile(), boolean isInvokeIns(), String getJavaDataType(String aDataType, boolean associated), void mergeTopTwo(), void addIntegerEntry(String value), void getFinalBlockStmt(), boolean toggleDebug(), void JCaseBlock(JBranchEntry _jbe, String _expr), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void JAwtFrame(), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), String getTagDescriptor(int index), boolean isBasicType(String type), void setMaxLocals(int maxLocals), JInstruction getInstruction(int ind), void addClassEntry(int classIndex), String disassemble(), void addCaseEntry(JCaseEntry caseEntry), void push(int value, String datatype, int precedence), StringBuffer getHeaders(), void appClose(), String getExpression(), String getMethodHeader(boolean includeStackInfo), int getPtr1(int index), String getConditionalOperator(), String getCpValue(int index), String getSecondDirectName(int index), void setOpr1(String opr1), String getThrowsClause(JImport importInfo), List getValues(), String getTagName(int tagByte), int getLastInsPos(), int getArgWide(int pos), JMethodBlock getBlock(), void setConstantPool(JConstantPool cpInfo), String topDatatype(), void setLastInsPos(int lip), void createLookupSwitch(byte[] entries, int offset, Map gotos), int dealTableSwitch(int index), String getEntryCode(), void JCaseEntry(), int getArgShort(), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void opr87to100(JInstruction thisIns, JOperandStack myStack), boolean collate(), int getType(), int getArgUnsignedWide(), int getMaxCpEntry(), void setOpr2(String opr2), void main(String[] aArgs), void setAccess(int rhsAccess), JBranchEntry getImmediateOuterLoop(), JLocalEntry getMatchingEntry(int aVarIndex, int aInsIndex), void JConstantPool(int cpMax), void setSourceFile(String rhsSrcFile), String getEntryInfo(), void JCaseEntry(String name, int targetPc), String getSuperClass(), String getPathName(), String genName(String aType, int aVarIndex), void addStringEntry(int stringIndex), JInstruction getNextInstruction(int ind), StringBuffer getStringifiedFields(), void addNameTypeEntry(int ptr1, int ptr2), void addInterface(String interfaceName), byte[] getArgArray(int start, int end), int getStartBlockPc(), void resetWrittenFlag(), JClassInfo loadClass(File file), String representChar(char aChar), void setType(int type), void setTargetPc(int targetPc), String getBasicDataTypeValue(int index), boolean independent(), List getEntries(), String replaceEscapeChars(String aLiteral), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), String getStringifiedMethods(boolean getBytecode, boolean includeMetadata), Map getAllCatchJExceptions(), List getexceptionBlocks(), void opr32to53(JInstruction thisIns, JOperandStack myStack), void showFontDialog(), boolean isClass(), boolean isAnIfIns(), int getArgUnsignedShort(int pos), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), void operateStack(JInstruction thisIns, JOperandStack myStack), void loadSymbols(List aArgs, int startIndex), void addLongEntry(String value), int getArgInt(), int getArgInt(int pos), void viewPool(), void setEndTarget(int endTarget), String getFieldName(int index), int getTargetPc2(), String getEntryInfo(int cpIndex), String getAtomicValue(String value, String datatype), String getPackageName(String aFullName), String getStringifiedBytecode(), int getTagByte(int index), String getOpr2(), int getDefaultByte(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), int getArgByte(), String getConstantValues(), void showAbout(), void closeBlock(), StringBuffer getThisSuperClasses(), int getNextIndex(), void loadSymbolTable(), String getUtf8String(int index), String getSignature(), void setSuperClass(String rhsName), void addLineOfCode(JLineOfCode loc), void addField(JField rhsField), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), String getOpr1(), void setMajorMinor(short rhsMajor, short rhsMinor), void addUtf8Entry(String value), List getKeyWordsList(), void opr148to171(JInstruction thisIns, JOperandStack myStack), void cutText(), String getReturnType(String aSignature), int getArgUnsignedByte(int pos), boolean isEndOfCatch(), boolean doesStartWith(int rhsStartPc), String getClassName(int index), void addConstant(String constant), boolean isDebug(), int convertToObjects(), String getArgValues(List args, List argValues), List getArguments(String aSignature) ]
jreversepro.gui.ConfirmCloseDialog =====> [ boolean confirmExit(JFrame aAppFrame) ]
jreversepro.gui.FontSet =====> [ Object[] getFonts(), void FontSet(Font[] FontList) ]
jreversepro.gui.JClassEditPanel =====> [ void createModel(JFrame aParent, String aFileName, List aChildren), void JClassEditPanel(), boolean confirmOverwrite(JFrame aParent, File aOutputFile), boolean writeToFile(JFrame aParent, File aOutputFile), void setEditorFont(Font aFont), Font getEditorFont(), void writeCode(String aCode) ]
jreversepro.gui.JCpDialog =====> [ void JCpDialog(JFrame aParent, String aClassName, JConstantPool aCpInfo), int getCpIndex(), void findText(), void gotoIndex(int aTargetIndex) ]
jreversepro.gui.JCustomFileChooser =====> [ void JCustomFileChooser(String aDir, String aDescription, String aExtension, String aToolTipText), int showChooser(JFrame aParent, String aSelectButton) ]
jreversepro.gui.JCustomListPanel =====> [ void JCustomListPanel(int aMaxEntries), void addComponents() ]
jreversepro.gui.JDlgAbout =====> [ void JDlgAbout(JFrame aParent, String aTitle) ]
jreversepro.gui.JDlgFont =====> [ int showFontDialog(), Font getChosenFont(), void JDlgFont(Frame owner, String title), Object[] getFontObjects() ]
jreversepro.gui.JErrorDlg =====> [ void JErrorDlg(JFrame parent, String FileName, Exception _ex), void addComponents(), String getStackTrace(Exception _ex) ]
jreversepro.gui.JJavaDocumentEditor =====> [ void JJavaDocumentEditor() ]
jreversepro.gui.JLookFeelMenu =====> [ void setMotif_LF(), void JLookFeelMenu(String title, JFrame thisFrame), void setWin_LF(), String getAppLookAndFeel(), void setAppLookAndFeel(String Rhs), void JLookFeelMenu(JFrame thisFrame), void setDefaultLookAndFeel(), void addLookAndFeelListeners(), void setMetal_LF() ]
jreversepro.gui.JPoolTable =====> [ void JPoolTable(JConstantPool RhsCpInfo) ]
jreversepro.gui.JPoolTableModel =====> [ void JPoolTableModel(JConstantPool RhsCpInfo), void initColumnNames(), Object fillPtr1(int Index), Object fillValue(int Index), Object fillPtr2(int Index), Object fillTagByte(int Index) ]
jreversepro.gui.JStatusPanel =====> [ void JStatusPanel() ]
jreversepro.gui.MainMenu =====> [ void setFlag(String Rhs), void initMenuItems(), void MainMenu(JFrame owner) ]
jreversepro.parser.ClassParserException =====> [ void ClassParserException(String aMsg), void ClassParserException(StringBuffer aMsg) ]
jreversepro.parser.JAttribute =====> [ void manipSynthetic(DataInputStream aDis), String manipSourceFile(DataInputStream aDis, JConstantPool aCpInfo), void manipLocalVariableTable(DataInputStream aDis), List manipExceptions(DataInputStream aDis, JConstantPool aCpInfo), void manipDeprecated(DataInputStream aDis), void readCodeAttributes(DataInputStream aDis, JConstantPool aCpInfo), String manipConstantValue(DataInputStream aDis, JConstantPool aCpInfo), void manipCode(DataInputStream aDis, JMethod aLocalMethod, JConstantPool aCpInfo), void manipLineNumberTable(DataInputStream aDis) ]
jreversepro.parser.JClassParser =====> [ void readFieldAttributes(JField aRhsField), void readCpEntries(int aNumEntry), void parse(ByteArrayInputStream is, String pathToClass), void readTagClass(int aIndex), void readTagUtf8(int aIndex), void readAttributes(), void readInterfaces(), void parse(byte[] bytes), void parse(InputStream is, int length, String pathToClass), void readTagNameType(int aIndex), JClassInfo getClassInfo(), void readTagLong(int aIndex), void readConstantPool(), void readMethods(), void readTagMethodRef(int aIndex), void readFields(), void fillThisClass(), void readMethodAttributes(JMethod aRhsMethod), void readTagInterfaceRef(int aIndex), void fillSuperClass(), void readMagic(), boolean supportedMajorMinor(short major, short minor), void readTagFloat(int aIndex), void parse(File aFile), void readTagFieldRef(int aIndex), void readVersion(), void readTagString(int aIndex), void readAccess(), void readClassAttributes(), JConstantPool getCpInfo(), void parse(URL url), void readTagInteger(int aIndex), void readTagDouble(int aIndex) ]
jreversepro.reflect.JClassInfo =====> [ String getThisClass(), List getInterfaces(), void addMethod(JMethod rhsMethod), void JClassInfo(), void setAccess(int rhsAccess), void setSourceFile(String rhsSrcFile), String getSuperClass(), String getPathName(), String getAccessString(), StringBuffer getThisSuperClasses(), StringBuffer getStringifiedFields(), List getFields(), void addInterface(String interfaceName), void setSuperClass(String rhsName), void addField(JField rhsField), void setPackageName(String packageName), StringBuffer getHeaders(), void setMajorMinor(short rhsMajor, short rhsMinor), List getMethods(), void processMethods(boolean getBytecode), String getStringifiedClass(boolean getBytecode, boolean includeMetadata), StringBuffer getStringifiedInterfaces(), String getThisClass(boolean fullyQualified), void setPathName(String classPath), String getStringifiedMethods(boolean getBytecode, boolean includeMetadata), boolean isClass(), StringBuffer getPackageImports(), JConstantPool getConstantPool(), void setConstantPool(JConstantPool cpInfo), void setThisClass(String rhsName), String getSourceFile(), String getStringifiedClass(boolean getBytecode), int getMinor(), int getMajor(), void reverseEngineer(boolean getBytecode) ]
jreversepro.reflect.JConstantPool =====> [ int getMaxCpEntry(), String getEntryInfo(int cpIndex), void addFieldRefEntry(int ptr1, int ptr2), String getTagDescriptor(int index), void JConstantPool(int cpMax), void addFloatEntry(String value), int getTagByte(int index), String getEntryInfo(), void addStringEntry(int stringIndex), void getSingleEntryInfo(StringBuffer sb, int cpIndex), void addNameTypeEntry(int ptr1, int ptr2), void addClassEntry(int classIndex), String getType(JConstantPoolEntry ent), void addDoubleEntry(String value), String getUtf8String(int index), String getDataType(int index), boolean isTagDouble(int index), void addUtf8Entry(String value), int getPtr1(int index), String getCpValue(int index), String getBasicDataTypeValue(int index), List getEntries(), void addInterfaceRefEntry(int ptr1, int ptr2), String getSecondDirectName(int index), String getTagName(int tagByte), void addMethodRefEntry(int ptr1, int ptr2), String getName(JConstantPoolEntry ent), String getClassName(int index), String getFirstDirectName(int index), String getLdcString(int index), String getFieldType(int index), JImport getImportedClasses(), void addLongEntry(String value), void addNullEntry(), void addIntegerEntry(String value), int getPtr2(int index), String getFieldName(int index) ]
jreversepro.reflect.JConstantPoolEntry =====> [ void JConstantPoolEntry(int tagByte, String value, int ptr1, int ptr2), String getValue(), int getTagByte(), int getPtr1(), int getPtr2() ]
jreversepro.reflect.JException =====> [ void JException(int rhsStart, int rhsEnd, int rhsHandler, String rhsType), int getStartPc(), int getEndPc(), boolean containsANYCatchBlock(), boolean isAny(), void addCatchBlock(int rhsHandlerPc, String rhsType), int getEffectiveEndPc(List instructions), Enumeration getHandlers(), String getExceptionClass(int rhsHandlerPc), boolean sameTryBlock(JException exc) ]
jreversepro.reflect.JField =====> [ void JField(), String getValue(), void setValue(String rhsValue) ]
jreversepro.reflect.JImport =====> [ String getImportClasses(String packageName), String getClassName(String fullQualifiedName), void JImport(), void addClass(String importClass) ]
jreversepro.reflect.JInstruction =====> [ String getInsName(), int getArgUnsignedByte(), int getArgByte(int pos), int getTargetPc(), int getArgUnsignedInt(int pos), int getArgByte(), JInstruction next(), int getNextIndex(), int getArgShort(int pos), int getArgWide(), int getLength(), int getOffset(), String getConditionalOperator(), void append(JInstruction rhsNext), boolean isASwitchIns(), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), int getArgUnsignedByte(int pos), boolean isEndOfCatch(), int getArgWide(int pos), JInstruction prev(), boolean isAnIfIns(), int getArgUnsignedWide(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int isStoreInstruction(), int getTargetPcW(), boolean isInvokeIns(), int getArgShort(), int getArgUnsignedInt(), int referredVariable(), boolean isEndOfLine(), int getArgInt(), int getArgInt(int pos), int getTargetPc2(), int getArgUnsignedWide() ]
jreversepro.reflect.JLineOfCode =====> [ void setStart(int s), String getStmt(), boolean isExitCode(), boolean isInBlockCode(), void setFromIndex(int f), void setViz(String v), void JLineOfCode(int sbo, int ebo, int fromI, int toI, String stmt), int getEnd(), String toString(String indent), void JLineOfCode(String stmt, JBlockObject jbo, int state), void setToIndex(int t), int getFromIndex(), String getViz(), String toString(String indent, boolean debug), void setEnd(int e), void setState(int s), boolean isDecoration(), int getToIndex(), void setStmt(String s), JBlockObject getBlock(), int getStart(), int getState(), void setBlock(JBlockObject jbo), boolean isEntryCode() ]
jreversepro.reflect.JMember =====> [ String getLocalStackInfo(), int getMaxStack(), void addBlock(JBlockObject jbo), void setStringifiedBytecode(String str), void setQualifier(int rhsQualify), JLineNumberTable getLineTable(), String getStringRep(int rhsQualifier, boolean memberOnly), String getQualifierName(), JInstruction getNextInstruction(int ind), List getArgList(), byte[] getArgArray(int start, int end), String getValue(), String getReturnType(), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), Map getAllCatchJExceptions(), void setBytes(byte[] bytecodes), List getexceptionBlocks(), void setLineTable(JLineNumberTable rhsLineTable), void normalize(), int getQualifier(), void setSignature(String rhsSign), JLineOfCode removeLastLineOfCode(), void setMaxStack(int maxStack), String getStringifiedBytecode(), void setSymbolTable(JSymbolTable st), JInstruction getFirstIns(), void setValue(String rhsValue), void setMaxLocals(int maxLocals), JInstruction getInstruction(int ind), boolean isFinal(), int dealLookupSwitch(int index), void closeBlock(), byte[] getBytes(), void JMethod(JClassInfo info), void JField(), String getSignature(), int readTargetSwitch(int newIndex), void addLineOfCode(JLineOfCode loc), JBlockObject removeCurrentBlock(), void setDatatype(String rhsType), String getMethodHeader(boolean includeStackInfo), boolean isStatic(), void setName(String rhsName), void setThrowsClasses(List throwsClasses), String getThrowsClause(JImport importInfo), String getDatatype(), JMethodBlock getBlock(), List getInstructions(), int getMaxLocals(), String getName(), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), int dealTableSwitch(int index), List getThrowsClasses() ]
jreversepro.reflect.JMethod =====> [ String getLocalStackInfo(), int getMaxStack(), void setSignature(String rhsSign), JLineOfCode removeLastLineOfCode(), void addBlock(JBlockObject jbo), void setStringifiedBytecode(String str), void setMaxStack(int maxStack), JLineNumberTable getLineTable(), String getStringifiedBytecode(), void setSymbolTable(JSymbolTable st), JInstruction getFirstIns(), void setMaxLocals(int maxLocals), JInstruction getInstruction(int ind), int dealLookupSwitch(int index), void closeBlock(), byte[] getBytes(), JInstruction getNextInstruction(int ind), void JMethod(JClassInfo info), List getArgList(), String getSignature(), int readTargetSwitch(int newIndex), void addLineOfCode(JLineOfCode loc), byte[] getArgArray(int start, int end), JBlockObject removeCurrentBlock(), String getReturnType(), String getMethodHeader(boolean includeStackInfo), boolean isStatic(), void setThrowsClasses(List throwsClasses), String getThrowsClause(JImport importInfo), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), Map getAllCatchJExceptions(), void setBytes(byte[] bytecodes), JMethodBlock getBlock(), List getexceptionBlocks(), List getInstructions(), int getMaxLocals(), void setLineTable(JLineNumberTable rhsLineTable), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), int dealTableSwitch(int index), void normalize(), List getThrowsClasses() ]
jreversepro.reflect.method.JBlockObject =====> [ void JCaseBlock(JBranchEntry _jbe, String _expr), void setInitExpr(String _init), void JForBlock(JBranchEntry _jbe, String _test), void setLoopExpr(String _loop), void JBlockObject(), void JDoWhileBlock(JBranchEntry _jbe), void setOper(String _oper), void JCatchBlock(JBranchEntry _jbe, String _cls, String _var), void JMethodBlock(), void setVar1(String _var1), String toString(String _indent), void JDoWhileBlock(JBranchEntry _jbe, String _var1, String _oper, String _var2), void JSynchBlock(JBranchEntry _jbe, String _var), void JSwitchBlock(JBranchEntry _jbe, String _expr), JLineOfCode removeLastStatement(), Vector getFlattenedCode(String _indent), void addStatement(JLineOfCode _loc), void JElseBlock(JBranchEntry _jbe), void JElseIfBlock(JBranchEntry _jbe, String _expr), void JForBlock(JBranchEntry _jbe, String _init, String _test, String _loop), void JIfBlock(JBranchEntry _jbe, String _expr), String getExitCode(), void setTestExpr(String _test), void setVar2(String _var2), void JFinallyBlock(JBranchEntry _jbe), void addBlock(JBlockObject _jbo), JLineOfCode getEntryLineOfCode(), String getEntryCode(), JLineOfCode getExitLineOfCode(), boolean isSimpleBlock(), boolean removeLastBlock(), void JTryBlock(JBranchEntry _jbe) ]
jreversepro.reflect.method.JCaseBlock =====> [ void JCaseBlock(JBranchEntry _jbe, String _expr), String getExitCode(), String getEntryCode() ]
jreversepro.reflect.method.JCatchBlock =====> [ String getExitCode(), String getEntryCode(), void JCatchBlock(JBranchEntry _jbe, String _cls, String _var) ]
jreversepro.reflect.method.JDoWhileBlock =====> [ String getExitCode(), void JDoWhileBlock(JBranchEntry _jbe), String getEntryCode(), void setOper(String _oper), void setVar2(String _var2), void setVar1(String _var1), void JDoWhileBlock(JBranchEntry _jbe, String _var1, String _oper, String _var2) ]
jreversepro.reflect.method.JElseBlock =====> [ String getExitCode(), String getEntryCode(), void JElseBlock(JBranchEntry _jbe) ]
jreversepro.reflect.method.JElseIfBlock =====> [ String getExitCode(), String getEntryCode(), void JElseIfBlock(JBranchEntry _jbe, String _expr) ]
jreversepro.reflect.method.JFinallyBlock =====> [ String getExitCode(), String getEntryCode(), void JFinallyBlock(JBranchEntry _jbe) ]
jreversepro.reflect.method.JForBlock =====> [ void setInitExpr(String _init), void JForBlock(JBranchEntry _jbe, String _test), void setLoopExpr(String _loop), String getExitCode(), void setTestExpr(String _test), String getEntryCode(), void JForBlock(JBranchEntry _jbe, String _init, String _test, String _loop) ]
jreversepro.reflect.method.JIfBlock =====> [ String getExitCode(), String getEntryCode(), void JIfBlock(JBranchEntry _jbe, String _expr) ]
jreversepro.reflect.method.JMethodBlock =====> [ String getExitCode(), String getEntryCode(), void JMethodBlock() ]
jreversepro.reflect.method.JSwitchBlock =====> [ String getExitCode(), String getEntryCode(), void JSwitchBlock(JBranchEntry _jbe, String _expr) ]
jreversepro.reflect.method.JSynchBlock =====> [ String getExitCode(), String getEntryCode(), void JSynchBlock(JBranchEntry _jbe, String _var) ]
jreversepro.reflect.method.JTryBlock =====> [ String getExitCode(), String getEntryCode(), void JTryBlock(JBranchEntry _jbe) ]
jreversepro.revengine.BranchConstants =====> [ JOperandStack getOperandStack(), void appendStartBlockStmtX(JDecompiler decomp), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void opr172to186(JInstruction thisIns, JOperandStack myStack), List startsWith(int aInsIndex), void opr187to201(JInstruction thisIns, JOperandStack myStack), void complementOperator(), void addGotoEntry(int startPc, int targetPc), String doesMonitorBegin(int monitorBeginPc), int getTargetPc(), int getEndBlockPc(), boolean isWhile(), boolean isJSRTarget(int currPc), List getEffectiveBranches(), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), int getStartExecPc(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), boolean checkCase1(int a, int b), String branchesToString(), void setLastIns(int li), void setBlockWrittenFlag(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void opr202to255(JInstruction thisIns, JOperandStack myStack), void addCatchBranch(int insIndex, JBranchEntry brent), void getFinalBlockStmt(), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void genCode(), void opr0to31(JInstruction thisIns, JOperandStack myStack), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), String getComplementOperator(String rhs), void addTextCode(String txt), int findGotoTarget(int startPc), void collate(), String getStatement(), String getExpression(), void JCollatingTable(JMethod method), void addRetPc(int retPc), void setOpr1(String opr1), int getLastInsPos(), void addSwitch(JSwitchTable switchEntry), void setLastInsPos(int lip), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void opr87to100(JInstruction thisIns, JOperandStack myStack), boolean checkCase2(int a, int b), boolean collate(), int getType(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void setOpr2(String opr2), JBranchEntry getImmediateOuterLoop(), void validatePairings(JBranchEntry ent), void genSource(), void setEndBlockPc(int aNewPc), void processBreakContinue(int startPc, int targetPc), JBranchEntry contains(List listBranchEntries, int type), int getStartBlockPc(), void resetWrittenFlag(), String getCondition(boolean complement), void executeInstruction(JInstruction ins), void setType(int type), void setTargetPc(int targetPc), boolean independent(), boolean doesContain(int aPc), void dealIntegerStore(String popValue, int intIndex, int insIndex), void opr32to53(JInstruction thisIns, JOperandStack myStack), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), JCollatingTable loadBranchTable(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), int getNextPc(), void operateStack(JInstruction thisIns, JOperandStack myStack), void setStartPc(int startPc), void opr54to86(JInstruction thisIns, JOperandStack myStack), void closeCatchBranch(int closeIndex), void getEndStmt(int insIndex), void sort(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void pushControlEntry(JBranchEntry newent), String getOpr2(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), JInstruction findGotoIns(List byteIns, int start, int end), JSymbolTable getSymbolTable(), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void loadSymbolTable(), void identifyMoreBranches(), void setNextPc(int nextPc), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void setWrittenFlag(), String getOpr1(), void addMonitorPc(int aMonitorPc, String aMonObject), void JBranchTable(JMethod method), void addJSRPc(int targetPc), void setTables(List aBranches), Map getGotoTable(), void convertToWhile(), void add(JBranchEntry ent), int getStartPc(), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable), void opr148to171(JInstruction thisIns, JOperandStack myStack), int getLastIns(), void deleteElse(int startElse), boolean doesStartWith(int rhsStartPc), void addTryBlocks(List excTryTable), Operand getInvokedObject(), int convertToObjects(), String getArgValues(List args, List argValues), JRunTimeContext createRuntimeContext(), void identifyWhileLoops(Map mapGotos) ]
jreversepro.revengine.JBranchComparator =====> [ int compare(Object o1, Object o2) ]
jreversepro.revengine.JBranchEntry =====> [ void setOpr2(String opr2), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void appendStartBlockStmtX(JDecompiler decomp), String getComplementOperator(String rhs), void complementOperator(), int getTargetPc(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), int getEndBlockPc(), void setEndBlockPc(int aNewPc), boolean isWhile(), void setNextPc(int nextPc), int getStartBlockPc(), void setWrittenFlag(), String getOpr1(), int getStartExecPc(), void resetWrittenFlag(), String getExpression(), String getCondition(boolean complement), void setType(int type), void setTargetPc(int targetPc), void convertToWhile(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), boolean independent(), boolean doesContain(int aPc), int getStartPc(), void setOpr1(String opr1), boolean doesStartWith(int rhsStartPc), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), int getNextPc(), void setStartPc(int startPc), boolean collate(), int getType() ]
jreversepro.revengine.JBranchTable =====> [ void addRetPc(int retPc), void sort(), void add(JBranchEntry ent), List startsWith(int aInsIndex), void addGotoEntry(int startPc, int targetPc), String doesMonitorBegin(int monitorBeginPc), JInstruction findGotoIns(List byteIns, int start, int end), String branchesToString(), void deleteElse(int startElse), int findGotoTarget(int startPc), JBranchEntry contains(List listBranchEntries, int type), void addSwitch(JSwitchTable switchEntry), void addTryBlocks(List excTryTable), boolean isJSRTarget(int currPc), void identifyMoreBranches(), void addMonitorPc(int aMonitorPc, String aMonObject), void JBranchTable(JMethod method), void addJSRPc(int targetPc), void setTables(List aBranches), Map getGotoTable() ]
jreversepro.revengine.JCaseComparator =====> [ int compare(Object o1, Object o2) ]
jreversepro.revengine.JCaseEntry =====> [ void setTarget(int targetPc), void JCaseEntry(), List getValues(), int getTarget(), String disAssemble(), void JCaseEntry(String name, int targetPc), int getEndTarget(), void addValue(String name), void setEndTarget(int endTarget) ]
jreversepro.revengine.JCollatingTable =====> [ List getEffectiveBranches(), void sort(), void collate(), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), int convertToObjects(), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), void JCollatingTable(JMethod method), void identifyWhileLoops(Map mapGotos) ]
jreversepro.revengine.JDecompiler =====> [ void genCode(), void genSource(), int getLastInsPos(), int getLastIns(), JSymbolTable getSymbolTable(), void setLastIns(int li), JCollatingTable loadBranchTable(), void loadSymbolTable(), void setLastInsPos(int lip), void closeCatchBranch(int closeIndex), void processJVMInstruction(JInstruction ins, JRunTimeContext context), JRunTimeContext createRuntimeContext(), void addCatchBranch(int insIndex, JBranchEntry brent), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo) ]
jreversepro.revengine.JDisAssembler =====> [ void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void genCode(), void dealDefault(StringBuffer assembly, JInstruction thisIns) ]
jreversepro.revengine.JReverseEngineer =====> [ void genCode(), void genSource(), void dealDefault(StringBuffer assembly, JInstruction thisIns), int getLastInsPos(), int getLastIns(), JSymbolTable getSymbolTable(), void setLastIns(int li), JCollatingTable loadBranchTable(), void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void loadSymbolTable(), void setLastInsPos(int lip), void closeCatchBranch(int closeIndex), void processJVMInstruction(JInstruction ins, JRunTimeContext context), JRunTimeContext createRuntimeContext(), void addCatchBranch(int insIndex, JBranchEntry brent), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo) ]
jreversepro.revengine.JSerializer =====> [ JClassInfo loadClass(URL url), JClassInfo loadClass(File file) ]
jreversepro.revengine.JSwitchTable =====> [ List getCases(), String disassemble(), void processData(Map gotos), void createLookupSwitch(byte[] entries, int offset, Map gotos), JBranchEntry getBranchEntry(), void addCaseEntry(JCaseEntry caseEntry), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), int getDefaultByte(), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void createTableSwitch(byte[] entries, int offset, Map gotos), void setTypeValue(String rhsType, String rhsValue) ]
jreversepro.revengine.RevEngineException =====> [ void RevEngineException(String msg), void RevEngineException(String msg, Exception ex) ]
jreversepro.runtime.JLocalEntry =====> [ void setLastReferredIndex(int index), void setDeclarationType(String aType), void JLocalEntry(int aVarIndex, int aStoreIndex, String datatype, String aName, boolean aDeclared), String getName(), int getStoreIndex(), int getVarIndex(), int getLastReferredIndex(), String getDeclarationType(), boolean isDeclared(), void setName(String name), void declareVariable(), boolean reassignType(String datatype) ]
jreversepro.runtime.JOperandStack =====> [ void JOperandStack(), String topDatatype(), boolean isTopDatatypeForeign(), void removeAllConstants(), void push(int value, String datatype, int precedence), String getConstantValues(), void mergeTopTwo(), void addConstant(String constant), void push(String value, String datatype, int precedence), List getConstants() ]
jreversepro.runtime.JRunTimeContext =====> [ void getEndStmt(int insIndex), JOperandStack getOperandStack(), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), JBranchEntry getImmediateOuterLoop(), void pushControlEntry(JBranchEntry newent), void validatePairings(JBranchEntry ent), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void addTextCode(String txt), void processBreakContinue(int startPc, int targetPc), void setBlockWrittenFlag(), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void executeInstruction(JInstruction ins), void getFinalBlockStmt() ]
jreversepro.runtime.JRunTimeFrame =====> [ void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void dealIntegerStore(String popValue, int intIndex, int insIndex), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), String getOpr2(), void opr32to53(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), Operand getInvokedObject(), void operateStack(JInstruction thisIns, JOperandStack myStack), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void opr54to86(JInstruction thisIns, JOperandStack myStack), String getArgValues(List args, List argValues), String getOpr1(), void opr87to100(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), String getStatement() ]
jreversepro.runtime.JSymbolTable =====> [ List getKeyWordsList(), void addReference(int aVarIndex, String aDatatype, int aIndex), JLocalEntry getMatchingEntry(int aVarIndex, int aInsIndex), void JSymbolTable(JMethod rhsMethod, JImport imports), String declare(int aVarIndex, int aInsIndex), String getDataType(int aVarIndex, int aInsIndex), int getMaxSymbols(), void assignDataType(int aVarIndex, String aDatatype, int aVarStore, boolean aDeclared), String genName(String aType, int aVarIndex), void touchVariable(String aVarName, String aNewType), String getName(int aVarIndex, int aInsIndex), void addEntry(int aVarIndex, int aStoreIndex, String aDatatype, boolean aDeclared), void loadSymbols(List aArgs, int startIndex), List defineVariable(int endOfBranch), String genUniqueName(String name, int aVarIndex) ]
jreversepro.runtime.Operand =====> [ String getValueEx(int precedence), String getDatatype(), String getValue(), void Operand(String value, String datatype, int precedence), void Operand(int value, String datatype, int precedence), int getPrecedence(), boolean isCategory1() ]
jreversepro.runtime.OperandConstants =====> [ void JOperandStack(), void setOpr2(String opr2), void appendStartBlockStmtX(JDecompiler decomp), void opr172to186(JInstruction thisIns, JOperandStack myStack), void genSource(), void opr187to201(JInstruction thisIns, JOperandStack myStack), void complementOperator(), int getTargetPc(), void Operand(String value, String datatype, int precedence), int getEndBlockPc(), void setEndBlockPc(int aNewPc), boolean isWhile(), int getPrecedence(), boolean isTopDatatypeForeign(), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), int getStartBlockPc(), int getStartExecPc(), void resetWrittenFlag(), String getValue(), String getCondition(boolean complement), boolean isCategory1(), void setType(int type), void setTargetPc(int targetPc), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), boolean independent(), boolean doesContain(int aPc), void dealIntegerStore(String popValue, int intIndex, int insIndex), void removeAllConstants(), void opr32to53(JInstruction thisIns, JOperandStack myStack), void Operand(int value, String datatype, int precedence), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void setLastIns(int li), JCollatingTable loadBranchTable(), List getConstants(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), int getNextPc(), void operateStack(JInstruction thisIns, JOperandStack myStack), void setStartPc(int startPc), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void opr54to86(JInstruction thisIns, JOperandStack myStack), void closeCatchBranch(int closeIndex), void opr202to255(JInstruction thisIns, JOperandStack myStack), void addCatchBranch(int insIndex, JBranchEntry brent), void mergeTopTwo(), String getValueEx(int precedence), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void genCode(), void opr0to31(JInstruction thisIns, JOperandStack myStack), String getComplementOperator(String rhs), String getOpr2(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), String getConstantValues(), JSymbolTable getSymbolTable(), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void loadSymbolTable(), void setNextPc(int nextPc), void push(int value, String datatype, int precedence), void setWrittenFlag(), String getOpr1(), String getStatement(), String getExpression(), void convertToWhile(), int getStartPc(), void setOpr1(String opr1), void opr148to171(JInstruction thisIns, JOperandStack myStack), String getDatatype(), int getLastInsPos(), int getLastIns(), boolean doesStartWith(int rhsStartPc), void addConstant(String constant), void push(String value, String datatype, int precedence), String topDatatype(), void setLastInsPos(int lip), Operand getInvokedObject(), String getArgValues(List args, List argValues), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void opr87to100(JInstruction thisIns, JOperandStack myStack), boolean collate(), JRunTimeContext createRuntimeContext(), int getType(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo) ]
jreversepro.tester.TestBase =====> [ void test(Class classtotest), Class getOriginalClass(), void init(), void log(String message), Class getNewClass(), void teardown(), TestContext getContext(), int invokeInt(Object o, String method), void setContext(TestContext context), void test(Class c), String getClassName() ]
jreversepro.tester.TestContext =====> [ String getCompileDir(), String getTestClassDir(), void TestContext(String testclassdir, String compiledir) ]
jreversepro.tester.TestHelper =====> [ boolean compile(String rootdir, String javafile), void decompile(String classfile, String javafile), Class loadClass(String dir, String classname) ]
jreversepro.tester.TestMain =====> [ void runTest(TestContext context, Class tester), void main(String[] args) ]
jreversepro.tester.tests.TestSimpleReturns =====> [ void test(Class c), String getClassName() ]

Done building lattice!
NODE_0[[jreversepro.JAwtFrame, jreversepro.JCmdMain, jreversepro.JMainFrame, jreversepro.awtui.JClassEditPanel, jreversepro.awtui.JCustomFileChooser, jreversepro.awtui.JCustomListPanel, jreversepro.awtui.JDlgAbout, jreversepro.awtui.JDlgFont, jreversepro.awtui.JErrorDlg, jreversepro.awtui.JJavaDocumentEditor, jreversepro.awtui.MainMenu, jreversepro.common.AppConstants, jreversepro.common.Helper, jreversepro.common.JJvmOpcodes, jreversepro.common.JJvmSet, jreversepro.common.KeyWords, jreversepro.gui.ConfirmCloseDialog, jreversepro.gui.FontSet, jreversepro.gui.JClassEditPanel, jreversepro.gui.JCpDialog, jreversepro.gui.JCustomFileChooser, jreversepro.gui.JCustomListPanel, jreversepro.gui.JDlgAbout, jreversepro.gui.JDlgFont, jreversepro.gui.JErrorDlg, jreversepro.gui.JJavaDocumentEditor, jreversepro.gui.JLookFeelMenu, jreversepro.gui.JPoolTable, jreversepro.gui.JPoolTableModel, jreversepro.gui.JStatusPanel, jreversepro.gui.MainMenu, jreversepro.parser.ClassParserException, jreversepro.parser.JAttribute, jreversepro.parser.JClassParser, jreversepro.reflect.JClassInfo, jreversepro.reflect.JConstantPool, jreversepro.reflect.JConstantPoolEntry, jreversepro.reflect.JException, jreversepro.reflect.JField, jreversepro.reflect.JImport, jreversepro.reflect.JInstruction, jreversepro.reflect.JLineOfCode, jreversepro.reflect.JMember, jreversepro.reflect.JMethod, jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JCaseBlock, jreversepro.reflect.method.JCatchBlock, jreversepro.reflect.method.JDoWhileBlock, jreversepro.reflect.method.JElseBlock, jreversepro.reflect.method.JElseIfBlock, jreversepro.reflect.method.JFinallyBlock, jreversepro.reflect.method.JForBlock, jreversepro.reflect.method.JIfBlock, jreversepro.reflect.method.JMethodBlock, jreversepro.reflect.method.JSwitchBlock, jreversepro.reflect.method.JSynchBlock, jreversepro.reflect.method.JTryBlock, jreversepro.revengine.BranchConstants, jreversepro.revengine.JBranchComparator, jreversepro.revengine.JBranchEntry, jreversepro.revengine.JBranchTable, jreversepro.revengine.JCaseComparator, jreversepro.revengine.JCaseEntry, jreversepro.revengine.JCollatingTable, jreversepro.revengine.JDecompiler, jreversepro.revengine.JDisAssembler, jreversepro.revengine.JReverseEngineer, jreversepro.revengine.JSerializer, jreversepro.revengine.JSwitchTable, jreversepro.revengine.RevEngineException, jreversepro.runtime.JLocalEntry, jreversepro.runtime.JOperandStack, jreversepro.runtime.JRunTimeContext, jreversepro.runtime.JRunTimeFrame, jreversepro.runtime.JSymbolTable, jreversepro.runtime.Operand, jreversepro.runtime.OperandConstants, jreversepro.tester.TestBase, jreversepro.tester.TestContext, jreversepro.tester.TestHelper, jreversepro.tester.TestMain, jreversepro.tester.tests.TestSimpleReturns],[]]
ITS CHILDREN:=================
	->NODE_1[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.JSwitchTable],[JBranchEntry getBranchEntry(), List getCases(), String disassemble(), int getDefaultByte(), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void addCaseEntry(JCaseEntry caseEntry), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createTableSwitch(byte[] entries, int offset, Map gotos), void processData(Map gotos), void setTypeValue(String rhsType, String rhsValue)]]
	->ITS CHILDREN:=================
	->	->NODE_2[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords],[JBranchEntry getBranchEntry(), JCollatingTable loadBranchTable(), JInstruction next(), JInstruction prev(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getCases(), Operand getInvokedObject(), String disassemble(), String getArgValues(List args, List argValues), String getConditionalOperator(), String getInsName(), String getOpr1(), String getOpr2(), String getStatement(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isInvokeIns(), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getDefaultByte(), int getLastIns(), int getLastInsPos(), int getLength(), int getNextIndex(), int getOffset(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int isStoreInstruction(), int referredVariable(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void addCaseEntry(JCaseEntry caseEntry), void addCatchBranch(int insIndex, JBranchEntry brent), void append(JInstruction rhsNext), void closeCatchBranch(int closeIndex), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createTableSwitch(byte[] entries, int offset, Map gotos), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processData(Map gotos), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void setTypeValue(String rhsType, String rhsValue), void sort()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[[jreversepro.common.KeyWords],[JBlockObject removeCurrentBlock(), JBranchEntry getBranchEntry(), JBranchEntry getImmediateOuterLoop(), JClassInfo loadClass(File file), JClassInfo loadClass(URL url), JCollatingTable loadBranchTable(), JConstantPool getConstantPool(), JImport getImportedClasses(), JInstruction getFirstIns(), JInstruction getInstruction(int ind), JInstruction getNextInstruction(int ind), JInstruction next(), JInstruction prev(), JLineNumberTable getLineTable(), JLineOfCode removeLastLineOfCode(), JLocalEntry getMatchingEntry(int aVarIndex, int aInsIndex), JMethodBlock getBlock(), JOperandStack getOperandStack(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List defineVariable(int endOfBranch), List getArgList(), List getArguments(String aSignature), List getCases(), List getConstants(), List getEffectiveBranches(), List getEntries(), List getFields(), List getInstructions(), List getInterfaces(), List getKeyWordsList(), List getMethods(), List getThrowsClasses(), List getValues(), List getexceptionBlocks(), Map getAllCatchJExceptions(), Operand getInvokedObject(), String declare(int aVarIndex, int aInsIndex), String disAssemble(), String disassemble(), String genName(String aType, int aVarIndex), String genUniqueName(String name, int aVarIndex), String getAccessString(), String getArgValues(List args, List argValues), String getAtomicValue(String value, String datatype), String getBasicDataTypeValue(int index), String getClassName(int index), String getComplementOperator(String rhs), String getCondition(boolean complement), String getConditionalOperator(), String getConstantValues(), String getCpValue(int index), String getDataType(int aVarIndex, int aInsIndex), String getDataType(int index), String getEntryCode(), String getEntryInfo(), String getEntryInfo(int cpIndex), String getExitCode(), String getExpression(), String getFieldName(int index), String getFieldType(int index), String getFirstDirectName(int index), String getInsName(), String getJavaDataType(String aDataType, boolean associated), String getLdcString(int index), String getLocalStackInfo(), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), String getMethodHeader(boolean includeStackInfo), String getName(JConstantPoolEntry ent), String getName(int aVarIndex, int aInsIndex), String getOpr1(), String getOpr2(), String getPackageName(String aFullName), String getPathName(), String getReturnType(), String getReturnType(String aSignature), String getSecondDirectName(int index), String getSignature(), String getSourceFile(), String getStatement(), String getStringifiedBytecode(), String getStringifiedClass(boolean getBytecode), String getStringifiedClass(boolean getBytecode, boolean includeMetadata), String getStringifiedMethods(boolean getBytecode, boolean includeMetadata), String getSuperClass(), String getTagDescriptor(int index), String getTagName(int tagByte), String getThisClass(), String getThisClass(boolean fullyQualified), String getThrowsClause(JImport importInfo), String getType(JConstantPoolEntry ent), String getUtf8String(int index), String getValue(String value, String datatype), String lowNbits(String aValue, int aNumBits), String replaceEscapeChars(String aLiteral), String representChar(char aChar), String topDatatype(), StringBuffer getHeaders(), StringBuffer getPackageImports(), StringBuffer getStringifiedFields(), StringBuffer getStringifiedInterfaces(), StringBuffer getThisSuperClasses(), StringBuffer writeArgs(List aArgs, JImport aImports), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isBasicType(String type), boolean isClass(), boolean isDebug(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isInvokeIns(), boolean isStatic(), boolean isTagDouble(int index), boolean isTopDatatypeForeign(), boolean isWhile(), boolean toggleDebug(), boolean versionCheck(), byte[] getArgArray(int start, int end), byte[] getBytes(), int convertToObjects(), int dealLookupSwitch(int index), int dealTableSwitch(int index), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getDefaultByte(), int getEndBlockPc(), int getEndTarget(), int getLastIns(), int getLastInsPos(), int getLength(), int getMajor(), int getMaxCpEntry(), int getMaxLocals(), int getMaxStack(), int getMaxSymbols(), int getMinor(), int getNextIndex(), int getNextPc(), int getOffset(), int getPtr1(int index), int getPtr2(int index), int getSignTokenLength(String aDataType), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTagByte(int index), int getTarget(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int getType(), int isStoreInstruction(), int readTargetSwitch(int newIndex), int referredVariable(), int signedToUnsigned(int aByteVal), void Helper(), void JAwtFrame(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JCaseBlock(JBranchEntry _jbe, String _expr), void JCaseEntry(), void JCaseEntry(String name, int targetPc), void JClassInfo(), void JCollatingTable(JMethod method), void JConstantPool(int cpMax), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void JMainFrame(), void JMethod(JClassInfo info), void JOperandStack(), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void JSymbolTable(JMethod rhsMethod, JImport imports), void addBlock(JBlockObject jbo), void addCaseEntry(JCaseEntry caseEntry), void addCatchBranch(int insIndex, JBranchEntry brent), void addClassEntry(int classIndex), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void addConstant(String constant), void addDoubleEntry(String value), void addEntry(int aVarIndex, int aStoreIndex, String aDatatype, boolean aDeclared), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), void addField(JField rhsField), void addFieldRefEntry(int ptr1, int ptr2), void addFloatEntry(String value), void addIntegerEntry(String value), void addInterface(String interfaceName), void addInterfaceRefEntry(int ptr1, int ptr2), void addLineOfCode(JLineOfCode loc), void addListeners(), void addLongEntry(String value), void addMethod(JMethod rhsMethod), void addMethodRefEntry(int ptr1, int ptr2), void addNameTypeEntry(int ptr1, int ptr2), void addNullEntry(), void addReference(int aVarIndex, String aDatatype, int aIndex), void addStringEntry(int stringIndex), void addTextCode(String txt), void addUtf8Entry(String value), void addValue(String name), void appClose(), void append(JInstruction rhsNext), void appendStartBlockStmtX(JDecompiler decomp), void assignDataType(int aVarIndex, String aDatatype, int aVarStore, boolean aDeclared), void closeBlock(), void closeCatchBranch(int closeIndex), void collate(), void complementOperator(), void convertToWhile(), void copyText(), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createTableSwitch(byte[] entries, int offset, Map gotos), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void executeInstruction(JInstruction ins), void formatTitle(String aFileName), void genCode(), void genSource(), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void getSingleEntryInfo(StringBuffer sb, int cpIndex), void identifyWhileLoops(Map mapGotos), void initAppState(), void loadSymbolTable(), void loadSymbols(List aArgs, int startIndex), void log(Exception ex), void log(String logMsg), void logNoEol(String logMsg), void main(String[] aArgs), void mergeTopTwo(), void normalize(), void openFile(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processBreakContinue(int startPc, int targetPc), void processData(Map gotos), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void processMethods(boolean getBytecode), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void pushControlEntry(JBranchEntry newent), void removeAllConstants(), void resetWrittenFlag(), void reverseEngineer(File aFile), void reverseEngineer(boolean getBytecode), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void saveFile(), void saveProperties(), void setAccess(int rhsAccess), void setBlockWrittenFlag(), void setBytes(byte[] bytecodes), void setConstantPool(JConstantPool cpInfo), void setEndBlockPc(int aNewPc), void setEndTarget(int endTarget), void setLastIns(int li), void setLastInsPos(int lip), void setLineTable(JLineNumberTable rhsLineTable), void setMajorMinor(short rhsMajor, short rhsMinor), void setMaxLocals(int maxLocals), void setMaxStack(int maxStack), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setPackageName(String packageName), void setPathName(String classPath), void setSignature(String rhsSign), void setSourceFile(String rhsSrcFile), void setStartPc(int startPc), void setStringifiedBytecode(String str), void setSuperClass(String rhsName), void setSymbolTable(JSymbolTable st), void setTarget(int targetPc), void setTargetPc(int targetPc), void setThisClass(String rhsName), void setThrowsClasses(List throwsClasses), void setType(int type), void setTypeValue(String rhsType, String rhsValue), void setWrittenFlag(), void showAbout(), void showFontDialog(), void sort(), void touchVariable(String aVarName, String aNewType), void validatePairings(JBranchEntry ent), void viewPool(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_4[[],[Class getNewClass(), Class getOriginalClass(), Class loadClass(String dir, String classname), Enumeration getHandlers(), Font getChosenFont(), Font getEditorFont(), JBlockObject getBlock(), JBlockObject removeCurrentBlock(), JBranchEntry contains(List listBranchEntries, int type), JBranchEntry getBranchEntry(), JBranchEntry getImmediateOuterLoop(), JClassInfo getClassInfo(), JClassInfo loadClass(File file), JClassInfo loadClass(String inputFile), JClassInfo loadClass(URL url), JCollatingTable loadBranchTable(), JConstantPool getConstantPool(), JConstantPool getCpInfo(), JImport getImportedClasses(), JInstruction findGotoIns(List byteIns, int start, int end), JInstruction getFirstIns(), JInstruction getInstruction(int ind), JInstruction getNextInstruction(int ind), JInstruction next(), JInstruction prev(), JLineNumberTable getLineTable(), JLineOfCode getEntryLineOfCode(), JLineOfCode getExitLineOfCode(), JLineOfCode removeLastLineOfCode(), JLineOfCode removeLastStatement(), JLocalEntry getMatchingEntry(int aVarIndex, int aInsIndex), JMethodBlock getBlock(), JOperandStack getOperandStack(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List defineVariable(int endOfBranch), List getArgList(), List getArguments(String aSignature), List getCases(), List getConstants(), List getEffectiveBranches(), List getEntries(), List getFields(), List getInstructions(), List getInterfaces(), List getKeyWordsList(), List getMethods(), List getThrowsClasses(), List getValues(), List getexceptionBlocks(), List manipExceptions(DataInputStream aDis, JConstantPool aCpInfo), List startsWith(int aInsIndex), Map getAllCatchJExceptions(), Map getGotoTable(), Object fillPtr1(int Index), Object fillPtr2(int Index), Object fillTagByte(int Index), Object fillValue(int Index), Object[] getFontObjects(), Object[] getFonts(), Operand getInvokedObject(), String branchesToString(), String declare(int aVarIndex, int aInsIndex), String disAssemble(), String disassemble(), String doesMonitorBegin(int monitorBeginPc), String genName(String aType, int aVarIndex), String genUniqueName(String name, int aVarIndex), String getAccessString(), String getAppLookAndFeel(), String getArgValues(List args, List argValues), String getAtomicValue(String value, String datatype), String getBasicDataTypeValue(int index), String getClassName(), String getClassName(String fullQualifiedName), String getClassName(int index), String getCompileDir(), String getComplementOperator(String rhs), String getCondition(boolean complement), String getConditionalOperator(), String getConstantValues(), String getCpValue(int index), String getDataType(int aVarIndex, int aInsIndex), String getDataType(int index), String getDatatype(), String getDeclarationType(), String getEntryCode(), String getEntryInfo(), String getEntryInfo(int cpIndex), String getExceptionClass(int rhsHandlerPc), String getExitCode(), String getExpression(), String getFieldName(int index), String getFieldType(int index), String getFirstDirectName(int index), String getImportClasses(String packageName), String getIns(int index), String getInsName(), String getJavaDataType(String aDataType, boolean associated), String getLdcString(int index), String getLocalStackInfo(), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), String getMethodHeader(boolean includeStackInfo), String getName(), String getName(JConstantPoolEntry ent), String getName(int aVarIndex, int aInsIndex), String getOpr1(), String getOpr2(), String getPackageName(String aFullName), String getPathName(), String getQualifierName(), String getReturnType(), String getReturnType(String aSignature), String getSecondDirectName(int index), String getSignature(), String getSourceFile(), String getStackTrace(Exception _ex), String getStatement(), String getStmt(), String getStringRep(int rhsQualifier, boolean memberOnly), String getStringifiedBytecode(), String getStringifiedClass(boolean getBytecode), String getStringifiedClass(boolean getBytecode, boolean includeMetadata), String getStringifiedMethods(boolean getBytecode, boolean includeMetadata), String getSuperClass(), String getTagDescriptor(int index), String getTagName(int tagByte), String getTestClassDir(), String getThisClass(), String getThisClass(boolean fullyQualified), String getThrowsClause(JImport importInfo), String getType(JConstantPoolEntry ent), String getUtf8String(int index), String getValue(), String getValue(String value, String datatype), String getValueEx(int precedence), String getViz(), String lowNbits(String aValue, int aNumBits), String manipConstantValue(DataInputStream aDis, JConstantPool aCpInfo), String manipSourceFile(DataInputStream aDis, JConstantPool aCpInfo), String replaceEscapeChars(String aLiteral), String representChar(char aChar), String toString(String _indent), String toString(String indent), String toString(String indent, boolean debug), String topDatatype(), StringBuffer getHeaders(), StringBuffer getPackageImports(), StringBuffer getStringifiedFields(), StringBuffer getStringifiedInterfaces(), StringBuffer getThisSuperClasses(), StringBuffer writeArgs(List aArgs, JImport aImports), TestContext getContext(), Vector getFlattenedCode(String _indent), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), boolean collate(), boolean compile(String rootdir, String javafile), boolean confirmExit(JFrame aAppFrame), boolean confirmOverwrite(Frame aParent, File aOutputFile), boolean confirmOverwrite(JFrame aParent, File aOutputFile), boolean containsANYCatchBlock(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isAny(), boolean isBasicType(String type), boolean isCategory1(), boolean isClass(), boolean isDebug(), boolean isDeclared(), boolean isDecoration(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isEntryCode(), boolean isExitCode(), boolean isFinal(), boolean isInBlockCode(), boolean isInvokeIns(), boolean isJSRTarget(int currPc), boolean isSimpleBlock(), boolean isStatic(), boolean isTagDouble(int index), boolean isTopDatatypeForeign(), boolean isWhile(), boolean process(JClassInfo infoClass, String cmd), boolean reassignType(String datatype), boolean removeLastBlock(), boolean sameTryBlock(JException exc), boolean supportedMajorMinor(short major, short minor), boolean toggleDebug(), boolean versionCheck(), boolean writeToFile(Frame aParent, File aOutputFile), boolean writeToFile(JFrame aParent, File aOutputFile), byte[] getArgArray(int start, int end), byte[] getBytes(), int compare(Object o1, Object o2), int convertToObjects(), int dealLookupSwitch(int index), int dealTableSwitch(int index), int findGotoTarget(int startPc), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getCpIndex(), int getDefaultByte(), int getEffectiveEndPc(List instructions), int getEnd(), int getEndBlockPc(), int getEndPc(), int getEndTarget(), int getFromIndex(), int getInsLen(int index, boolean wide), int getLastIns(), int getLastInsPos(), int getLastReferredIndex(), int getLength(), int getMajor(), int getMaxCpEntry(), int getMaxLocals(), int getMaxStack(), int getMaxSymbols(), int getMinor(), int getNextIndex(), int getNextPc(), int getOffset(), int getPrecedence(), int getPtr1(), int getPtr1(int index), int getPtr2(), int getPtr2(int index), int getQualifier(), int getSignTokenLength(String aDataType), int getStart(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getState(), int getStoreIndex(), int getTagByte(), int getTagByte(int index), int getTarget(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int getToIndex(), int getType(), int getVarIndex(), int invokeInt(Object o, String method), int isStoreInstruction(), int readTargetSwitch(int newIndex), int referredVariable(), int showChooser(JFrame aParent, String aSelectButton), int showFontDialog(), int signedToUnsigned(int aByteVal), void ClassParserException(String aMsg), void ClassParserException(StringBuffer aMsg), void FontSet(Font[] FontList), void Helper(), void JAwtFrame(), void JBlockObject(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JBranchTable(JMethod method), void JCaseBlock(JBranchEntry _jbe, String _expr), void JCaseEntry(), void JCaseEntry(String name, int targetPc), void JCatchBlock(JBranchEntry _jbe, String _cls, String _var), void JClassEditPanel(), void JClassInfo(), void JCollatingTable(JMethod method), void JConstantPool(int cpMax), void JConstantPoolEntry(int tagByte, String value, int ptr1, int ptr2), void JCpDialog(JFrame aParent, String aClassName, JConstantPool aCpInfo), void JCustomFileChooser(Frame parent, String aTitle, String aFileExtension, String aDir, int mode), void JCustomFileChooser(String aDir, String aDescription, String aExtension, String aToolTipText), void JCustomListPanel(int aMaxEntries), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JDlgAbout(Frame aParent, String aTitle), void JDlgAbout(JFrame aParent, String aTitle), void JDlgFont(Frame owner, String title), void JDoWhileBlock(JBranchEntry _jbe), void JDoWhileBlock(JBranchEntry _jbe, String _var1, String _oper, String _var2), void JElseBlock(JBranchEntry _jbe), void JElseIfBlock(JBranchEntry _jbe, String _expr), void JErrorDlg(Frame parent, String FileName, Exception _ex), void JErrorDlg(JFrame parent, String FileName, Exception _ex), void JException(int rhsStart, int rhsEnd, int rhsHandler, String rhsType), void JField(), void JFinallyBlock(JBranchEntry _jbe), void JForBlock(JBranchEntry _jbe, String _init, String _test, String _loop), void JForBlock(JBranchEntry _jbe, String _test), void JIfBlock(JBranchEntry _jbe, String _expr), void JImport(), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void JJavaDocumentEditor(), void JJvmSet(), void JLineOfCode(String stmt, JBlockObject jbo, int state), void JLineOfCode(int sbo, int ebo, int fromI, int toI, String stmt), void JLocalEntry(int aVarIndex, int aStoreIndex, String datatype, String aName, boolean aDeclared), void JLookFeelMenu(JFrame thisFrame), void JLookFeelMenu(String title, JFrame thisFrame), void JMainFrame(), void JMethod(JClassInfo info), void JMethodBlock(), void JOperandStack(), void JPoolTable(JConstantPool RhsCpInfo), void JPoolTableModel(JConstantPool RhsCpInfo), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void JStatusPanel(), void JSwitchBlock(JBranchEntry _jbe, String _expr), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void JSymbolTable(JMethod rhsMethod, JImport imports), void JSynchBlock(JBranchEntry _jbe, String _var), void JTryBlock(JBranchEntry _jbe), void MainMenu(Frame owner), void MainMenu(JFrame owner), void Operand(String value, String datatype, int precedence), void Operand(int value, String datatype, int precedence), void RevEngineException(String msg), void RevEngineException(String msg, Exception ex), void TestContext(String testclassdir, String compiledir), void add(JBranchEntry ent), void addBlock(JBlockObject _jbo), void addBlock(JBlockObject jbo), void addCaseEntry(JCaseEntry caseEntry), void addCatchBlock(int rhsHandlerPc, String rhsType), void addCatchBranch(int insIndex, JBranchEntry brent), void addClass(String importClass), void addClassEntry(int classIndex), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addComponents(), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void addConstant(String constant), void addDoubleEntry(String value), void addEntry(int aVarIndex, int aStoreIndex, String aDatatype, boolean aDeclared), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), void addField(JField rhsField), void addFieldRefEntry(int ptr1, int ptr2), void addFloatEntry(String value), void addGotoEntry(int startPc, int targetPc), void addIntegerEntry(String value), void addInterface(String interfaceName), void addInterfaceRefEntry(int ptr1, int ptr2), void addJSRPc(int targetPc), void addLineOfCode(JLineOfCode loc), void addListeners(), void addLongEntry(String value), void addLookAndFeelListeners(), void addMethod(JMethod rhsMethod), void addMethodRefEntry(int ptr1, int ptr2), void addMonitorPc(int aMonitorPc, String aMonObject), void addNameTypeEntry(int ptr1, int ptr2), void addNullEntry(), void addReference(int aVarIndex, String aDatatype, int aIndex), void addRetPc(int retPc), void addStatement(JLineOfCode _loc), void addStringEntry(int stringIndex), void addSwitch(JSwitchTable switchEntry), void addTextCode(String txt), void addTryBlocks(List excTryTable), void addUtf8Entry(String value), void addValue(String name), void appClose(), void append(JInstruction rhsNext), void appendStartBlockStmtX(JDecompiler decomp), void assign0(), void assign1(), void assign10(), void assign11(), void assign12(), void assign13(), void assign14(), void assign2(), void assign3(), void assign4(), void assign5(), void assign6(), void assign7(), void assign8(), void assign9(), void assignDataType(int aVarIndex, String aDatatype, int aVarStore, boolean aDeclared), void closeBlock(), void closeCatchBranch(int closeIndex), void collate(), void complementOperator(), void convertToWhile(), void copyText(), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createModel(JFrame aParent, String aFileName, List aChildren), void createTableSwitch(byte[] entries, int offset, Map gotos), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void dealDefault(StringBuffer assembly, JInstruction thisIns), void dealIntegerStore(String popValue, int intIndex, int insIndex), void declareVariable(), void decompile(String classfile, String javafile), void deleteElse(int startElse), void executeInstruction(JInstruction ins), void fillFontObjects(), void fillSuperClass(), void fillThisClass(), void findText(), void formatTitle(String aFileName), void genCode(), void genSource(), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void getSingleEntryInfo(StringBuffer sb, int cpIndex), void gotoIndex(int aTargetIndex), void identifyMoreBranches(), void identifyWhileLoops(Map mapGotos), void init(), void initAppState(), void initColumnNames(), void initMenuItems(), void listen(JClassInfo infoClass, String inputFile), void loadSymbolTable(), void loadSymbols(List aArgs, int startIndex), void log(Exception ex), void log(String logMsg), void log(String message), void logNoEol(String logMsg), void main(String[] aArgs), void main(String[] args), void manipCode(DataInputStream aDis, JMethod aLocalMethod, JConstantPool aCpInfo), void manipDeprecated(DataInputStream aDis), void manipLineNumberTable(DataInputStream aDis), void manipLocalVariableTable(DataInputStream aDis), void manipSynthetic(DataInputStream aDis), void mergeTopTwo(), void normalize(), void openFile(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void parse(ByteArrayInputStream is, String pathToClass), void parse(File aFile), void parse(InputStream is, int length, String pathToClass), void parse(URL url), void parse(byte[] bytes), void process(String[] args), void processBreakContinue(int startPc, int targetPc), void processData(Map gotos), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void processMethods(boolean getBytecode), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void pushControlEntry(JBranchEntry newent), void readAccess(), void readAttributes(), void readClassAttributes(), void readCodeAttributes(DataInputStream aDis, JConstantPool aCpInfo), void readConstantPool(), void readCpEntries(int aNumEntry), void readFieldAttributes(JField aRhsField), void readFields(), void readInterfaces(), void readMagic(), void readMethodAttributes(JMethod aRhsMethod), void readMethods(), void readTagClass(int aIndex), void readTagDouble(int aIndex), void readTagFieldRef(int aIndex), void readTagFloat(int aIndex), void readTagInteger(int aIndex), void readTagInterfaceRef(int aIndex), void readTagLong(int aIndex), void readTagMethodRef(int aIndex), void readTagNameType(int aIndex), void readTagString(int aIndex), void readTagUtf8(int aIndex), void readVersion(), void removeAllConstants(), void resetWrittenFlag(), void reverseEngineer(File aFile), void reverseEngineer(boolean getBytecode), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void runTest(TestContext context, Class tester), void saveFile(), void saveProperties(), void setAccess(int rhsAccess), void setAppLookAndFeel(String Rhs), void setBlock(JBlockObject jbo), void setBlockWrittenFlag(), void setBytes(byte[] bytecodes), void setConstantPool(JConstantPool cpInfo), void setContext(TestContext context), void setDatatype(String rhsType), void setDeclarationType(String aType), void setDefaultLookAndFeel(), void setEditorFont(Font aFont), void setEnd(int e), void setEndBlockPc(int aNewPc), void setEndTarget(int endTarget), void setFlag(String Rhs), void setFromIndex(int f), void setInitExpr(String _init), void setLastIns(int li), void setLastInsPos(int lip), void setLastReferredIndex(int index), void setLineTable(JLineNumberTable rhsLineTable), void setLoopExpr(String _loop), void setMajorMinor(short rhsMajor, short rhsMinor), void setMaxLocals(int maxLocals), void setMaxStack(int maxStack), void setMetal_LF(), void setMotif_LF(), void setName(String name), void setName(String rhsName), void setNextPc(int nextPc), void setOper(String _oper), void setOpr1(String opr1), void setOpr2(String opr2), void setPackageName(String packageName), void setPathName(String classPath), void setQualifier(int rhsQualify), void setSignature(String rhsSign), void setSourceFile(String rhsSrcFile), void setStart(int s), void setStartPc(int startPc), void setState(int s), void setStmt(String s), void setStringifiedBytecode(String str), void setSuperClass(String rhsName), void setSymbolTable(JSymbolTable st), void setTables(List aBranches), void setTarget(int targetPc), void setTargetPc(int targetPc), void setTestExpr(String _test), void setThisClass(String rhsName), void setThrowsClasses(List throwsClasses), void setToIndex(int t), void setType(int type), void setTypeValue(String rhsType, String rhsValue), void setValue(String rhsValue), void setVar1(String _var1), void setVar2(String _var2), void setViz(String v), void setWin_LF(), void setWrittenFlag(), void showAbout(), void showFontDialog(), void sort(), void teardown(), void test(Class c), void test(Class classtotest), void touchVariable(String aVarName, String aNewType), void validatePairings(JBranchEntry ent), void viewPool(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void writeCode(String aCode), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	->	->	->NODE_5[[jreversepro.common.JJvmOpcodes],[JBranchEntry contains(List listBranchEntries, int type), JBranchEntry getBranchEntry(), JCollatingTable loadBranchTable(), JInstruction findGotoIns(List byteIns, int start, int end), JInstruction next(), JInstruction prev(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getCases(), List startsWith(int aInsIndex), Map getGotoTable(), Operand getInvokedObject(), String branchesToString(), String disassemble(), String doesMonitorBegin(int monitorBeginPc), String getArgValues(List args, List argValues), String getConditionalOperator(), String getIns(int index), String getInsName(), String getOpr1(), String getOpr2(), String getStatement(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isInvokeIns(), boolean isJSRTarget(int currPc), int findGotoTarget(int startPc), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getDefaultByte(), int getInsLen(int index, boolean wide), int getLastIns(), int getLastInsPos(), int getLength(), int getNextIndex(), int getOffset(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int isStoreInstruction(), int referredVariable(), void JBranchTable(JMethod method), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void JJvmSet(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void add(JBranchEntry ent), void addCaseEntry(JCaseEntry caseEntry), void addCatchBranch(int insIndex, JBranchEntry brent), void addGotoEntry(int startPc, int targetPc), void addJSRPc(int targetPc), void addMonitorPc(int aMonitorPc, String aMonObject), void addRetPc(int retPc), void addSwitch(JSwitchTable switchEntry), void addTryBlocks(List excTryTable), void append(JInstruction rhsNext), void assign0(), void assign1(), void assign10(), void assign11(), void assign12(), void assign13(), void assign14(), void assign2(), void assign3(), void assign4(), void assign5(), void assign6(), void assign7(), void assign8(), void assign9(), void closeCatchBranch(int closeIndex), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createTableSwitch(byte[] entries, int offset, Map gotos), void dealDefault(StringBuffer assembly, JInstruction thisIns), void dealIntegerStore(String popValue, int intIndex, int insIndex), void deleteElse(int startElse), void genCode(), void genSource(), void identifyMoreBranches(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processData(Map gotos), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void setTables(List aBranches), void setTypeValue(String rhsType, String rhsValue), void sort()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_4[...,...]
	->NODE_6[[jreversepro.gui.JPoolTable],[void JPoolTable(JConstantPool RhsCpInfo)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_7[[jreversepro.reflect.JImport],[String getClassName(String fullQualifiedName), String getImportClasses(String packageName), void JImport(), void addClass(String importClass)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_8[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.reflect.JInstruction, jreversepro.revengine.BranchConstants, jreversepro.revengine.JBranchEntry, jreversepro.runtime.OperandConstants],[int getTargetPc()]]
	->ITS CHILDREN:=================
	->	->NODE_9[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.reflect.JInstruction],[JInstruction next(), JInstruction prev(), String getConditionalOperator(), String getInsName(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isInvokeIns(), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getLength(), int getNextIndex(), int getOffset(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int isStoreInstruction(), int referredVariable(), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void append(JInstruction rhsNext)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_2[...,...]
	->	->NODE_10[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.revengine.JBranchEntry, jreversepro.runtime.OperandConstants],[String getOpr1(), int getTargetPc()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_11[[jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.revengine.JBranchEntry, jreversepro.runtime.OperandConstants],[String getComplementOperator(String rhs), String getCondition(boolean complement), String getExpression(), String getOpr1(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isWhile(), int getEndBlockPc(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void appendStartBlockStmtX(JDecompiler decomp), void complementOperator(), void convertToWhile(), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setEndBlockPc(int aNewPc), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_12[[jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isWhile(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_13[[jreversepro.common.KeyWords, jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getConstants(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getConstantValues(), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), String topDatatype(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isTopDatatypeForeign(), boolean isWhile(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JOperandStack(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void addConstant(String constant), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void mergeTopTwo(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void removeAllConstants(), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_14[[jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getConstants(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getConstantValues(), String getDatatype(), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), String getValue(), String getValueEx(int precedence), String topDatatype(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isCategory1(), boolean isTopDatatypeForeign(), boolean isWhile(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getPrecedence(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JOperandStack(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void Operand(String value, String datatype, int precedence), void Operand(int value, String datatype, int precedence), void addCatchBranch(int insIndex, JBranchEntry brent), void addConstant(String constant), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void mergeTopTwo(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void removeAllConstants(), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB)]]
	->	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->	->NODE_4[...,...]
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->	->	->NODE_15[[jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants],[JBranchEntry getImmediateOuterLoop(), JCollatingTable loadBranchTable(), JOperandStack getOperandStack(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getEffectiveBranches(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isWhile(), int convertToObjects(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JCollatingTable(JMethod method), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void addTextCode(String txt), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void collate(), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void executeInstruction(JInstruction ins), void genCode(), void genSource(), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void identifyWhileLoops(Map mapGotos), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processBreakContinue(int startPc, int targetPc), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void pushControlEntry(JBranchEntry newent), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setBlockWrittenFlag(), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void sort(), void validatePairings(JBranchEntry ent), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->	->	->	->NODE_16[[jreversepro.revengine.BranchConstants],[JBranchEntry contains(List listBranchEntries, int type), JBranchEntry getImmediateOuterLoop(), JCollatingTable loadBranchTable(), JInstruction findGotoIns(List byteIns, int start, int end), JOperandStack getOperandStack(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getEffectiveBranches(), List startsWith(int aInsIndex), Map getGotoTable(), Operand getInvokedObject(), String branchesToString(), String doesMonitorBegin(int monitorBeginPc), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isJSRTarget(int currPc), boolean isWhile(), int convertToObjects(), int findGotoTarget(int startPc), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JBranchTable(JMethod method), void JCollatingTable(JMethod method), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void add(JBranchEntry ent), void addCatchBranch(int insIndex, JBranchEntry brent), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void addGotoEntry(int startPc, int targetPc), void addJSRPc(int targetPc), void addMonitorPc(int aMonitorPc, String aMonObject), void addRetPc(int retPc), void addSwitch(JSwitchTable switchEntry), void addTextCode(String txt), void addTryBlocks(List excTryTable), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void collate(), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void deleteElse(int startElse), void executeInstruction(JInstruction ins), void genCode(), void genSource(), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void identifyMoreBranches(), void identifyWhileLoops(Map mapGotos), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processBreakContinue(int startPc, int targetPc), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void pushControlEntry(JBranchEntry newent), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setBlockWrittenFlag(), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTables(List aBranches), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void sort(), void validatePairings(JBranchEntry ent), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	->	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->	->NODE_4[...,...]
	->	->	->NODE_17[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), int getLastIns(), int getLastInsPos(), int getTargetPc(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_18[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), int getLastIns(), int getLastInsPos(), int getTargetPc(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void sort()]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_19[[jreversepro.common.JJvmOpcodes, jreversepro.revengine.BranchConstants],[JBranchEntry contains(List listBranchEntries, int type), JCollatingTable loadBranchTable(), JInstruction findGotoIns(List byteIns, int start, int end), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List startsWith(int aInsIndex), Map getGotoTable(), Operand getInvokedObject(), String branchesToString(), String doesMonitorBegin(int monitorBeginPc), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), boolean isJSRTarget(int currPc), int findGotoTarget(int startPc), int getLastIns(), int getLastInsPos(), int getTargetPc(), void JBranchTable(JMethod method), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void add(JBranchEntry ent), void addCatchBranch(int insIndex, JBranchEntry brent), void addGotoEntry(int startPc, int targetPc), void addJSRPc(int targetPc), void addMonitorPc(int aMonitorPc, String aMonObject), void addRetPc(int retPc), void addSwitch(JSwitchTable switchEntry), void addTryBlocks(List excTryTable), void closeCatchBranch(int closeIndex), void dealIntegerStore(String popValue, int intIndex, int insIndex), void deleteElse(int startElse), void genCode(), void genSource(), void identifyMoreBranches(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void setTables(List aBranches), void sort()]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_16[...,...]
	->	->	->	->	->	->NODE_5[...,...]
	->	->	->	->	->NODE_15[...,...]
	->	->	->	->	->NODE_2[...,...]
	->	->	->	->NODE_12[...,...]
	->NODE_20[[jreversepro.common.KeyWords, jreversepro.reflect.JMember, jreversepro.reflect.JMethod],[JBlockObject removeCurrentBlock(), JInstruction getFirstIns(), JInstruction getInstruction(int ind), JInstruction getNextInstruction(int ind), JLineNumberTable getLineTable(), JLineOfCode removeLastLineOfCode(), JMethodBlock getBlock(), List getArgList(), List getInstructions(), List getThrowsClasses(), List getexceptionBlocks(), Map getAllCatchJExceptions(), String getLocalStackInfo(), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), String getMethodHeader(boolean includeStackInfo), String getReturnType(), String getSignature(), String getStringifiedBytecode(), String getThrowsClause(JImport importInfo), boolean isStatic(), byte[] getArgArray(int start, int end), byte[] getBytes(), int dealLookupSwitch(int index), int dealTableSwitch(int index), int getMaxLocals(), int getMaxStack(), int readTargetSwitch(int newIndex), void JMethod(JClassInfo info), void addBlock(JBlockObject jbo), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), void addLineOfCode(JLineOfCode loc), void closeBlock(), void normalize(), void setBytes(byte[] bytecodes), void setLineTable(JLineNumberTable rhsLineTable), void setMaxLocals(int maxLocals), void setMaxStack(int maxStack), void setSignature(String rhsSign), void setStringifiedBytecode(String str), void setSymbolTable(JSymbolTable st), void setThrowsClasses(List throwsClasses)]]
	->ITS CHILDREN:=================
	->	->NODE_21[[jreversepro.reflect.JMember],[JBlockObject removeCurrentBlock(), JInstruction getFirstIns(), JInstruction getInstruction(int ind), JInstruction getNextInstruction(int ind), JLineNumberTable getLineTable(), JLineOfCode removeLastLineOfCode(), JMethodBlock getBlock(), List getArgList(), List getInstructions(), List getThrowsClasses(), List getexceptionBlocks(), Map getAllCatchJExceptions(), String getDatatype(), String getLocalStackInfo(), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), String getMethodHeader(boolean includeStackInfo), String getName(), String getQualifierName(), String getReturnType(), String getSignature(), String getStringRep(int rhsQualifier, boolean memberOnly), String getStringifiedBytecode(), String getThrowsClause(JImport importInfo), String getValue(), boolean isFinal(), boolean isStatic(), byte[] getArgArray(int start, int end), byte[] getBytes(), int dealLookupSwitch(int index), int dealTableSwitch(int index), int getMaxLocals(), int getMaxStack(), int getQualifier(), int readTargetSwitch(int newIndex), void JField(), void JMethod(JClassInfo info), void addBlock(JBlockObject jbo), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), void addLineOfCode(JLineOfCode loc), void closeBlock(), void normalize(), void setBytes(byte[] bytecodes), void setDatatype(String rhsType), void setLineTable(JLineNumberTable rhsLineTable), void setMaxLocals(int maxLocals), void setMaxStack(int maxStack), void setName(String rhsName), void setQualifier(int rhsQualify), void setSignature(String rhsSign), void setStringifiedBytecode(String str), void setSymbolTable(JSymbolTable st), void setThrowsClasses(List throwsClasses), void setValue(String rhsValue)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->	->NODE_3[...,...]
	->NODE_22[[jreversepro.gui.FontSet],[Object[] getFonts(), void FontSet(Font[] FontList)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_23[[jreversepro.awtui.JDlgAbout, jreversepro.common.AppConstants],[void JDlgAbout(Frame aParent, String aTitle)]]
	->ITS CHILDREN:=================
	->	->NODE_24[[jreversepro.common.AppConstants],[JClassInfo getClassInfo(), JClassInfo loadClass(String inputFile), JConstantPool getCpInfo(), StringBuffer writeArgs(List aArgs, JImport aImports), boolean process(JClassInfo infoClass, String cmd), boolean supportedMajorMinor(short major, short minor), void JAwtFrame(), void JDlgAbout(Frame aParent, String aTitle), void JDlgAbout(JFrame aParent, String aTitle), void JMainFrame(), void addListeners(), void appClose(), void copyText(), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void fillSuperClass(), void fillThisClass(), void formatTitle(String aFileName), void initAppState(), void listen(JClassInfo infoClass, String inputFile), void main(String[] aArgs), void openFile(), void parse(ByteArrayInputStream is, String pathToClass), void parse(File aFile), void parse(InputStream is, int length, String pathToClass), void parse(URL url), void parse(byte[] bytes), void process(String[] args), void readAccess(), void readAttributes(), void readClassAttributes(), void readConstantPool(), void readCpEntries(int aNumEntry), void readFieldAttributes(JField aRhsField), void readFields(), void readInterfaces(), void readMagic(), void readMethodAttributes(JMethod aRhsMethod), void readMethods(), void readTagClass(int aIndex), void readTagDouble(int aIndex), void readTagFieldRef(int aIndex), void readTagFloat(int aIndex), void readTagInteger(int aIndex), void readTagInterfaceRef(int aIndex), void readTagLong(int aIndex), void readTagMethodRef(int aIndex), void readTagNameType(int aIndex), void readTagString(int aIndex), void readTagUtf8(int aIndex), void readVersion(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_25[[jreversepro.gui.JLookFeelMenu],[String getAppLookAndFeel(), void JLookFeelMenu(JFrame thisFrame), void JLookFeelMenu(String title, JFrame thisFrame), void addLookAndFeelListeners(), void setAppLookAndFeel(String Rhs), void setDefaultLookAndFeel(), void setMetal_LF(), void setMotif_LF(), void setWin_LF()]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_26[[jreversepro.gui.JPoolTableModel],[Object fillPtr1(int Index), Object fillPtr2(int Index), Object fillTagByte(int Index), Object fillValue(int Index), void JPoolTableModel(JConstantPool RhsCpInfo), void initColumnNames()]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_27[[jreversepro.common.AppConstants, jreversepro.parser.JClassParser],[JClassInfo getClassInfo(), JConstantPool getCpInfo(), boolean supportedMajorMinor(short major, short minor), void fillSuperClass(), void fillThisClass(), void parse(ByteArrayInputStream is, String pathToClass), void parse(File aFile), void parse(InputStream is, int length, String pathToClass), void parse(URL url), void parse(byte[] bytes), void readAccess(), void readAttributes(), void readClassAttributes(), void readConstantPool(), void readCpEntries(int aNumEntry), void readFieldAttributes(JField aRhsField), void readFields(), void readInterfaces(), void readMagic(), void readMethodAttributes(JMethod aRhsMethod), void readMethods(), void readTagClass(int aIndex), void readTagDouble(int aIndex), void readTagFieldRef(int aIndex), void readTagFloat(int aIndex), void readTagInteger(int aIndex), void readTagInterfaceRef(int aIndex), void readTagLong(int aIndex), void readTagMethodRef(int aIndex), void readTagNameType(int aIndex), void readTagString(int aIndex), void readTagUtf8(int aIndex), void readVersion()]]
	->ITS CHILDREN:=================
	->	->NODE_24[...,...]
	->NODE_28[[jreversepro.parser.ClassParserException],[void ClassParserException(String aMsg), void ClassParserException(StringBuffer aMsg)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_29[[jreversepro.tester.TestContext],[String getCompileDir(), String getTestClassDir(), void TestContext(String testclassdir, String compiledir)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_30[[jreversepro.common.KeyWords, jreversepro.reflect.JException, jreversepro.revengine.BranchConstants, jreversepro.revengine.JBranchEntry, jreversepro.runtime.OperandConstants],[int getStartPc()]]
	->ITS CHILDREN:=================
	->	->NODE_11[...,...]
	->	->NODE_31[[jreversepro.reflect.JException],[Enumeration getHandlers(), String getExceptionClass(int rhsHandlerPc), boolean containsANYCatchBlock(), boolean isAny(), boolean sameTryBlock(JException exc), int getEffectiveEndPc(List instructions), int getEndPc(), int getStartPc(), void JException(int rhsStart, int rhsEnd, int rhsHandler, String rhsType), void addCatchBlock(int rhsHandlerPc, String rhsType)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_32[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.revengine.JDecompiler, jreversepro.revengine.JDisAssembler, jreversepro.revengine.JReverseEngineer, jreversepro.runtime.OperandConstants],[void genCode()]]
	->ITS CHILDREN:=================
	->	->NODE_33[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.revengine.JDecompiler, jreversepro.revengine.JReverseEngineer, jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), int getLastIns(), int getLastInsPos(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void genCode(), void genSource(), void loadSymbolTable(), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_34[[jreversepro.common.JJvmOpcodes, jreversepro.revengine.JReverseEngineer],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), int getLastIns(), int getLastInsPos(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void dealDefault(StringBuffer assembly, JInstruction thisIns), void genCode(), void genSource(), void loadSymbolTable(), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_5[...,...]
	->	->	->NODE_17[...,...]
	->	->NODE_35[[jreversepro.common.JJvmOpcodes, jreversepro.revengine.JDisAssembler, jreversepro.revengine.JReverseEngineer],[void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void dealDefault(StringBuffer assembly, JInstruction thisIns), void genCode()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_34[...,...]
	->NODE_36[[jreversepro.gui.JStatusPanel],[void JStatusPanel()]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_37[[jreversepro.tester.TestHelper],[Class loadClass(String dir, String classname), boolean compile(String rootdir, String javafile), void decompile(String classfile, String javafile)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_38[[jreversepro.gui.JCpDialog],[int getCpIndex(), void JCpDialog(JFrame aParent, String aClassName, JConstantPool aCpInfo), void findText(), void gotoIndex(int aTargetIndex)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_39[[jreversepro.JAwtFrame, jreversepro.JCmdMain, jreversepro.JMainFrame, jreversepro.common.AppConstants, jreversepro.common.KeyWords],[void main(String[] aArgs)]]
	->ITS CHILDREN:=================
	->	->NODE_40[[jreversepro.JCmdMain, jreversepro.common.AppConstants],[JClassInfo loadClass(String inputFile), boolean process(JClassInfo infoClass, String cmd), void listen(JClassInfo infoClass, String inputFile), void main(String[] aArgs), void process(String[] args)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_24[...,...]
	->	->NODE_41[[jreversepro.JAwtFrame, jreversepro.JMainFrame, jreversepro.common.AppConstants, jreversepro.common.KeyWords],[void addListeners(), void appClose(), void copyText(), void cutText(), void formatTitle(String aFileName), void initAppState(), void main(String[] aArgs), void openFile(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_42[[jreversepro.JMainFrame, jreversepro.common.AppConstants, jreversepro.common.KeyWords],[StringBuffer writeArgs(List aArgs, JImport aImports), void JMainFrame(), void addListeners(), void appClose(), void copyText(), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void formatTitle(String aFileName), void initAppState(), void main(String[] aArgs), void openFile(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_43[[jreversepro.common.AppConstants, jreversepro.common.KeyWords],[StringBuffer writeArgs(List aArgs, JImport aImports), void JAwtFrame(), void JMainFrame(), void addListeners(), void appClose(), void copyText(), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void formatTitle(String aFileName), void initAppState(), void main(String[] aArgs), void openFile(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_3[...,...]
	->	->	->	->	->NODE_24[...,...]
	->	->	->NODE_44[[jreversepro.JAwtFrame, jreversepro.common.AppConstants, jreversepro.common.KeyWords],[void JAwtFrame(), void addListeners(), void appClose(), void copyText(), void cutText(), void formatTitle(String aFileName), void initAppState(), void main(String[] aArgs), void openFile(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_43[...,...]
	->NODE_45[[jreversepro.common.KeyWords, jreversepro.revengine.JSerializer],[JClassInfo loadClass(File file), JClassInfo loadClass(URL url)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_46[[jreversepro.gui.JCustomFileChooser],[int showChooser(JFrame aParent, String aSelectButton), void JCustomFileChooser(String aDir, String aDescription, String aExtension, String aToolTipText)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_47[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.revengine.JBranchTable, jreversepro.revengine.JCollatingTable],[void sort()]]
	->ITS CHILDREN:=================
	->	->NODE_18[...,...]
	->	->NODE_48[[jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.revengine.JCollatingTable],[List getEffectiveBranches(), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), int convertToObjects(), void JCollatingTable(JMethod method), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void collate(), void identifyWhileLoops(Map mapGotos), void sort()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_15[...,...]
	->	->NODE_49[[jreversepro.common.JJvmOpcodes, jreversepro.revengine.BranchConstants, jreversepro.revengine.JBranchTable],[JBranchEntry contains(List listBranchEntries, int type), JInstruction findGotoIns(List byteIns, int start, int end), List startsWith(int aInsIndex), Map getGotoTable(), String branchesToString(), String doesMonitorBegin(int monitorBeginPc), boolean isJSRTarget(int currPc), int findGotoTarget(int startPc), void JBranchTable(JMethod method), void add(JBranchEntry ent), void addGotoEntry(int startPc, int targetPc), void addJSRPc(int targetPc), void addMonitorPc(int aMonitorPc, String aMonObject), void addRetPc(int retPc), void addSwitch(JSwitchTable switchEntry), void addTryBlocks(List excTryTable), void deleteElse(int startElse), void identifyMoreBranches(), void setTables(List aBranches), void sort()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_19[...,...]
	->NODE_50[[jreversepro.tester.TestBase, jreversepro.tester.tests.TestSimpleReturns],[String getClassName(), void test(Class c)]]
	->ITS CHILDREN:=================
	->	->NODE_51[[jreversepro.tester.TestBase],[Class getNewClass(), Class getOriginalClass(), String getClassName(), TestContext getContext(), int invokeInt(Object o, String method), void init(), void log(String message), void setContext(TestContext context), void teardown(), void test(Class c), void test(Class classtotest)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_52[[jreversepro.reflect.JLineOfCode],[JBlockObject getBlock(), String getStmt(), String getViz(), String toString(String indent), String toString(String indent, boolean debug), boolean isDecoration(), boolean isEntryCode(), boolean isExitCode(), boolean isInBlockCode(), int getEnd(), int getFromIndex(), int getStart(), int getState(), int getToIndex(), void JLineOfCode(String stmt, JBlockObject jbo, int state), void JLineOfCode(int sbo, int ebo, int fromI, int toI, String stmt), void setBlock(JBlockObject jbo), void setEnd(int e), void setFromIndex(int f), void setStart(int s), void setState(int s), void setStmt(String s), void setToIndex(int t), void setViz(String v)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_53[[jreversepro.awtui.JCustomFileChooser],[void JCustomFileChooser(Frame parent, String aTitle, String aFileExtension, String aDir, int mode)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_54[[jreversepro.common.JJvmOpcodes, jreversepro.common.JJvmSet],[String getIns(int index), int getInsLen(int index, boolean wide), void JJvmSet(), void assign0(), void assign1(), void assign10(), void assign11(), void assign12(), void assign13(), void assign14(), void assign2(), void assign3(), void assign4(), void assign5(), void assign6(), void assign7(), void assign8(), void assign9()]]
	->ITS CHILDREN:=================
	->	->NODE_5[...,...]
	->NODE_55[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.revengine.JBranchEntry, jreversepro.runtime.JRunTimeFrame, jreversepro.runtime.OperandConstants],[String getOpr1()]]
	->ITS CHILDREN:=================
	->	->NODE_56[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.runtime.JRunTimeFrame, jreversepro.runtime.OperandConstants],[Operand getInvokedObject(), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void dealIntegerStore(String popValue, int intIndex, int insIndex), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_17[...,...]
	->	->NODE_10[...,...]
	->NODE_57[[jreversepro.awtui.JCustomListPanel, jreversepro.awtui.JErrorDlg, jreversepro.gui.JCustomListPanel, jreversepro.gui.JErrorDlg],[void addComponents()]]
	->ITS CHILDREN:=================
	->	->NODE_58[[jreversepro.awtui.JErrorDlg, jreversepro.gui.JErrorDlg],[String getStackTrace(Exception _ex), void addComponents()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_59[[jreversepro.gui.JErrorDlg],[String getStackTrace(Exception _ex), void JErrorDlg(JFrame parent, String FileName, Exception _ex), void addComponents()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_4[...,...]
	->	->	->NODE_60[[jreversepro.awtui.JErrorDlg],[String getStackTrace(Exception _ex), void JErrorDlg(Frame parent, String FileName, Exception _ex), void addComponents()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_4[...,...]
	->	->NODE_61[[jreversepro.awtui.JCustomListPanel, jreversepro.gui.JCustomListPanel],[void JCustomListPanel(int aMaxEntries), void addComponents()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_62[[jreversepro.common.KeyWords, jreversepro.revengine.JCaseEntry],[List getValues(), String disAssemble(), int getEndTarget(), int getTarget(), void JCaseEntry(), void JCaseEntry(String name, int targetPc), void addValue(String name), void setEndTarget(int endTarget), void setTarget(int targetPc)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_63[[jreversepro.awtui.MainMenu, jreversepro.gui.MainMenu],[void initMenuItems(), void setFlag(String Rhs)]]
	->ITS CHILDREN:=================
	->	->NODE_64[[jreversepro.gui.MainMenu],[void MainMenu(JFrame owner), void initMenuItems(), void setFlag(String Rhs)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->	->NODE_65[[jreversepro.awtui.MainMenu],[void MainMenu(Frame owner), void initMenuItems(), void setFlag(String Rhs)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_66[[jreversepro.parser.JAttribute],[List manipExceptions(DataInputStream aDis, JConstantPool aCpInfo), String manipConstantValue(DataInputStream aDis, JConstantPool aCpInfo), String manipSourceFile(DataInputStream aDis, JConstantPool aCpInfo), void manipCode(DataInputStream aDis, JMethod aLocalMethod, JConstantPool aCpInfo), void manipDeprecated(DataInputStream aDis), void manipLineNumberTable(DataInputStream aDis), void manipLocalVariableTable(DataInputStream aDis), void manipSynthetic(DataInputStream aDis), void readCodeAttributes(DataInputStream aDis, JConstantPool aCpInfo)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_67[[jreversepro.reflect.JConstantPoolEntry, jreversepro.reflect.JField, jreversepro.reflect.JMember, jreversepro.runtime.Operand, jreversepro.runtime.OperandConstants],[String getValue()]]
	->ITS CHILDREN:=================
	->	->NODE_68[[jreversepro.reflect.JField, jreversepro.reflect.JMember],[String getValue(), void JField(), void setValue(String rhsValue)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_21[...,...]
	->	->NODE_69[[jreversepro.reflect.JMember, jreversepro.runtime.Operand, jreversepro.runtime.OperandConstants],[String getDatatype(), String getValue()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_70[[jreversepro.runtime.Operand, jreversepro.runtime.OperandConstants],[String getDatatype(), String getValue(), String getValueEx(int precedence), boolean isCategory1(), int getPrecedence(), void Operand(String value, String datatype, int precedence), void Operand(int value, String datatype, int precedence)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_14[...,...]
	->	->	->NODE_21[...,...]
	->	->NODE_71[[jreversepro.reflect.JConstantPoolEntry],[String getValue(), int getPtr1(), int getPtr2(), int getTagByte(), void JConstantPoolEntry(int tagByte, String value, int ptr1, int ptr2)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_72[[jreversepro.common.Helper, jreversepro.common.KeyWords],[List getArguments(String aSignature), String getAtomicValue(String value, String datatype), String getJavaDataType(String aDataType, boolean associated), String getPackageName(String aFullName), String getReturnType(String aSignature), String getValue(String value, String datatype), String lowNbits(String aValue, int aNumBits), String replaceEscapeChars(String aLiteral), String representChar(char aChar), boolean isBasicType(String type), boolean isDebug(), boolean toggleDebug(), boolean versionCheck(), int getSignTokenLength(String aDataType), int signedToUnsigned(int aByteVal), void Helper(), void log(Exception ex), void log(String logMsg), void logNoEol(String logMsg)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_73[[jreversepro.common.KeyWords, jreversepro.runtime.JOperandStack, jreversepro.runtime.OperandConstants],[List getConstants(), String getConstantValues(), String topDatatype(), boolean isTopDatatypeForeign(), void JOperandStack(), void addConstant(String constant), void mergeTopTwo(), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void removeAllConstants()]]
	->ITS CHILDREN:=================
	->	->NODE_13[...,...]
	->NODE_74[[jreversepro.common.KeyWords, jreversepro.reflect.JClassInfo],[JConstantPool getConstantPool(), List getFields(), List getInterfaces(), List getMethods(), String getAccessString(), String getPathName(), String getSourceFile(), String getStringifiedClass(boolean getBytecode), String getStringifiedClass(boolean getBytecode, boolean includeMetadata), String getStringifiedMethods(boolean getBytecode, boolean includeMetadata), String getSuperClass(), String getThisClass(), String getThisClass(boolean fullyQualified), StringBuffer getHeaders(), StringBuffer getPackageImports(), StringBuffer getStringifiedFields(), StringBuffer getStringifiedInterfaces(), StringBuffer getThisSuperClasses(), boolean isClass(), int getMajor(), int getMinor(), void JClassInfo(), void addField(JField rhsField), void addInterface(String interfaceName), void addMethod(JMethod rhsMethod), void processMethods(boolean getBytecode), void reverseEngineer(boolean getBytecode), void setAccess(int rhsAccess), void setConstantPool(JConstantPool cpInfo), void setMajorMinor(short rhsMajor, short rhsMinor), void setPackageName(String packageName), void setPathName(String classPath), void setSourceFile(String rhsSrcFile), void setSuperClass(String rhsName), void setThisClass(String rhsName)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_75[[jreversepro.awtui.JJavaDocumentEditor, jreversepro.gui.JJavaDocumentEditor],[void JJavaDocumentEditor()]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_76[[jreversepro.gui.ConfirmCloseDialog],[boolean confirmExit(JFrame aAppFrame)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_77[[jreversepro.revengine.JBranchComparator, jreversepro.revengine.JCaseComparator],[int compare(Object o1, Object o2)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_78[[jreversepro.revengine.RevEngineException],[void RevEngineException(String msg), void RevEngineException(String msg, Exception ex)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_79[[jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.runtime.JRunTimeContext],[JBranchEntry getImmediateOuterLoop(), JOperandStack getOperandStack(), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addTextCode(String txt), void executeInstruction(JInstruction ins), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void processBreakContinue(int startPc, int targetPc), void pushControlEntry(JBranchEntry newent), void setBlockWrittenFlag(), void validatePairings(JBranchEntry ent), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	->ITS CHILDREN:=================
	->	->NODE_15[...,...]
	->NODE_80[[jreversepro.common.AppConstants, jreversepro.gui.JDlgAbout],[void JDlgAbout(JFrame aParent, String aTitle)]]
	->ITS CHILDREN:=================
	->	->NODE_24[...,...]
	->NODE_81[[jreversepro.common.KeyWords, jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JCaseBlock, jreversepro.reflect.method.JCatchBlock, jreversepro.reflect.method.JDoWhileBlock, jreversepro.reflect.method.JElseBlock, jreversepro.reflect.method.JElseIfBlock, jreversepro.reflect.method.JFinallyBlock, jreversepro.reflect.method.JForBlock, jreversepro.reflect.method.JIfBlock, jreversepro.reflect.method.JMethodBlock, jreversepro.reflect.method.JSwitchBlock, jreversepro.reflect.method.JSynchBlock, jreversepro.reflect.method.JTryBlock],[String getEntryCode(), String getExitCode()]]
	->ITS CHILDREN:=================
	->	->NODE_82[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JElseBlock],[String getEntryCode(), String getExitCode(), void JElseBlock(JBranchEntry _jbe)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[[jreversepro.reflect.method.JBlockObject],[JLineOfCode getEntryLineOfCode(), JLineOfCode getExitLineOfCode(), JLineOfCode removeLastStatement(), String getEntryCode(), String getExitCode(), String toString(String _indent), Vector getFlattenedCode(String _indent), boolean isSimpleBlock(), boolean removeLastBlock(), void JBlockObject(), void JCaseBlock(JBranchEntry _jbe, String _expr), void JCatchBlock(JBranchEntry _jbe, String _cls, String _var), void JDoWhileBlock(JBranchEntry _jbe), void JDoWhileBlock(JBranchEntry _jbe, String _var1, String _oper, String _var2), void JElseBlock(JBranchEntry _jbe), void JElseIfBlock(JBranchEntry _jbe, String _expr), void JFinallyBlock(JBranchEntry _jbe), void JForBlock(JBranchEntry _jbe, String _init, String _test, String _loop), void JForBlock(JBranchEntry _jbe, String _test), void JIfBlock(JBranchEntry _jbe, String _expr), void JMethodBlock(), void JSwitchBlock(JBranchEntry _jbe, String _expr), void JSynchBlock(JBranchEntry _jbe, String _var), void JTryBlock(JBranchEntry _jbe), void addBlock(JBlockObject _jbo), void addStatement(JLineOfCode _loc), void setInitExpr(String _init), void setLoopExpr(String _loop), void setOper(String _oper), void setTestExpr(String _test), void setVar1(String _var1), void setVar2(String _var2)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_4[...,...]
	->	->NODE_84[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JElseIfBlock],[String getEntryCode(), String getExitCode(), void JElseIfBlock(JBranchEntry _jbe, String _expr)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_85[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JSwitchBlock],[String getEntryCode(), String getExitCode(), void JSwitchBlock(JBranchEntry _jbe, String _expr)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_86[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JIfBlock],[String getEntryCode(), String getExitCode(), void JIfBlock(JBranchEntry _jbe, String _expr)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_87[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JSynchBlock],[String getEntryCode(), String getExitCode(), void JSynchBlock(JBranchEntry _jbe, String _var)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_88[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JForBlock],[String getEntryCode(), String getExitCode(), void JForBlock(JBranchEntry _jbe, String _init, String _test, String _loop), void JForBlock(JBranchEntry _jbe, String _test), void setInitExpr(String _init), void setLoopExpr(String _loop), void setTestExpr(String _test)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_89[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JDoWhileBlock],[String getEntryCode(), String getExitCode(), void JDoWhileBlock(JBranchEntry _jbe), void JDoWhileBlock(JBranchEntry _jbe, String _var1, String _oper, String _var2), void setOper(String _oper), void setVar1(String _var1), void setVar2(String _var2)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_90[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JCatchBlock],[String getEntryCode(), String getExitCode(), void JCatchBlock(JBranchEntry _jbe, String _cls, String _var)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_91[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JTryBlock],[String getEntryCode(), String getExitCode(), void JTryBlock(JBranchEntry _jbe)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_92[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JFinallyBlock],[String getEntryCode(), String getExitCode(), void JFinallyBlock(JBranchEntry _jbe)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_93[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JMethodBlock],[String getEntryCode(), String getExitCode(), void JMethodBlock()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_94[[jreversepro.common.KeyWords, jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JCaseBlock],[String getEntryCode(), String getExitCode(), void JCaseBlock(JBranchEntry _jbe, String _expr)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->	->NODE_3[...,...]
	->NODE_95[[jreversepro.awtui.JClassEditPanel, jreversepro.gui.JClassEditPanel],[Font getEditorFont(), void JClassEditPanel(), void setEditorFont(Font aFont), void writeCode(String aCode)]]
	->ITS CHILDREN:=================
	->	->NODE_96[[jreversepro.gui.JClassEditPanel],[Font getEditorFont(), boolean confirmOverwrite(JFrame aParent, File aOutputFile), boolean writeToFile(JFrame aParent, File aOutputFile), void JClassEditPanel(), void createModel(JFrame aParent, String aFileName, List aChildren), void setEditorFont(Font aFont), void writeCode(String aCode)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->	->NODE_97[[jreversepro.awtui.JClassEditPanel],[Font getEditorFont(), boolean confirmOverwrite(Frame aParent, File aOutputFile), boolean writeToFile(Frame aParent, File aOutputFile), void JClassEditPanel(), void setEditorFont(Font aFont), void writeCode(String aCode)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_98[[jreversepro.awtui.JDlgFont, jreversepro.gui.JDlgFont],[Font getChosenFont(), int showFontDialog(), void JDlgFont(Frame owner, String title)]]
	->ITS CHILDREN:=================
	->	->NODE_99[[jreversepro.awtui.JDlgFont],[Font getChosenFont(), int showFontDialog(), void JDlgFont(Frame owner, String title), void fillFontObjects()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->	->NODE_100[[jreversepro.gui.JDlgFont],[Font getChosenFont(), Object[] getFontObjects(), int showFontDialog(), void JDlgFont(Frame owner, String title)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_101[[jreversepro.tester.TestMain],[void main(String[] args), void runTest(TestContext context, Class tester)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_102[[jreversepro.common.KeyWords, jreversepro.runtime.JSymbolTable],[JLocalEntry getMatchingEntry(int aVarIndex, int aInsIndex), List defineVariable(int endOfBranch), List getKeyWordsList(), String declare(int aVarIndex, int aInsIndex), String genName(String aType, int aVarIndex), String genUniqueName(String name, int aVarIndex), String getDataType(int aVarIndex, int aInsIndex), String getName(int aVarIndex, int aInsIndex), int getMaxSymbols(), void JSymbolTable(JMethod rhsMethod, JImport imports), void addEntry(int aVarIndex, int aStoreIndex, String aDatatype, boolean aDeclared), void addReference(int aVarIndex, String aDatatype, int aIndex), void assignDataType(int aVarIndex, String aDatatype, int aVarStore, boolean aDeclared), void loadSymbols(List aArgs, int startIndex), void touchVariable(String aVarName, String aNewType)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_103[[jreversepro.reflect.JMember, jreversepro.runtime.JLocalEntry],[String getName()]]
	->ITS CHILDREN:=================
	->	->NODE_21[...,...]
	->	->NODE_104[[jreversepro.runtime.JLocalEntry],[String getDeclarationType(), String getName(), boolean isDeclared(), boolean reassignType(String datatype), int getLastReferredIndex(), int getStoreIndex(), int getVarIndex(), void JLocalEntry(int aVarIndex, int aStoreIndex, String datatype, String aName, boolean aDeclared), void declareVariable(), void setDeclarationType(String aType), void setLastReferredIndex(int index), void setName(String name)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_105[[jreversepro.common.KeyWords, jreversepro.reflect.JConstantPool],[JImport getImportedClasses(), List getEntries(), String getBasicDataTypeValue(int index), String getClassName(int index), String getCpValue(int index), String getDataType(int index), String getEntryInfo(), String getEntryInfo(int cpIndex), String getFieldName(int index), String getFieldType(int index), String getFirstDirectName(int index), String getLdcString(int index), String getName(JConstantPoolEntry ent), String getSecondDirectName(int index), String getTagDescriptor(int index), String getTagName(int tagByte), String getType(JConstantPoolEntry ent), String getUtf8String(int index), boolean isTagDouble(int index), int getMaxCpEntry(), int getPtr1(int index), int getPtr2(int index), int getTagByte(int index), void JConstantPool(int cpMax), void addClassEntry(int classIndex), void addDoubleEntry(String value), void addFieldRefEntry(int ptr1, int ptr2), void addFloatEntry(String value), void addIntegerEntry(String value), void addInterfaceRefEntry(int ptr1, int ptr2), void addLongEntry(String value), void addMethodRefEntry(int ptr1, int ptr2), void addNameTypeEntry(int ptr1, int ptr2), void addNullEntry(), void addStringEntry(int stringIndex), void addUtf8Entry(String value), void getSingleEntryInfo(StringBuffer sb, int cpIndex)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
Done printing lattice!
Using complex purge
Printing lattice after purging extents
NODE_0[[jreversepro.JAwtFrame, jreversepro.JCmdMain, jreversepro.JMainFrame, jreversepro.awtui.JClassEditPanel, jreversepro.awtui.JCustomFileChooser, jreversepro.awtui.JCustomListPanel, jreversepro.awtui.JDlgAbout, jreversepro.awtui.JDlgFont, jreversepro.awtui.JErrorDlg, jreversepro.awtui.JJavaDocumentEditor, jreversepro.awtui.MainMenu, jreversepro.common.AppConstants, jreversepro.common.Helper, jreversepro.common.JJvmOpcodes, jreversepro.common.JJvmSet, jreversepro.common.KeyWords, jreversepro.gui.ConfirmCloseDialog, jreversepro.gui.FontSet, jreversepro.gui.JClassEditPanel, jreversepro.gui.JCpDialog, jreversepro.gui.JCustomFileChooser, jreversepro.gui.JCustomListPanel, jreversepro.gui.JDlgAbout, jreversepro.gui.JDlgFont, jreversepro.gui.JErrorDlg, jreversepro.gui.JJavaDocumentEditor, jreversepro.gui.JLookFeelMenu, jreversepro.gui.JPoolTable, jreversepro.gui.JPoolTableModel, jreversepro.gui.JStatusPanel, jreversepro.gui.MainMenu, jreversepro.parser.ClassParserException, jreversepro.parser.JAttribute, jreversepro.parser.JClassParser, jreversepro.reflect.JClassInfo, jreversepro.reflect.JConstantPool, jreversepro.reflect.JConstantPoolEntry, jreversepro.reflect.JException, jreversepro.reflect.JField, jreversepro.reflect.JImport, jreversepro.reflect.JInstruction, jreversepro.reflect.JLineOfCode, jreversepro.reflect.JMember, jreversepro.reflect.JMethod, jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JCaseBlock, jreversepro.reflect.method.JCatchBlock, jreversepro.reflect.method.JDoWhileBlock, jreversepro.reflect.method.JElseBlock, jreversepro.reflect.method.JElseIfBlock, jreversepro.reflect.method.JFinallyBlock, jreversepro.reflect.method.JForBlock, jreversepro.reflect.method.JIfBlock, jreversepro.reflect.method.JMethodBlock, jreversepro.reflect.method.JSwitchBlock, jreversepro.reflect.method.JSynchBlock, jreversepro.reflect.method.JTryBlock, jreversepro.revengine.BranchConstants, jreversepro.revengine.JBranchComparator, jreversepro.revengine.JBranchEntry, jreversepro.revengine.JBranchTable, jreversepro.revengine.JCaseComparator, jreversepro.revengine.JCaseEntry, jreversepro.revengine.JCollatingTable, jreversepro.revengine.JDecompiler, jreversepro.revengine.JDisAssembler, jreversepro.revengine.JReverseEngineer, jreversepro.revengine.JSerializer, jreversepro.revengine.JSwitchTable, jreversepro.revengine.RevEngineException, jreversepro.runtime.JLocalEntry, jreversepro.runtime.JOperandStack, jreversepro.runtime.JRunTimeContext, jreversepro.runtime.JRunTimeFrame, jreversepro.runtime.JSymbolTable, jreversepro.runtime.Operand, jreversepro.runtime.OperandConstants, jreversepro.tester.TestBase, jreversepro.tester.TestContext, jreversepro.tester.TestHelper, jreversepro.tester.TestMain, jreversepro.tester.tests.TestSimpleReturns],[]]
ITS CHILDREN:=================
	->NODE_1[[jreversepro.revengine.JSwitchTable],[JBranchEntry getBranchEntry(), List getCases(), String disassemble(), int getDefaultByte(), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void addCaseEntry(JCaseEntry caseEntry), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createTableSwitch(byte[] entries, int offset, Map gotos), void processData(Map gotos), void setTypeValue(String rhsType, String rhsValue)]]
	->ITS CHILDREN:=================
	->	->NODE_2[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords],[JBranchEntry getBranchEntry(), JCollatingTable loadBranchTable(), JInstruction next(), JInstruction prev(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getCases(), Operand getInvokedObject(), String disassemble(), String getArgValues(List args, List argValues), String getConditionalOperator(), String getInsName(), String getOpr1(), String getOpr2(), String getStatement(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isInvokeIns(), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getDefaultByte(), int getLastIns(), int getLastInsPos(), int getLength(), int getNextIndex(), int getOffset(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int isStoreInstruction(), int referredVariable(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void addCaseEntry(JCaseEntry caseEntry), void addCatchBranch(int insIndex, JBranchEntry brent), void append(JInstruction rhsNext), void closeCatchBranch(int closeIndex), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createTableSwitch(byte[] entries, int offset, Map gotos), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processData(Map gotos), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void setTypeValue(String rhsType, String rhsValue), void sort()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_3[[jreversepro.common.KeyWords],[JBlockObject removeCurrentBlock(), JBranchEntry getBranchEntry(), JBranchEntry getImmediateOuterLoop(), JClassInfo loadClass(File file), JClassInfo loadClass(URL url), JCollatingTable loadBranchTable(), JConstantPool getConstantPool(), JImport getImportedClasses(), JInstruction getFirstIns(), JInstruction getInstruction(int ind), JInstruction getNextInstruction(int ind), JInstruction next(), JInstruction prev(), JLineNumberTable getLineTable(), JLineOfCode removeLastLineOfCode(), JLocalEntry getMatchingEntry(int aVarIndex, int aInsIndex), JMethodBlock getBlock(), JOperandStack getOperandStack(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List defineVariable(int endOfBranch), List getArgList(), List getArguments(String aSignature), List getCases(), List getConstants(), List getEffectiveBranches(), List getEntries(), List getFields(), List getInstructions(), List getInterfaces(), List getKeyWordsList(), List getMethods(), List getThrowsClasses(), List getValues(), List getexceptionBlocks(), Map getAllCatchJExceptions(), Operand getInvokedObject(), String declare(int aVarIndex, int aInsIndex), String disAssemble(), String disassemble(), String genName(String aType, int aVarIndex), String genUniqueName(String name, int aVarIndex), String getAccessString(), String getArgValues(List args, List argValues), String getAtomicValue(String value, String datatype), String getBasicDataTypeValue(int index), String getClassName(int index), String getComplementOperator(String rhs), String getCondition(boolean complement), String getConditionalOperator(), String getConstantValues(), String getCpValue(int index), String getDataType(int aVarIndex, int aInsIndex), String getDataType(int index), String getEntryCode(), String getEntryInfo(), String getEntryInfo(int cpIndex), String getExitCode(), String getExpression(), String getFieldName(int index), String getFieldType(int index), String getFirstDirectName(int index), String getInsName(), String getJavaDataType(String aDataType, boolean associated), String getLdcString(int index), String getLocalStackInfo(), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), String getMethodHeader(boolean includeStackInfo), String getName(JConstantPoolEntry ent), String getName(int aVarIndex, int aInsIndex), String getOpr1(), String getOpr2(), String getPackageName(String aFullName), String getPathName(), String getReturnType(), String getReturnType(String aSignature), String getSecondDirectName(int index), String getSignature(), String getSourceFile(), String getStatement(), String getStringifiedBytecode(), String getStringifiedClass(boolean getBytecode), String getStringifiedClass(boolean getBytecode, boolean includeMetadata), String getStringifiedMethods(boolean getBytecode, boolean includeMetadata), String getSuperClass(), String getTagDescriptor(int index), String getTagName(int tagByte), String getThisClass(), String getThisClass(boolean fullyQualified), String getThrowsClause(JImport importInfo), String getType(JConstantPoolEntry ent), String getUtf8String(int index), String getValue(String value, String datatype), String lowNbits(String aValue, int aNumBits), String replaceEscapeChars(String aLiteral), String representChar(char aChar), String topDatatype(), StringBuffer getHeaders(), StringBuffer getPackageImports(), StringBuffer getStringifiedFields(), StringBuffer getStringifiedInterfaces(), StringBuffer getThisSuperClasses(), StringBuffer writeArgs(List aArgs, JImport aImports), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isBasicType(String type), boolean isClass(), boolean isDebug(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isInvokeIns(), boolean isStatic(), boolean isTagDouble(int index), boolean isTopDatatypeForeign(), boolean isWhile(), boolean toggleDebug(), boolean versionCheck(), byte[] getArgArray(int start, int end), byte[] getBytes(), int convertToObjects(), int dealLookupSwitch(int index), int dealTableSwitch(int index), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getDefaultByte(), int getEndBlockPc(), int getEndTarget(), int getLastIns(), int getLastInsPos(), int getLength(), int getMajor(), int getMaxCpEntry(), int getMaxLocals(), int getMaxStack(), int getMaxSymbols(), int getMinor(), int getNextIndex(), int getNextPc(), int getOffset(), int getPtr1(int index), int getPtr2(int index), int getSignTokenLength(String aDataType), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTagByte(int index), int getTarget(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int getType(), int isStoreInstruction(), int readTargetSwitch(int newIndex), int referredVariable(), int signedToUnsigned(int aByteVal), void Helper(), void JAwtFrame(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JCaseBlock(JBranchEntry _jbe, String _expr), void JCaseEntry(), void JCaseEntry(String name, int targetPc), void JClassInfo(), void JCollatingTable(JMethod method), void JConstantPool(int cpMax), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void JMainFrame(), void JMethod(JClassInfo info), void JOperandStack(), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void JSymbolTable(JMethod rhsMethod, JImport imports), void addBlock(JBlockObject jbo), void addCaseEntry(JCaseEntry caseEntry), void addCatchBranch(int insIndex, JBranchEntry brent), void addClassEntry(int classIndex), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void addConstant(String constant), void addDoubleEntry(String value), void addEntry(int aVarIndex, int aStoreIndex, String aDatatype, boolean aDeclared), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), void addField(JField rhsField), void addFieldRefEntry(int ptr1, int ptr2), void addFloatEntry(String value), void addIntegerEntry(String value), void addInterface(String interfaceName), void addInterfaceRefEntry(int ptr1, int ptr2), void addLineOfCode(JLineOfCode loc), void addListeners(), void addLongEntry(String value), void addMethod(JMethod rhsMethod), void addMethodRefEntry(int ptr1, int ptr2), void addNameTypeEntry(int ptr1, int ptr2), void addNullEntry(), void addReference(int aVarIndex, String aDatatype, int aIndex), void addStringEntry(int stringIndex), void addTextCode(String txt), void addUtf8Entry(String value), void addValue(String name), void appClose(), void append(JInstruction rhsNext), void appendStartBlockStmtX(JDecompiler decomp), void assignDataType(int aVarIndex, String aDatatype, int aVarStore, boolean aDeclared), void closeBlock(), void closeCatchBranch(int closeIndex), void collate(), void complementOperator(), void convertToWhile(), void copyText(), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createTableSwitch(byte[] entries, int offset, Map gotos), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void executeInstruction(JInstruction ins), void formatTitle(String aFileName), void genCode(), void genSource(), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void getSingleEntryInfo(StringBuffer sb, int cpIndex), void identifyWhileLoops(Map mapGotos), void initAppState(), void loadSymbolTable(), void loadSymbols(List aArgs, int startIndex), void log(Exception ex), void log(String logMsg), void logNoEol(String logMsg), void main(String[] aArgs), void mergeTopTwo(), void normalize(), void openFile(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processBreakContinue(int startPc, int targetPc), void processData(Map gotos), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void processMethods(boolean getBytecode), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void pushControlEntry(JBranchEntry newent), void removeAllConstants(), void resetWrittenFlag(), void reverseEngineer(File aFile), void reverseEngineer(boolean getBytecode), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void saveFile(), void saveProperties(), void setAccess(int rhsAccess), void setBlockWrittenFlag(), void setBytes(byte[] bytecodes), void setConstantPool(JConstantPool cpInfo), void setEndBlockPc(int aNewPc), void setEndTarget(int endTarget), void setLastIns(int li), void setLastInsPos(int lip), void setLineTable(JLineNumberTable rhsLineTable), void setMajorMinor(short rhsMajor, short rhsMinor), void setMaxLocals(int maxLocals), void setMaxStack(int maxStack), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setPackageName(String packageName), void setPathName(String classPath), void setSignature(String rhsSign), void setSourceFile(String rhsSrcFile), void setStartPc(int startPc), void setStringifiedBytecode(String str), void setSuperClass(String rhsName), void setSymbolTable(JSymbolTable st), void setTarget(int targetPc), void setTargetPc(int targetPc), void setThisClass(String rhsName), void setThrowsClasses(List throwsClasses), void setType(int type), void setTypeValue(String rhsType, String rhsValue), void setWrittenFlag(), void showAbout(), void showFontDialog(), void sort(), void touchVariable(String aVarName, String aNewType), void validatePairings(JBranchEntry ent), void viewPool(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_4[[],[Class getNewClass(), Class getOriginalClass(), Class loadClass(String dir, String classname), Enumeration getHandlers(), Font getChosenFont(), Font getEditorFont(), JBlockObject getBlock(), JBlockObject removeCurrentBlock(), JBranchEntry contains(List listBranchEntries, int type), JBranchEntry getBranchEntry(), JBranchEntry getImmediateOuterLoop(), JClassInfo getClassInfo(), JClassInfo loadClass(File file), JClassInfo loadClass(String inputFile), JClassInfo loadClass(URL url), JCollatingTable loadBranchTable(), JConstantPool getConstantPool(), JConstantPool getCpInfo(), JImport getImportedClasses(), JInstruction findGotoIns(List byteIns, int start, int end), JInstruction getFirstIns(), JInstruction getInstruction(int ind), JInstruction getNextInstruction(int ind), JInstruction next(), JInstruction prev(), JLineNumberTable getLineTable(), JLineOfCode getEntryLineOfCode(), JLineOfCode getExitLineOfCode(), JLineOfCode removeLastLineOfCode(), JLineOfCode removeLastStatement(), JLocalEntry getMatchingEntry(int aVarIndex, int aInsIndex), JMethodBlock getBlock(), JOperandStack getOperandStack(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List defineVariable(int endOfBranch), List getArgList(), List getArguments(String aSignature), List getCases(), List getConstants(), List getEffectiveBranches(), List getEntries(), List getFields(), List getInstructions(), List getInterfaces(), List getKeyWordsList(), List getMethods(), List getThrowsClasses(), List getValues(), List getexceptionBlocks(), List manipExceptions(DataInputStream aDis, JConstantPool aCpInfo), List startsWith(int aInsIndex), Map getAllCatchJExceptions(), Map getGotoTable(), Object fillPtr1(int Index), Object fillPtr2(int Index), Object fillTagByte(int Index), Object fillValue(int Index), Object[] getFontObjects(), Object[] getFonts(), Operand getInvokedObject(), String branchesToString(), String declare(int aVarIndex, int aInsIndex), String disAssemble(), String disassemble(), String doesMonitorBegin(int monitorBeginPc), String genName(String aType, int aVarIndex), String genUniqueName(String name, int aVarIndex), String getAccessString(), String getAppLookAndFeel(), String getArgValues(List args, List argValues), String getAtomicValue(String value, String datatype), String getBasicDataTypeValue(int index), String getClassName(), String getClassName(String fullQualifiedName), String getClassName(int index), String getCompileDir(), String getComplementOperator(String rhs), String getCondition(boolean complement), String getConditionalOperator(), String getConstantValues(), String getCpValue(int index), String getDataType(int aVarIndex, int aInsIndex), String getDataType(int index), String getDatatype(), String getDeclarationType(), String getEntryCode(), String getEntryInfo(), String getEntryInfo(int cpIndex), String getExceptionClass(int rhsHandlerPc), String getExitCode(), String getExpression(), String getFieldName(int index), String getFieldType(int index), String getFirstDirectName(int index), String getImportClasses(String packageName), String getIns(int index), String getInsName(), String getJavaDataType(String aDataType, boolean associated), String getLdcString(int index), String getLocalStackInfo(), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), String getMethodHeader(boolean includeStackInfo), String getName(), String getName(JConstantPoolEntry ent), String getName(int aVarIndex, int aInsIndex), String getOpr1(), String getOpr2(), String getPackageName(String aFullName), String getPathName(), String getQualifierName(), String getReturnType(), String getReturnType(String aSignature), String getSecondDirectName(int index), String getSignature(), String getSourceFile(), String getStackTrace(Exception _ex), String getStatement(), String getStmt(), String getStringRep(int rhsQualifier, boolean memberOnly), String getStringifiedBytecode(), String getStringifiedClass(boolean getBytecode), String getStringifiedClass(boolean getBytecode, boolean includeMetadata), String getStringifiedMethods(boolean getBytecode, boolean includeMetadata), String getSuperClass(), String getTagDescriptor(int index), String getTagName(int tagByte), String getTestClassDir(), String getThisClass(), String getThisClass(boolean fullyQualified), String getThrowsClause(JImport importInfo), String getType(JConstantPoolEntry ent), String getUtf8String(int index), String getValue(), String getValue(String value, String datatype), String getValueEx(int precedence), String getViz(), String lowNbits(String aValue, int aNumBits), String manipConstantValue(DataInputStream aDis, JConstantPool aCpInfo), String manipSourceFile(DataInputStream aDis, JConstantPool aCpInfo), String replaceEscapeChars(String aLiteral), String representChar(char aChar), String toString(String _indent), String toString(String indent), String toString(String indent, boolean debug), String topDatatype(), StringBuffer getHeaders(), StringBuffer getPackageImports(), StringBuffer getStringifiedFields(), StringBuffer getStringifiedInterfaces(), StringBuffer getThisSuperClasses(), StringBuffer writeArgs(List aArgs, JImport aImports), TestContext getContext(), Vector getFlattenedCode(String _indent), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), boolean collate(), boolean compile(String rootdir, String javafile), boolean confirmExit(JFrame aAppFrame), boolean confirmOverwrite(Frame aParent, File aOutputFile), boolean confirmOverwrite(JFrame aParent, File aOutputFile), boolean containsANYCatchBlock(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isAny(), boolean isBasicType(String type), boolean isCategory1(), boolean isClass(), boolean isDebug(), boolean isDeclared(), boolean isDecoration(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isEntryCode(), boolean isExitCode(), boolean isFinal(), boolean isInBlockCode(), boolean isInvokeIns(), boolean isJSRTarget(int currPc), boolean isSimpleBlock(), boolean isStatic(), boolean isTagDouble(int index), boolean isTopDatatypeForeign(), boolean isWhile(), boolean process(JClassInfo infoClass, String cmd), boolean reassignType(String datatype), boolean removeLastBlock(), boolean sameTryBlock(JException exc), boolean supportedMajorMinor(short major, short minor), boolean toggleDebug(), boolean versionCheck(), boolean writeToFile(Frame aParent, File aOutputFile), boolean writeToFile(JFrame aParent, File aOutputFile), byte[] getArgArray(int start, int end), byte[] getBytes(), int compare(Object o1, Object o2), int convertToObjects(), int dealLookupSwitch(int index), int dealTableSwitch(int index), int findGotoTarget(int startPc), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getCpIndex(), int getDefaultByte(), int getEffectiveEndPc(List instructions), int getEnd(), int getEndBlockPc(), int getEndPc(), int getEndTarget(), int getFromIndex(), int getInsLen(int index, boolean wide), int getLastIns(), int getLastInsPos(), int getLastReferredIndex(), int getLength(), int getMajor(), int getMaxCpEntry(), int getMaxLocals(), int getMaxStack(), int getMaxSymbols(), int getMinor(), int getNextIndex(), int getNextPc(), int getOffset(), int getPrecedence(), int getPtr1(), int getPtr1(int index), int getPtr2(), int getPtr2(int index), int getQualifier(), int getSignTokenLength(String aDataType), int getStart(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getState(), int getStoreIndex(), int getTagByte(), int getTagByte(int index), int getTarget(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int getToIndex(), int getType(), int getVarIndex(), int invokeInt(Object o, String method), int isStoreInstruction(), int readTargetSwitch(int newIndex), int referredVariable(), int showChooser(JFrame aParent, String aSelectButton), int showFontDialog(), int signedToUnsigned(int aByteVal), void ClassParserException(String aMsg), void ClassParserException(StringBuffer aMsg), void FontSet(Font[] FontList), void Helper(), void JAwtFrame(), void JBlockObject(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JBranchTable(JMethod method), void JCaseBlock(JBranchEntry _jbe, String _expr), void JCaseEntry(), void JCaseEntry(String name, int targetPc), void JCatchBlock(JBranchEntry _jbe, String _cls, String _var), void JClassEditPanel(), void JClassInfo(), void JCollatingTable(JMethod method), void JConstantPool(int cpMax), void JConstantPoolEntry(int tagByte, String value, int ptr1, int ptr2), void JCpDialog(JFrame aParent, String aClassName, JConstantPool aCpInfo), void JCustomFileChooser(Frame parent, String aTitle, String aFileExtension, String aDir, int mode), void JCustomFileChooser(String aDir, String aDescription, String aExtension, String aToolTipText), void JCustomListPanel(int aMaxEntries), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JDlgAbout(Frame aParent, String aTitle), void JDlgAbout(JFrame aParent, String aTitle), void JDlgFont(Frame owner, String title), void JDoWhileBlock(JBranchEntry _jbe), void JDoWhileBlock(JBranchEntry _jbe, String _var1, String _oper, String _var2), void JElseBlock(JBranchEntry _jbe), void JElseIfBlock(JBranchEntry _jbe, String _expr), void JErrorDlg(Frame parent, String FileName, Exception _ex), void JErrorDlg(JFrame parent, String FileName, Exception _ex), void JException(int rhsStart, int rhsEnd, int rhsHandler, String rhsType), void JField(), void JFinallyBlock(JBranchEntry _jbe), void JForBlock(JBranchEntry _jbe, String _init, String _test, String _loop), void JForBlock(JBranchEntry _jbe, String _test), void JIfBlock(JBranchEntry _jbe, String _expr), void JImport(), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void JJavaDocumentEditor(), void JJvmSet(), void JLineOfCode(String stmt, JBlockObject jbo, int state), void JLineOfCode(int sbo, int ebo, int fromI, int toI, String stmt), void JLocalEntry(int aVarIndex, int aStoreIndex, String datatype, String aName, boolean aDeclared), void JLookFeelMenu(JFrame thisFrame), void JLookFeelMenu(String title, JFrame thisFrame), void JMainFrame(), void JMethod(JClassInfo info), void JMethodBlock(), void JOperandStack(), void JPoolTable(JConstantPool RhsCpInfo), void JPoolTableModel(JConstantPool RhsCpInfo), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void JStatusPanel(), void JSwitchBlock(JBranchEntry _jbe, String _expr), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void JSymbolTable(JMethod rhsMethod, JImport imports), void JSynchBlock(JBranchEntry _jbe, String _var), void JTryBlock(JBranchEntry _jbe), void MainMenu(Frame owner), void MainMenu(JFrame owner), void Operand(String value, String datatype, int precedence), void Operand(int value, String datatype, int precedence), void RevEngineException(String msg), void RevEngineException(String msg, Exception ex), void TestContext(String testclassdir, String compiledir), void add(JBranchEntry ent), void addBlock(JBlockObject _jbo), void addBlock(JBlockObject jbo), void addCaseEntry(JCaseEntry caseEntry), void addCatchBlock(int rhsHandlerPc, String rhsType), void addCatchBranch(int insIndex, JBranchEntry brent), void addClass(String importClass), void addClassEntry(int classIndex), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addComponents(), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void addConstant(String constant), void addDoubleEntry(String value), void addEntry(int aVarIndex, int aStoreIndex, String aDatatype, boolean aDeclared), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), void addField(JField rhsField), void addFieldRefEntry(int ptr1, int ptr2), void addFloatEntry(String value), void addGotoEntry(int startPc, int targetPc), void addIntegerEntry(String value), void addInterface(String interfaceName), void addInterfaceRefEntry(int ptr1, int ptr2), void addJSRPc(int targetPc), void addLineOfCode(JLineOfCode loc), void addListeners(), void addLongEntry(String value), void addLookAndFeelListeners(), void addMethod(JMethod rhsMethod), void addMethodRefEntry(int ptr1, int ptr2), void addMonitorPc(int aMonitorPc, String aMonObject), void addNameTypeEntry(int ptr1, int ptr2), void addNullEntry(), void addReference(int aVarIndex, String aDatatype, int aIndex), void addRetPc(int retPc), void addStatement(JLineOfCode _loc), void addStringEntry(int stringIndex), void addSwitch(JSwitchTable switchEntry), void addTextCode(String txt), void addTryBlocks(List excTryTable), void addUtf8Entry(String value), void addValue(String name), void appClose(), void append(JInstruction rhsNext), void appendStartBlockStmtX(JDecompiler decomp), void assign0(), void assign1(), void assign10(), void assign11(), void assign12(), void assign13(), void assign14(), void assign2(), void assign3(), void assign4(), void assign5(), void assign6(), void assign7(), void assign8(), void assign9(), void assignDataType(int aVarIndex, String aDatatype, int aVarStore, boolean aDeclared), void closeBlock(), void closeCatchBranch(int closeIndex), void collate(), void complementOperator(), void convertToWhile(), void copyText(), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createModel(JFrame aParent, String aFileName, List aChildren), void createTableSwitch(byte[] entries, int offset, Map gotos), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void dealDefault(StringBuffer assembly, JInstruction thisIns), void dealIntegerStore(String popValue, int intIndex, int insIndex), void declareVariable(), void decompile(String classfile, String javafile), void deleteElse(int startElse), void executeInstruction(JInstruction ins), void fillFontObjects(), void fillSuperClass(), void fillThisClass(), void findText(), void formatTitle(String aFileName), void genCode(), void genSource(), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void getSingleEntryInfo(StringBuffer sb, int cpIndex), void gotoIndex(int aTargetIndex), void identifyMoreBranches(), void identifyWhileLoops(Map mapGotos), void init(), void initAppState(), void initColumnNames(), void initMenuItems(), void listen(JClassInfo infoClass, String inputFile), void loadSymbolTable(), void loadSymbols(List aArgs, int startIndex), void log(Exception ex), void log(String logMsg), void log(String message), void logNoEol(String logMsg), void main(String[] aArgs), void main(String[] args), void manipCode(DataInputStream aDis, JMethod aLocalMethod, JConstantPool aCpInfo), void manipDeprecated(DataInputStream aDis), void manipLineNumberTable(DataInputStream aDis), void manipLocalVariableTable(DataInputStream aDis), void manipSynthetic(DataInputStream aDis), void mergeTopTwo(), void normalize(), void openFile(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void parse(ByteArrayInputStream is, String pathToClass), void parse(File aFile), void parse(InputStream is, int length, String pathToClass), void parse(URL url), void parse(byte[] bytes), void process(String[] args), void processBreakContinue(int startPc, int targetPc), void processData(Map gotos), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void processMethods(boolean getBytecode), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void pushControlEntry(JBranchEntry newent), void readAccess(), void readAttributes(), void readClassAttributes(), void readCodeAttributes(DataInputStream aDis, JConstantPool aCpInfo), void readConstantPool(), void readCpEntries(int aNumEntry), void readFieldAttributes(JField aRhsField), void readFields(), void readInterfaces(), void readMagic(), void readMethodAttributes(JMethod aRhsMethod), void readMethods(), void readTagClass(int aIndex), void readTagDouble(int aIndex), void readTagFieldRef(int aIndex), void readTagFloat(int aIndex), void readTagInteger(int aIndex), void readTagInterfaceRef(int aIndex), void readTagLong(int aIndex), void readTagMethodRef(int aIndex), void readTagNameType(int aIndex), void readTagString(int aIndex), void readTagUtf8(int aIndex), void readVersion(), void removeAllConstants(), void resetWrittenFlag(), void reverseEngineer(File aFile), void reverseEngineer(boolean getBytecode), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void runTest(TestContext context, Class tester), void saveFile(), void saveProperties(), void setAccess(int rhsAccess), void setAppLookAndFeel(String Rhs), void setBlock(JBlockObject jbo), void setBlockWrittenFlag(), void setBytes(byte[] bytecodes), void setConstantPool(JConstantPool cpInfo), void setContext(TestContext context), void setDatatype(String rhsType), void setDeclarationType(String aType), void setDefaultLookAndFeel(), void setEditorFont(Font aFont), void setEnd(int e), void setEndBlockPc(int aNewPc), void setEndTarget(int endTarget), void setFlag(String Rhs), void setFromIndex(int f), void setInitExpr(String _init), void setLastIns(int li), void setLastInsPos(int lip), void setLastReferredIndex(int index), void setLineTable(JLineNumberTable rhsLineTable), void setLoopExpr(String _loop), void setMajorMinor(short rhsMajor, short rhsMinor), void setMaxLocals(int maxLocals), void setMaxStack(int maxStack), void setMetal_LF(), void setMotif_LF(), void setName(String name), void setName(String rhsName), void setNextPc(int nextPc), void setOper(String _oper), void setOpr1(String opr1), void setOpr2(String opr2), void setPackageName(String packageName), void setPathName(String classPath), void setQualifier(int rhsQualify), void setSignature(String rhsSign), void setSourceFile(String rhsSrcFile), void setStart(int s), void setStartPc(int startPc), void setState(int s), void setStmt(String s), void setStringifiedBytecode(String str), void setSuperClass(String rhsName), void setSymbolTable(JSymbolTable st), void setTables(List aBranches), void setTarget(int targetPc), void setTargetPc(int targetPc), void setTestExpr(String _test), void setThisClass(String rhsName), void setThrowsClasses(List throwsClasses), void setToIndex(int t), void setType(int type), void setTypeValue(String rhsType, String rhsValue), void setValue(String rhsValue), void setVar1(String _var1), void setVar2(String _var2), void setViz(String v), void setWin_LF(), void setWrittenFlag(), void showAbout(), void showFontDialog(), void sort(), void teardown(), void test(Class c), void test(Class classtotest), void touchVariable(String aVarName, String aNewType), void validatePairings(JBranchEntry ent), void viewPool(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void writeCode(String aCode), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	->	->	->NODE_5[[jreversepro.common.JJvmOpcodes],[JBranchEntry contains(List listBranchEntries, int type), JBranchEntry getBranchEntry(), JCollatingTable loadBranchTable(), JInstruction findGotoIns(List byteIns, int start, int end), JInstruction next(), JInstruction prev(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getCases(), List startsWith(int aInsIndex), Map getGotoTable(), Operand getInvokedObject(), String branchesToString(), String disassemble(), String doesMonitorBegin(int monitorBeginPc), String getArgValues(List args, List argValues), String getConditionalOperator(), String getIns(int index), String getInsName(), String getOpr1(), String getOpr2(), String getStatement(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isInvokeIns(), boolean isJSRTarget(int currPc), int findGotoTarget(int startPc), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getDefaultByte(), int getInsLen(int index, boolean wide), int getLastIns(), int getLastInsPos(), int getLength(), int getNextIndex(), int getOffset(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int isStoreInstruction(), int referredVariable(), void JBranchTable(JMethod method), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void JJvmSet(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void add(JBranchEntry ent), void addCaseEntry(JCaseEntry caseEntry), void addCatchBranch(int insIndex, JBranchEntry brent), void addGotoEntry(int startPc, int targetPc), void addJSRPc(int targetPc), void addMonitorPc(int aMonitorPc, String aMonObject), void addRetPc(int retPc), void addSwitch(JSwitchTable switchEntry), void addTryBlocks(List excTryTable), void append(JInstruction rhsNext), void assign0(), void assign1(), void assign10(), void assign11(), void assign12(), void assign13(), void assign14(), void assign2(), void assign3(), void assign4(), void assign5(), void assign6(), void assign7(), void assign8(), void assign9(), void closeCatchBranch(int closeIndex), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createTableSwitch(byte[] entries, int offset, Map gotos), void dealDefault(StringBuffer assembly, JInstruction thisIns), void dealIntegerStore(String popValue, int intIndex, int insIndex), void deleteElse(int startElse), void genCode(), void genSource(), void identifyMoreBranches(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processData(Map gotos), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void setTables(List aBranches), void setTypeValue(String rhsType, String rhsValue), void sort()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_4[...,...]
	->NODE_6[[jreversepro.gui.JPoolTable],[void JPoolTable(JConstantPool RhsCpInfo)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_7[[jreversepro.reflect.JImport],[String getClassName(String fullQualifiedName), String getImportClasses(String packageName), void JImport(), void addClass(String importClass)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_8[[jreversepro.reflect.JInstruction, jreversepro.revengine.JBranchEntry],[int getTargetPc()]]
	->ITS CHILDREN:=================
	->	->NODE_9[[jreversepro.reflect.JInstruction],[JInstruction next(), JInstruction prev(), String getConditionalOperator(), String getInsName(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isInvokeIns(), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getLength(), int getNextIndex(), int getOffset(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int isStoreInstruction(), int referredVariable(), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void append(JInstruction rhsNext)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_2[...,...]
	->	->NODE_10[[jreversepro.common.JJvmOpcodes, jreversepro.revengine.JBranchEntry],[String getOpr1(), int getTargetPc()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_11[[jreversepro.revengine.JBranchEntry],[String getComplementOperator(String rhs), String getCondition(boolean complement), String getExpression(), String getOpr1(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isWhile(), int getEndBlockPc(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void appendStartBlockStmtX(JDecompiler decomp), void complementOperator(), void convertToWhile(), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setEndBlockPc(int aNewPc), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_12[[jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isWhile(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB)]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_13[[jreversepro.common.KeyWords, jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getConstants(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getConstantValues(), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), String topDatatype(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isTopDatatypeForeign(), boolean isWhile(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JOperandStack(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void addConstant(String constant), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void mergeTopTwo(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void removeAllConstants(), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_14[[jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getConstants(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getConstantValues(), String getDatatype(), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), String getValue(), String getValueEx(int precedence), String topDatatype(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isCategory1(), boolean isTopDatatypeForeign(), boolean isWhile(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getPrecedence(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JOperandStack(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void Operand(String value, String datatype, int precedence), void Operand(int value, String datatype, int precedence), void addCatchBranch(int insIndex, JBranchEntry brent), void addConstant(String constant), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void mergeTopTwo(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void removeAllConstants(), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB)]]
	->	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->	->NODE_4[...,...]
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->	->	->NODE_15[[jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants],[JBranchEntry getImmediateOuterLoop(), JCollatingTable loadBranchTable(), JOperandStack getOperandStack(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getEffectiveBranches(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isWhile(), int convertToObjects(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JCollatingTable(JMethod method), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void addTextCode(String txt), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void collate(), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void executeInstruction(JInstruction ins), void genCode(), void genSource(), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void identifyWhileLoops(Map mapGotos), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processBreakContinue(int startPc, int targetPc), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void pushControlEntry(JBranchEntry newent), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setBlockWrittenFlag(), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void sort(), void validatePairings(JBranchEntry ent), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_3[...,...]
	->	->	->	->	->	->NODE_16[[jreversepro.revengine.BranchConstants],[JBranchEntry contains(List listBranchEntries, int type), JBranchEntry getImmediateOuterLoop(), JCollatingTable loadBranchTable(), JInstruction findGotoIns(List byteIns, int start, int end), JOperandStack getOperandStack(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getEffectiveBranches(), List startsWith(int aInsIndex), Map getGotoTable(), Operand getInvokedObject(), String branchesToString(), String doesMonitorBegin(int monitorBeginPc), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isJSRTarget(int currPc), boolean isWhile(), int convertToObjects(), int findGotoTarget(int startPc), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JBranchTable(JMethod method), void JCollatingTable(JMethod method), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void add(JBranchEntry ent), void addCatchBranch(int insIndex, JBranchEntry brent), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void addGotoEntry(int startPc, int targetPc), void addJSRPc(int targetPc), void addMonitorPc(int aMonitorPc, String aMonObject), void addRetPc(int retPc), void addSwitch(JSwitchTable switchEntry), void addTextCode(String txt), void addTryBlocks(List excTryTable), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void collate(), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void deleteElse(int startElse), void executeInstruction(JInstruction ins), void genCode(), void genSource(), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void identifyMoreBranches(), void identifyWhileLoops(Map mapGotos), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processBreakContinue(int startPc, int targetPc), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void pushControlEntry(JBranchEntry newent), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setBlockWrittenFlag(), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTables(List aBranches), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void sort(), void validatePairings(JBranchEntry ent), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	->	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->	->NODE_4[...,...]
	->	->	->NODE_17[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), int getLastIns(), int getLastInsPos(), int getTargetPc(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_18[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), int getLastIns(), int getLastInsPos(), int getTargetPc(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void sort()]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_19[[jreversepro.common.JJvmOpcodes, jreversepro.revengine.BranchConstants],[JBranchEntry contains(List listBranchEntries, int type), JCollatingTable loadBranchTable(), JInstruction findGotoIns(List byteIns, int start, int end), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List startsWith(int aInsIndex), Map getGotoTable(), Operand getInvokedObject(), String branchesToString(), String doesMonitorBegin(int monitorBeginPc), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), boolean isJSRTarget(int currPc), int findGotoTarget(int startPc), int getLastIns(), int getLastInsPos(), int getTargetPc(), void JBranchTable(JMethod method), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void add(JBranchEntry ent), void addCatchBranch(int insIndex, JBranchEntry brent), void addGotoEntry(int startPc, int targetPc), void addJSRPc(int targetPc), void addMonitorPc(int aMonitorPc, String aMonObject), void addRetPc(int retPc), void addSwitch(JSwitchTable switchEntry), void addTryBlocks(List excTryTable), void closeCatchBranch(int closeIndex), void dealIntegerStore(String popValue, int intIndex, int insIndex), void deleteElse(int startElse), void genCode(), void genSource(), void identifyMoreBranches(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void setTables(List aBranches), void sort()]]
	->	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->	->NODE_16[...,...]
	->	->	->	->	->	->NODE_5[...,...]
	->	->	->	->	->NODE_15[...,...]
	->	->	->	->	->NODE_2[...,...]
	->	->	->	->NODE_12[...,...]
	->NODE_20[[jreversepro.reflect.JMethod],[JBlockObject removeCurrentBlock(), JInstruction getFirstIns(), JInstruction getInstruction(int ind), JInstruction getNextInstruction(int ind), JLineNumberTable getLineTable(), JLineOfCode removeLastLineOfCode(), JMethodBlock getBlock(), List getArgList(), List getInstructions(), List getThrowsClasses(), List getexceptionBlocks(), Map getAllCatchJExceptions(), String getLocalStackInfo(), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), String getMethodHeader(boolean includeStackInfo), String getReturnType(), String getSignature(), String getStringifiedBytecode(), String getThrowsClause(JImport importInfo), boolean isStatic(), byte[] getArgArray(int start, int end), byte[] getBytes(), int dealLookupSwitch(int index), int dealTableSwitch(int index), int getMaxLocals(), int getMaxStack(), int readTargetSwitch(int newIndex), void JMethod(JClassInfo info), void addBlock(JBlockObject jbo), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), void addLineOfCode(JLineOfCode loc), void closeBlock(), void normalize(), void setBytes(byte[] bytecodes), void setLineTable(JLineNumberTable rhsLineTable), void setMaxLocals(int maxLocals), void setMaxStack(int maxStack), void setSignature(String rhsSign), void setStringifiedBytecode(String str), void setSymbolTable(JSymbolTable st), void setThrowsClasses(List throwsClasses)]]
	->ITS CHILDREN:=================
	->	->NODE_21[[jreversepro.reflect.JMember],[JBlockObject removeCurrentBlock(), JInstruction getFirstIns(), JInstruction getInstruction(int ind), JInstruction getNextInstruction(int ind), JLineNumberTable getLineTable(), JLineOfCode removeLastLineOfCode(), JMethodBlock getBlock(), List getArgList(), List getInstructions(), List getThrowsClasses(), List getexceptionBlocks(), Map getAllCatchJExceptions(), String getDatatype(), String getLocalStackInfo(), String getMethodAsString(boolean getBytecode, boolean includeStackInfo), String getMethodHeader(boolean includeStackInfo), String getName(), String getQualifierName(), String getReturnType(), String getSignature(), String getStringRep(int rhsQualifier, boolean memberOnly), String getStringifiedBytecode(), String getThrowsClause(JImport importInfo), String getValue(), boolean isFinal(), boolean isStatic(), byte[] getArgArray(int start, int end), byte[] getBytes(), int dealLookupSwitch(int index), int dealTableSwitch(int index), int getMaxLocals(), int getMaxStack(), int getQualifier(), int readTargetSwitch(int newIndex), void JField(), void JMethod(JClassInfo info), void addBlock(JBlockObject jbo), void addExceptionBlock(int startPc, int endPc, int handlerPc, String datatype), void addLineOfCode(JLineOfCode loc), void closeBlock(), void normalize(), void setBytes(byte[] bytecodes), void setDatatype(String rhsType), void setLineTable(JLineNumberTable rhsLineTable), void setMaxLocals(int maxLocals), void setMaxStack(int maxStack), void setName(String rhsName), void setQualifier(int rhsQualify), void setSignature(String rhsSign), void setStringifiedBytecode(String str), void setSymbolTable(JSymbolTable st), void setThrowsClasses(List throwsClasses), void setValue(String rhsValue)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->	->NODE_3[...,...]
	->NODE_22[[jreversepro.gui.FontSet],[Object[] getFonts(), void FontSet(Font[] FontList)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_23[[jreversepro.awtui.JDlgAbout],[void JDlgAbout(Frame aParent, String aTitle)]]
	->ITS CHILDREN:=================
	->	->NODE_24[[jreversepro.common.AppConstants],[JClassInfo getClassInfo(), JClassInfo loadClass(String inputFile), JConstantPool getCpInfo(), StringBuffer writeArgs(List aArgs, JImport aImports), boolean process(JClassInfo infoClass, String cmd), boolean supportedMajorMinor(short major, short minor), void JAwtFrame(), void JDlgAbout(Frame aParent, String aTitle), void JDlgAbout(JFrame aParent, String aTitle), void JMainFrame(), void addListeners(), void appClose(), void copyText(), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void fillSuperClass(), void fillThisClass(), void formatTitle(String aFileName), void initAppState(), void listen(JClassInfo infoClass, String inputFile), void main(String[] aArgs), void openFile(), void parse(ByteArrayInputStream is, String pathToClass), void parse(File aFile), void parse(InputStream is, int length, String pathToClass), void parse(URL url), void parse(byte[] bytes), void process(String[] args), void readAccess(), void readAttributes(), void readClassAttributes(), void readConstantPool(), void readCpEntries(int aNumEntry), void readFieldAttributes(JField aRhsField), void readFields(), void readInterfaces(), void readMagic(), void readMethodAttributes(JMethod aRhsMethod), void readMethods(), void readTagClass(int aIndex), void readTagDouble(int aIndex), void readTagFieldRef(int aIndex), void readTagFloat(int aIndex), void readTagInteger(int aIndex), void readTagInterfaceRef(int aIndex), void readTagLong(int aIndex), void readTagMethodRef(int aIndex), void readTagNameType(int aIndex), void readTagString(int aIndex), void readTagUtf8(int aIndex), void readVersion(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_25[[jreversepro.gui.JLookFeelMenu],[String getAppLookAndFeel(), void JLookFeelMenu(JFrame thisFrame), void JLookFeelMenu(String title, JFrame thisFrame), void addLookAndFeelListeners(), void setAppLookAndFeel(String Rhs), void setDefaultLookAndFeel(), void setMetal_LF(), void setMotif_LF(), void setWin_LF()]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_26[[jreversepro.gui.JPoolTableModel],[Object fillPtr1(int Index), Object fillPtr2(int Index), Object fillTagByte(int Index), Object fillValue(int Index), void JPoolTableModel(JConstantPool RhsCpInfo), void initColumnNames()]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_27[[jreversepro.parser.JClassParser],[JClassInfo getClassInfo(), JConstantPool getCpInfo(), boolean supportedMajorMinor(short major, short minor), void fillSuperClass(), void fillThisClass(), void parse(ByteArrayInputStream is, String pathToClass), void parse(File aFile), void parse(InputStream is, int length, String pathToClass), void parse(URL url), void parse(byte[] bytes), void readAccess(), void readAttributes(), void readClassAttributes(), void readConstantPool(), void readCpEntries(int aNumEntry), void readFieldAttributes(JField aRhsField), void readFields(), void readInterfaces(), void readMagic(), void readMethodAttributes(JMethod aRhsMethod), void readMethods(), void readTagClass(int aIndex), void readTagDouble(int aIndex), void readTagFieldRef(int aIndex), void readTagFloat(int aIndex), void readTagInteger(int aIndex), void readTagInterfaceRef(int aIndex), void readTagLong(int aIndex), void readTagMethodRef(int aIndex), void readTagNameType(int aIndex), void readTagString(int aIndex), void readTagUtf8(int aIndex), void readVersion()]]
	->ITS CHILDREN:=================
	->	->NODE_24[...,...]
	->NODE_28[[jreversepro.parser.ClassParserException],[void ClassParserException(String aMsg), void ClassParserException(StringBuffer aMsg)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_29[[jreversepro.tester.TestContext],[String getCompileDir(), String getTestClassDir(), void TestContext(String testclassdir, String compiledir)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_30[[jreversepro.reflect.JException, jreversepro.revengine.JBranchEntry],[int getStartPc()]]
	->ITS CHILDREN:=================
	->	->NODE_11[...,...]
	->	->NODE_31[[jreversepro.reflect.JException],[Enumeration getHandlers(), String getExceptionClass(int rhsHandlerPc), boolean containsANYCatchBlock(), boolean isAny(), boolean sameTryBlock(JException exc), int getEffectiveEndPc(List instructions), int getEndPc(), int getStartPc(), void JException(int rhsStart, int rhsEnd, int rhsHandler, String rhsType), void addCatchBlock(int rhsHandlerPc, String rhsType)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_32[[jreversepro.revengine.JDecompiler, jreversepro.revengine.JDisAssembler, jreversepro.revengine.JReverseEngineer],[void genCode()]]
	->ITS CHILDREN:=================
	->	->NODE_33[[jreversepro.revengine.JDecompiler],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), int getLastIns(), int getLastInsPos(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void genCode(), void genSource(), void loadSymbolTable(), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_34[[jreversepro.common.JJvmOpcodes, jreversepro.revengine.JReverseEngineer],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), int getLastIns(), int getLastInsPos(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void dealDefault(StringBuffer assembly, JInstruction thisIns), void genCode(), void genSource(), void loadSymbolTable(), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_5[...,...]
	->	->	->NODE_17[...,...]
	->	->NODE_35[[jreversepro.revengine.JDisAssembler],[void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void dealDefault(StringBuffer assembly, JInstruction thisIns), void genCode()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_34[...,...]
	->NODE_36[[jreversepro.gui.JStatusPanel],[void JStatusPanel()]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_37[[jreversepro.tester.TestHelper],[Class loadClass(String dir, String classname), boolean compile(String rootdir, String javafile), void decompile(String classfile, String javafile)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_38[[jreversepro.gui.JCpDialog],[int getCpIndex(), void JCpDialog(JFrame aParent, String aClassName, JConstantPool aCpInfo), void findText(), void gotoIndex(int aTargetIndex)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_39[[jreversepro.JAwtFrame, jreversepro.JCmdMain, jreversepro.JMainFrame],[void main(String[] aArgs)]]
	->ITS CHILDREN:=================
	->	->NODE_40[[jreversepro.JCmdMain],[JClassInfo loadClass(String inputFile), boolean process(JClassInfo infoClass, String cmd), void listen(JClassInfo infoClass, String inputFile), void main(String[] aArgs), void process(String[] args)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_24[...,...]
	->	->NODE_41[[jreversepro.JAwtFrame, jreversepro.JMainFrame],[void addListeners(), void appClose(), void copyText(), void cutText(), void formatTitle(String aFileName), void initAppState(), void main(String[] aArgs), void openFile(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_42[[jreversepro.JMainFrame],[StringBuffer writeArgs(List aArgs, JImport aImports), void JMainFrame(), void addListeners(), void appClose(), void copyText(), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void formatTitle(String aFileName), void initAppState(), void main(String[] aArgs), void openFile(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_43[[jreversepro.common.AppConstants, jreversepro.common.KeyWords],[StringBuffer writeArgs(List aArgs, JImport aImports), void JAwtFrame(), void JMainFrame(), void addListeners(), void appClose(), void copyText(), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void formatTitle(String aFileName), void initAppState(), void main(String[] aArgs), void openFile(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	->	->	->	->ITS CHILDREN:=================
	->	->	->	->	->NODE_3[...,...]
	->	->	->	->	->NODE_24[...,...]
	->	->	->NODE_44[[jreversepro.JAwtFrame],[void JAwtFrame(), void addListeners(), void appClose(), void copyText(), void cutText(), void formatTitle(String aFileName), void initAppState(), void main(String[] aArgs), void openFile(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_43[...,...]
	->NODE_45[[jreversepro.revengine.JSerializer],[JClassInfo loadClass(File file), JClassInfo loadClass(URL url)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_46[[jreversepro.gui.JCustomFileChooser],[int showChooser(JFrame aParent, String aSelectButton), void JCustomFileChooser(String aDir, String aDescription, String aExtension, String aToolTipText)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_47[[jreversepro.revengine.JBranchTable, jreversepro.revengine.JCollatingTable],[void sort()]]
	->ITS CHILDREN:=================
	->	->NODE_18[...,...]
	->	->NODE_48[[jreversepro.revengine.JCollatingTable],[List getEffectiveBranches(), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), int convertToObjects(), void JCollatingTable(JMethod method), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void collate(), void identifyWhileLoops(Map mapGotos), void sort()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_15[...,...]
	->	->NODE_49[[jreversepro.revengine.JBranchTable],[JBranchEntry contains(List listBranchEntries, int type), JInstruction findGotoIns(List byteIns, int start, int end), List startsWith(int aInsIndex), Map getGotoTable(), String branchesToString(), String doesMonitorBegin(int monitorBeginPc), boolean isJSRTarget(int currPc), int findGotoTarget(int startPc), void JBranchTable(JMethod method), void add(JBranchEntry ent), void addGotoEntry(int startPc, int targetPc), void addJSRPc(int targetPc), void addMonitorPc(int aMonitorPc, String aMonObject), void addRetPc(int retPc), void addSwitch(JSwitchTable switchEntry), void addTryBlocks(List excTryTable), void deleteElse(int startElse), void identifyMoreBranches(), void setTables(List aBranches), void sort()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_19[...,...]
	->NODE_50[[jreversepro.tester.tests.TestSimpleReturns],[String getClassName(), void test(Class c)]]
	->ITS CHILDREN:=================
	->	->NODE_51[[jreversepro.tester.TestBase],[Class getNewClass(), Class getOriginalClass(), String getClassName(), TestContext getContext(), int invokeInt(Object o, String method), void init(), void log(String message), void setContext(TestContext context), void teardown(), void test(Class c), void test(Class classtotest)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_52[[jreversepro.reflect.JLineOfCode],[JBlockObject getBlock(), String getStmt(), String getViz(), String toString(String indent), String toString(String indent, boolean debug), boolean isDecoration(), boolean isEntryCode(), boolean isExitCode(), boolean isInBlockCode(), int getEnd(), int getFromIndex(), int getStart(), int getState(), int getToIndex(), void JLineOfCode(String stmt, JBlockObject jbo, int state), void JLineOfCode(int sbo, int ebo, int fromI, int toI, String stmt), void setBlock(JBlockObject jbo), void setEnd(int e), void setFromIndex(int f), void setStart(int s), void setState(int s), void setStmt(String s), void setToIndex(int t), void setViz(String v)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_53[[jreversepro.awtui.JCustomFileChooser],[void JCustomFileChooser(Frame parent, String aTitle, String aFileExtension, String aDir, int mode)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_54[[jreversepro.common.JJvmSet],[String getIns(int index), int getInsLen(int index, boolean wide), void JJvmSet(), void assign0(), void assign1(), void assign10(), void assign11(), void assign12(), void assign13(), void assign14(), void assign2(), void assign3(), void assign4(), void assign5(), void assign6(), void assign7(), void assign8(), void assign9()]]
	->ITS CHILDREN:=================
	->	->NODE_5[...,...]
	->NODE_55[[jreversepro.revengine.JBranchEntry, jreversepro.runtime.JRunTimeFrame],[String getOpr1()]]
	->ITS CHILDREN:=================
	->	->NODE_56[[jreversepro.runtime.JRunTimeFrame],[Operand getInvokedObject(), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void dealIntegerStore(String popValue, int intIndex, int insIndex), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_17[...,...]
	->	->NODE_10[...,...]
	->NODE_57[[jreversepro.awtui.JCustomListPanel, jreversepro.awtui.JErrorDlg, jreversepro.gui.JCustomListPanel, jreversepro.gui.JErrorDlg],[void addComponents()]]
	->ITS CHILDREN:=================
	->	->NODE_58[[jreversepro.awtui.JErrorDlg, jreversepro.gui.JErrorDlg],[String getStackTrace(Exception _ex), void addComponents()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_59[[jreversepro.gui.JErrorDlg],[String getStackTrace(Exception _ex), void JErrorDlg(JFrame parent, String FileName, Exception _ex), void addComponents()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_4[...,...]
	->	->	->NODE_60[[jreversepro.awtui.JErrorDlg],[String getStackTrace(Exception _ex), void JErrorDlg(Frame parent, String FileName, Exception _ex), void addComponents()]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_4[...,...]
	->	->NODE_61[[jreversepro.awtui.JCustomListPanel, jreversepro.gui.JCustomListPanel],[void JCustomListPanel(int aMaxEntries), void addComponents()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_62[[jreversepro.revengine.JCaseEntry],[List getValues(), String disAssemble(), int getEndTarget(), int getTarget(), void JCaseEntry(), void JCaseEntry(String name, int targetPc), void addValue(String name), void setEndTarget(int endTarget), void setTarget(int targetPc)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_63[[jreversepro.awtui.MainMenu, jreversepro.gui.MainMenu],[void initMenuItems(), void setFlag(String Rhs)]]
	->ITS CHILDREN:=================
	->	->NODE_64[[jreversepro.gui.MainMenu],[void MainMenu(JFrame owner), void initMenuItems(), void setFlag(String Rhs)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->	->NODE_65[[jreversepro.awtui.MainMenu],[void MainMenu(Frame owner), void initMenuItems(), void setFlag(String Rhs)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_66[[jreversepro.parser.JAttribute],[List manipExceptions(DataInputStream aDis, JConstantPool aCpInfo), String manipConstantValue(DataInputStream aDis, JConstantPool aCpInfo), String manipSourceFile(DataInputStream aDis, JConstantPool aCpInfo), void manipCode(DataInputStream aDis, JMethod aLocalMethod, JConstantPool aCpInfo), void manipDeprecated(DataInputStream aDis), void manipLineNumberTable(DataInputStream aDis), void manipLocalVariableTable(DataInputStream aDis), void manipSynthetic(DataInputStream aDis), void readCodeAttributes(DataInputStream aDis, JConstantPool aCpInfo)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_67[[jreversepro.reflect.JConstantPoolEntry, jreversepro.reflect.JField, jreversepro.runtime.Operand],[String getValue()]]
	->ITS CHILDREN:=================
	->	->NODE_68[[jreversepro.reflect.JField],[String getValue(), void JField(), void setValue(String rhsValue)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_21[...,...]
	->	->NODE_69[[jreversepro.reflect.JMember, jreversepro.runtime.Operand],[String getDatatype(), String getValue()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_70[[jreversepro.runtime.Operand],[String getDatatype(), String getValue(), String getValueEx(int precedence), boolean isCategory1(), int getPrecedence(), void Operand(String value, String datatype, int precedence), void Operand(int value, String datatype, int precedence)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_14[...,...]
	->	->	->NODE_21[...,...]
	->	->NODE_71[[jreversepro.reflect.JConstantPoolEntry],[String getValue(), int getPtr1(), int getPtr2(), int getTagByte(), void JConstantPoolEntry(int tagByte, String value, int ptr1, int ptr2)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_72[[jreversepro.common.Helper],[List getArguments(String aSignature), String getAtomicValue(String value, String datatype), String getJavaDataType(String aDataType, boolean associated), String getPackageName(String aFullName), String getReturnType(String aSignature), String getValue(String value, String datatype), String lowNbits(String aValue, int aNumBits), String replaceEscapeChars(String aLiteral), String representChar(char aChar), boolean isBasicType(String type), boolean isDebug(), boolean toggleDebug(), boolean versionCheck(), int getSignTokenLength(String aDataType), int signedToUnsigned(int aByteVal), void Helper(), void log(Exception ex), void log(String logMsg), void logNoEol(String logMsg)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_73[[jreversepro.runtime.JOperandStack],[List getConstants(), String getConstantValues(), String topDatatype(), boolean isTopDatatypeForeign(), void JOperandStack(), void addConstant(String constant), void mergeTopTwo(), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void removeAllConstants()]]
	->ITS CHILDREN:=================
	->	->NODE_13[...,...]
	->NODE_74[[jreversepro.reflect.JClassInfo],[JConstantPool getConstantPool(), List getFields(), List getInterfaces(), List getMethods(), String getAccessString(), String getPathName(), String getSourceFile(), String getStringifiedClass(boolean getBytecode), String getStringifiedClass(boolean getBytecode, boolean includeMetadata), String getStringifiedMethods(boolean getBytecode, boolean includeMetadata), String getSuperClass(), String getThisClass(), String getThisClass(boolean fullyQualified), StringBuffer getHeaders(), StringBuffer getPackageImports(), StringBuffer getStringifiedFields(), StringBuffer getStringifiedInterfaces(), StringBuffer getThisSuperClasses(), boolean isClass(), int getMajor(), int getMinor(), void JClassInfo(), void addField(JField rhsField), void addInterface(String interfaceName), void addMethod(JMethod rhsMethod), void processMethods(boolean getBytecode), void reverseEngineer(boolean getBytecode), void setAccess(int rhsAccess), void setConstantPool(JConstantPool cpInfo), void setMajorMinor(short rhsMajor, short rhsMinor), void setPackageName(String packageName), void setPathName(String classPath), void setSourceFile(String rhsSrcFile), void setSuperClass(String rhsName), void setThisClass(String rhsName)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_75[[jreversepro.awtui.JJavaDocumentEditor, jreversepro.gui.JJavaDocumentEditor],[void JJavaDocumentEditor()]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_76[[jreversepro.gui.ConfirmCloseDialog],[boolean confirmExit(JFrame aAppFrame)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_77[[jreversepro.revengine.JBranchComparator, jreversepro.revengine.JCaseComparator],[int compare(Object o1, Object o2)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_78[[jreversepro.revengine.RevEngineException],[void RevEngineException(String msg), void RevEngineException(String msg, Exception ex)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_79[[jreversepro.runtime.JRunTimeContext],[JBranchEntry getImmediateOuterLoop(), JOperandStack getOperandStack(), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addTextCode(String txt), void executeInstruction(JInstruction ins), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void processBreakContinue(int startPc, int targetPc), void pushControlEntry(JBranchEntry newent), void setBlockWrittenFlag(), void validatePairings(JBranchEntry ent), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	->ITS CHILDREN:=================
	->	->NODE_15[...,...]
	->NODE_80[[jreversepro.gui.JDlgAbout],[void JDlgAbout(JFrame aParent, String aTitle)]]
	->ITS CHILDREN:=================
	->	->NODE_24[...,...]
	->NODE_81[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JCaseBlock, jreversepro.reflect.method.JCatchBlock, jreversepro.reflect.method.JDoWhileBlock, jreversepro.reflect.method.JElseBlock, jreversepro.reflect.method.JElseIfBlock, jreversepro.reflect.method.JFinallyBlock, jreversepro.reflect.method.JForBlock, jreversepro.reflect.method.JIfBlock, jreversepro.reflect.method.JMethodBlock, jreversepro.reflect.method.JSwitchBlock, jreversepro.reflect.method.JSynchBlock, jreversepro.reflect.method.JTryBlock],[String getEntryCode(), String getExitCode()]]
	->ITS CHILDREN:=================
	->	->NODE_82[[jreversepro.reflect.method.JElseBlock],[String getEntryCode(), String getExitCode(), void JElseBlock(JBranchEntry _jbe)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[[jreversepro.reflect.method.JBlockObject],[JLineOfCode getEntryLineOfCode(), JLineOfCode getExitLineOfCode(), JLineOfCode removeLastStatement(), String getEntryCode(), String getExitCode(), String toString(String _indent), Vector getFlattenedCode(String _indent), boolean isSimpleBlock(), boolean removeLastBlock(), void JBlockObject(), void JCaseBlock(JBranchEntry _jbe, String _expr), void JCatchBlock(JBranchEntry _jbe, String _cls, String _var), void JDoWhileBlock(JBranchEntry _jbe), void JDoWhileBlock(JBranchEntry _jbe, String _var1, String _oper, String _var2), void JElseBlock(JBranchEntry _jbe), void JElseIfBlock(JBranchEntry _jbe, String _expr), void JFinallyBlock(JBranchEntry _jbe), void JForBlock(JBranchEntry _jbe, String _init, String _test, String _loop), void JForBlock(JBranchEntry _jbe, String _test), void JIfBlock(JBranchEntry _jbe, String _expr), void JMethodBlock(), void JSwitchBlock(JBranchEntry _jbe, String _expr), void JSynchBlock(JBranchEntry _jbe, String _var), void JTryBlock(JBranchEntry _jbe), void addBlock(JBlockObject _jbo), void addStatement(JLineOfCode _loc), void setInitExpr(String _init), void setLoopExpr(String _loop), void setOper(String _oper), void setTestExpr(String _test), void setVar1(String _var1), void setVar2(String _var2)]]
	->	->	->ITS CHILDREN:=================
	->	->	->	->NODE_4[...,...]
	->	->NODE_84[[jreversepro.reflect.method.JElseIfBlock],[String getEntryCode(), String getExitCode(), void JElseIfBlock(JBranchEntry _jbe, String _expr)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_85[[jreversepro.reflect.method.JSwitchBlock],[String getEntryCode(), String getExitCode(), void JSwitchBlock(JBranchEntry _jbe, String _expr)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_86[[jreversepro.reflect.method.JIfBlock],[String getEntryCode(), String getExitCode(), void JIfBlock(JBranchEntry _jbe, String _expr)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_87[[jreversepro.reflect.method.JSynchBlock],[String getEntryCode(), String getExitCode(), void JSynchBlock(JBranchEntry _jbe, String _var)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_88[[jreversepro.reflect.method.JForBlock],[String getEntryCode(), String getExitCode(), void JForBlock(JBranchEntry _jbe, String _init, String _test, String _loop), void JForBlock(JBranchEntry _jbe, String _test), void setInitExpr(String _init), void setLoopExpr(String _loop), void setTestExpr(String _test)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_89[[jreversepro.reflect.method.JDoWhileBlock],[String getEntryCode(), String getExitCode(), void JDoWhileBlock(JBranchEntry _jbe), void JDoWhileBlock(JBranchEntry _jbe, String _var1, String _oper, String _var2), void setOper(String _oper), void setVar1(String _var1), void setVar2(String _var2)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_90[[jreversepro.reflect.method.JCatchBlock],[String getEntryCode(), String getExitCode(), void JCatchBlock(JBranchEntry _jbe, String _cls, String _var)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_91[[jreversepro.reflect.method.JTryBlock],[String getEntryCode(), String getExitCode(), void JTryBlock(JBranchEntry _jbe)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_92[[jreversepro.reflect.method.JFinallyBlock],[String getEntryCode(), String getExitCode(), void JFinallyBlock(JBranchEntry _jbe)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_93[[jreversepro.reflect.method.JMethodBlock],[String getEntryCode(), String getExitCode(), void JMethodBlock()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->NODE_94[[jreversepro.reflect.method.JCaseBlock],[String getEntryCode(), String getExitCode(), void JCaseBlock(JBranchEntry _jbe, String _expr)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_83[...,...]
	->	->	->NODE_3[...,...]
	->NODE_95[[jreversepro.awtui.JClassEditPanel, jreversepro.gui.JClassEditPanel],[Font getEditorFont(), void JClassEditPanel(), void setEditorFont(Font aFont), void writeCode(String aCode)]]
	->ITS CHILDREN:=================
	->	->NODE_96[[jreversepro.gui.JClassEditPanel],[Font getEditorFont(), boolean confirmOverwrite(JFrame aParent, File aOutputFile), boolean writeToFile(JFrame aParent, File aOutputFile), void JClassEditPanel(), void createModel(JFrame aParent, String aFileName, List aChildren), void setEditorFont(Font aFont), void writeCode(String aCode)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->	->NODE_97[[jreversepro.awtui.JClassEditPanel],[Font getEditorFont(), boolean confirmOverwrite(Frame aParent, File aOutputFile), boolean writeToFile(Frame aParent, File aOutputFile), void JClassEditPanel(), void setEditorFont(Font aFont), void writeCode(String aCode)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_98[[jreversepro.awtui.JDlgFont, jreversepro.gui.JDlgFont],[Font getChosenFont(), int showFontDialog(), void JDlgFont(Frame owner, String title)]]
	->ITS CHILDREN:=================
	->	->NODE_99[[jreversepro.awtui.JDlgFont],[Font getChosenFont(), int showFontDialog(), void JDlgFont(Frame owner, String title), void fillFontObjects()]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->	->NODE_100[[jreversepro.gui.JDlgFont],[Font getChosenFont(), Object[] getFontObjects(), int showFontDialog(), void JDlgFont(Frame owner, String title)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_101[[jreversepro.tester.TestMain],[void main(String[] args), void runTest(TestContext context, Class tester)]]
	->ITS CHILDREN:=================
	->	->NODE_4[...,...]
	->NODE_102[[jreversepro.runtime.JSymbolTable],[JLocalEntry getMatchingEntry(int aVarIndex, int aInsIndex), List defineVariable(int endOfBranch), List getKeyWordsList(), String declare(int aVarIndex, int aInsIndex), String genName(String aType, int aVarIndex), String genUniqueName(String name, int aVarIndex), String getDataType(int aVarIndex, int aInsIndex), String getName(int aVarIndex, int aInsIndex), int getMaxSymbols(), void JSymbolTable(JMethod rhsMethod, JImport imports), void addEntry(int aVarIndex, int aStoreIndex, String aDatatype, boolean aDeclared), void addReference(int aVarIndex, String aDatatype, int aIndex), void assignDataType(int aVarIndex, String aDatatype, int aVarStore, boolean aDeclared), void loadSymbols(List aArgs, int startIndex), void touchVariable(String aVarName, String aNewType)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
	->NODE_103[[jreversepro.reflect.JMember, jreversepro.runtime.JLocalEntry],[String getName()]]
	->ITS CHILDREN:=================
	->	->NODE_21[...,...]
	->	->NODE_104[[jreversepro.runtime.JLocalEntry],[String getDeclarationType(), String getName(), boolean isDeclared(), boolean reassignType(String datatype), int getLastReferredIndex(), int getStoreIndex(), int getVarIndex(), void JLocalEntry(int aVarIndex, int aStoreIndex, String datatype, String aName, boolean aDeclared), void declareVariable(), void setDeclarationType(String aType), void setLastReferredIndex(int index), void setName(String name)]]
	->	->ITS CHILDREN:=================
	->	->	->NODE_4[...,...]
	->NODE_105[[jreversepro.reflect.JConstantPool],[JImport getImportedClasses(), List getEntries(), String getBasicDataTypeValue(int index), String getClassName(int index), String getCpValue(int index), String getDataType(int index), String getEntryInfo(), String getEntryInfo(int cpIndex), String getFieldName(int index), String getFieldType(int index), String getFirstDirectName(int index), String getLdcString(int index), String getName(JConstantPoolEntry ent), String getSecondDirectName(int index), String getTagDescriptor(int index), String getTagName(int tagByte), String getType(JConstantPoolEntry ent), String getUtf8String(int index), boolean isTagDouble(int index), int getMaxCpEntry(), int getPtr1(int index), int getPtr2(int index), int getTagByte(int index), void JConstantPool(int cpMax), void addClassEntry(int classIndex), void addDoubleEntry(String value), void addFieldRefEntry(int ptr1, int ptr2), void addFloatEntry(String value), void addIntegerEntry(String value), void addInterfaceRefEntry(int ptr1, int ptr2), void addLongEntry(String value), void addMethodRefEntry(int ptr1, int ptr2), void addNameTypeEntry(int ptr1, int ptr2), void addNullEntry(), void addStringEntry(int stringIndex), void addUtf8Entry(String value), void getSingleEntryInfo(StringBuffer sb, int cpIndex)]]
	->ITS CHILDREN:=================
	->	->NODE_3[...,...]
Done printing lattice!
Printing candidate nodes
	->	->NODE_0[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords],[JBranchEntry getBranchEntry(), JCollatingTable loadBranchTable(), JInstruction next(), JInstruction prev(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getCases(), Operand getInvokedObject(), String disassemble(), String getArgValues(List args, List argValues), String getConditionalOperator(), String getInsName(), String getOpr1(), String getOpr2(), String getStatement(), boolean isASwitchIns(), boolean isAnIfIns(), boolean isEndOfCatch(), boolean isEndOfLine(), boolean isInvokeIns(), int getArgByte(), int getArgByte(int pos), int getArgInt(), int getArgInt(int pos), int getArgShort(), int getArgShort(int pos), int getArgUnsignedByte(), int getArgUnsignedByte(int pos), int getArgUnsignedInt(), int getArgUnsignedInt(int pos), int getArgUnsignedShort(), int getArgUnsignedShort(int pos), int getArgUnsignedWide(), int getArgUnsignedWide(int pos), int getArgWide(), int getArgWide(int pos), int getDefaultByte(), int getLastIns(), int getLastInsPos(), int getLength(), int getNextIndex(), int getOffset(), int getTargetPc(), int getTargetPc2(), int getTargetPcW(), int isStoreInstruction(), int referredVariable(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JInstruction(int rhsIndex, int rhsOpcode, byte[] rhsArgs, boolean rhsWide), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void JSwitchTable(JMethod method, JInstruction ins, Map gotos), void JSwitchTable(JMethod method, JInstruction ins, Operand op1, Map gotos), void addCaseEntry(JCaseEntry caseEntry), void addCatchBranch(int insIndex, JBranchEntry brent), void append(JInstruction rhsNext), void closeCatchBranch(int closeIndex), void createLookupSwitch(byte[] entries, int offset, Map gotos), void createTableSwitch(byte[] entries, int offset, Map gotos), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processData(Map gotos), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void setTypeValue(String rhsType, String rhsValue), void sort()]]
	  	  FEATURE TYPE:  ## ADHOC
	->	->	->NODE_0[...,...]
	->	->NODE_1[[jreversepro.common.JJvmOpcodes, jreversepro.revengine.JBranchEntry],[String getOpr1(), int getTargetPc()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	  	->	->NODE_2[[jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isWhile(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB)]]
	  	  	  	  FEATURE TYPE:  ## ADHOC
	  	  	  	  	->NODE_3[[jreversepro.common.KeyWords, jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getConstants(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getConstantValues(), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), String topDatatype(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isTopDatatypeForeign(), boolean isWhile(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JOperandStack(), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void addConstant(String constant), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void mergeTopTwo(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void push(String value, String datatype, int precedence), void push(int value, String datatype, int precedence), void removeAllConstants(), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB)]]
	  	  	  	  	  FEATURE TYPE:  ## ADHOC
	  	  	  	  	->NODE_4[[jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants],[JBranchEntry getImmediateOuterLoop(), JCollatingTable loadBranchTable(), JOperandStack getOperandStack(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List getEffectiveBranches(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getComplementOperator(String rhs), String getCondition(boolean complement), String getExpression(), String getOpr1(), String getOpr2(), String getStatement(), boolean appendEndBlockStmt(JDecompiler decomp, JOperandStack jos), boolean checkCase1(int a, int b), boolean checkCase2(int a, int b), boolean collate(), boolean doesContain(int aPc), boolean doesStartWith(int rhsStartPc), boolean independent(), boolean isWhile(), int convertToObjects(), int getEndBlockPc(), int getLastIns(), int getLastInsPos(), int getNextPc(), int getStartBlockPc(), int getStartExecPc(), int getStartPc(), int getTargetPc(), int getType(), void JBranchEntry(JMethod method, int startPc, int nextPc, int targetPc, int type, String opr1, String opr2, String operator), void JBranchEntry(JMethod method, int startPc, int targetPc, int type), void JCollatingTable(JMethod method), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeContext(JDecompiler decomp, JMethod meth, JRunTimeFrame rtf, JOperandStack jos, JBranchTable branches), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void addCode(int sOffset, int eOffset, int fromPos, int toPos), void addCode(int sOffset, int eOffset, int fromPos, int toPos, String type), void addConditionalBranch(JInstruction thisIns, int startPc, int type, String opr1, String opr2), void addTextCode(String txt), void appendStartBlockStmtX(JDecompiler decomp), void closeCatchBranch(int closeIndex), void collate(), void complementOperator(), void convertToWhile(), void dealIntegerStore(String popValue, int intIndex, int insIndex), void executeInstruction(JInstruction ins), void genCode(), void genSource(), void getBeginStmt(List listBranches, int insIndex, JSymbolTable symTable), void getEndStmt(int insIndex), void getFinalBlockStmt(), void identifyWhileLoops(Map mapGotos), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processBreakContinue(int startPc, int targetPc), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void pushControlEntry(JBranchEntry newent), void resetWrittenFlag(), void rewriteCondition(JBranchEntry nextEntry, String conditionType, boolean complement), void setBlockWrittenFlag(), void setEndBlockPc(int aNewPc), void setLastIns(int li), void setLastInsPos(int lip), void setNextPc(int nextPc), void setOpr1(String opr1), void setOpr2(String opr2), void setStartPc(int startPc), void setTargetPc(int targetPc), void setType(int type), void setWrittenFlag(), void sort(), void validatePairings(JBranchEntry ent), void writeCase(boolean case1, boolean ifstat, JBranchEntry entryB), void writeVariableDeclarations(JBranchEntry ent, JSymbolTable symTable)]]
	  	  	  	  	  FEATURE TYPE:  ## ADHOC
	  	  	->NODE_5[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants, jreversepro.runtime.OperandConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), int getLastIns(), int getLastInsPos(), int getTargetPc(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip)]]
	  	  	  FEATURE TYPE:  ## ADHOC
	  	  	  	->NODE_6[[jreversepro.common.JJvmOpcodes, jreversepro.common.KeyWords, jreversepro.revengine.BranchConstants],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), Operand getInvokedObject(), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), int getLastIns(), int getLastInsPos(), int getTargetPc(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void dealIntegerStore(String popValue, int intIndex, int insIndex), void genCode(), void genSource(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void sort()]]
	  	  	  	  FEATURE TYPE:  ## ADHOC
	  	  	  	  	->NODE_7[[jreversepro.common.JJvmOpcodes, jreversepro.revengine.BranchConstants],[JBranchEntry contains(List listBranchEntries, int type), JCollatingTable loadBranchTable(), JInstruction findGotoIns(List byteIns, int start, int end), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), List startsWith(int aInsIndex), Map getGotoTable(), Operand getInvokedObject(), String branchesToString(), String doesMonitorBegin(int monitorBeginPc), String getArgValues(List args, List argValues), String getOpr1(), String getOpr2(), String getStatement(), boolean isJSRTarget(int currPc), int findGotoTarget(int startPc), int getLastIns(), int getLastInsPos(), int getTargetPc(), void JBranchTable(JMethod method), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JRunTimeFrame(JConstantPool rhsCpInfo, JSymbolTable rhsSymTable, String rhsReturnType), void add(JBranchEntry ent), void addCatchBranch(int insIndex, JBranchEntry brent), void addGotoEntry(int startPc, int targetPc), void addJSRPc(int targetPc), void addMonitorPc(int aMonitorPc, String aMonObject), void addRetPc(int retPc), void addSwitch(JSwitchTable switchEntry), void addTryBlocks(List excTryTable), void closeCatchBranch(int closeIndex), void dealIntegerStore(String popValue, int intIndex, int insIndex), void deleteElse(int startElse), void genCode(), void genSource(), void identifyMoreBranches(), void loadSymbolTable(), void operateStack(JInstruction thisIns, JOperandStack myStack), void opr0to31(JInstruction thisIns, JOperandStack myStack), void opr101to127(JInstruction thisIns, JOperandStack myStack), void opr128to147(JInstruction thisIns, JOperandStack myStack), void opr148to171(JInstruction thisIns, JOperandStack myStack), void opr172to186(JInstruction thisIns, JOperandStack myStack), void opr187to201(JInstruction thisIns, JOperandStack myStack), void opr202to255(JInstruction thisIns, JOperandStack myStack), void opr32to53(JInstruction thisIns, JOperandStack myStack), void opr54to86(JInstruction thisIns, JOperandStack myStack), void opr87to100(JInstruction thisIns, JOperandStack myStack), void processInvokeInstruction(JInstruction aCurIns, JOperandStack aJos, boolean aInvokeSpecialFlag), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip), void setTables(List aBranches), void sort()]]
	  	  	  	  	  FEATURE TYPE:  ## ADHOC
	  	  	  	  	->NODE_4[...,...]
	  	  	  	  	->NODE_0[...,...]
	  	  	  	->NODE_2[...,...]
	->NODE_8[[jreversepro.reflect.JException, jreversepro.revengine.JBranchEntry],[int getStartPc()]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_9[[jreversepro.revengine.JDecompiler, jreversepro.revengine.JDisAssembler, jreversepro.revengine.JReverseEngineer],[void genCode()]]
	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_INTERFACE_IMPLEMENTATIONS; ANCHOR: [jreversepro.revengine.JReverseEngineer]; ANCHOR TYPE BEHAVIOR COVERAGE: [1.0 ]##
	  	->	->NODE_10[[jreversepro.common.JJvmOpcodes, jreversepro.revengine.JReverseEngineer],[JCollatingTable loadBranchTable(), JRunTimeContext createRuntimeContext(), JSymbolTable getSymbolTable(), int getLastIns(), int getLastInsPos(), void JDecompiler(JMethod rhsMethod, JConstantPool rhsCpInfo), void JDisAssembler(JMethod rhsMethod, JConstantPool rhsCpInfo), void addCatchBranch(int insIndex, JBranchEntry brent), void closeCatchBranch(int closeIndex), void dealDefault(StringBuffer assembly, JInstruction thisIns), void genCode(), void genSource(), void loadSymbolTable(), void processJVMInstruction(JInstruction ins, JRunTimeContext context), void setLastIns(int li), void setLastInsPos(int lip)]]
	  	  	  FEATURE TYPE:  ## ADHOC
	  	->	->NODE_5[...,...]
	  	->	->NODE_10[...,...]
	->NODE_11[[jreversepro.JAwtFrame, jreversepro.JCmdMain, jreversepro.JMainFrame],[void main(String[] aArgs)]]
	  FEATURE TYPE:  ## ADHOC
	  	->NODE_12[[jreversepro.JAwtFrame, jreversepro.JMainFrame],[void addListeners(), void appClose(), void copyText(), void cutText(), void formatTitle(String aFileName), void initAppState(), void main(String[] aArgs), void openFile(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	  	->	->NODE_13[[jreversepro.common.AppConstants, jreversepro.common.KeyWords],[StringBuffer writeArgs(List aArgs, JImport aImports), void JAwtFrame(), void JMainFrame(), void addListeners(), void appClose(), void copyText(), void createTree(JClassInfo aClassInfo, String aCurrentClass), void cutText(), void formatTitle(String aFileName), void initAppState(), void main(String[] aArgs), void openFile(), void reverseEngineer(File aFile), void saveFile(), void saveProperties(), void showAbout(), void showFontDialog(), void viewPool()]]
	  	  	  	  FEATURE TYPE:  ## ADHOC
	  	  	->	->NODE_13[...,...]
	->NODE_14[[jreversepro.revengine.JBranchTable, jreversepro.revengine.JCollatingTable],[void sort()]]
	  FEATURE TYPE:  ## ADHOC
	  	->NODE_6[...,...]
	  	->	->NODE_4[...,...]
	  	->	->NODE_7[...,...]
	->	->	->NODE_5[...,...]
	->	->NODE_1[...,...]
	->NODE_15[[jreversepro.awtui.JCustomListPanel, jreversepro.awtui.JErrorDlg, jreversepro.gui.JCustomListPanel, jreversepro.gui.JErrorDlg],[void addComponents()]]
	  FEATURE TYPE:  ## ADHOC
	  	->NODE_16[[jreversepro.awtui.JErrorDlg, jreversepro.gui.JErrorDlg],[String getStackTrace(Exception _ex), void addComponents()]]
	  	  FEATURE TYPE:  ## ADHOC
	  	->NODE_17[[jreversepro.awtui.JCustomListPanel, jreversepro.gui.JCustomListPanel],[void JCustomListPanel(int aMaxEntries), void addComponents()]]
	  	  FEATURE TYPE:  ## ADHOC
	->NODE_18[[jreversepro.awtui.MainMenu, jreversepro.gui.MainMenu],[void initMenuItems(), void setFlag(String Rhs)]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_19[[jreversepro.reflect.JConstantPoolEntry, jreversepro.reflect.JField, jreversepro.runtime.Operand],[String getValue()]]
	  FEATURE TYPE:  ## ADHOC
	  	->NODE_20[[jreversepro.reflect.JMember, jreversepro.runtime.Operand],[String getDatatype(), String getValue()]]
	  	  FEATURE TYPE:  ## ADHOC
	->	->NODE_3[...,...]
	->NODE_21[[jreversepro.awtui.JJavaDocumentEditor, jreversepro.gui.JJavaDocumentEditor],[void JJavaDocumentEditor()]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_22[[jreversepro.revengine.JBranchComparator, jreversepro.revengine.JCaseComparator],[int compare(Object o1, Object o2)]]
	  FEATURE TYPE:  ## ADHOC
	->	->NODE_4[...,...]
	->NODE_23[[jreversepro.reflect.method.JBlockObject, jreversepro.reflect.method.JCaseBlock, jreversepro.reflect.method.JCatchBlock, jreversepro.reflect.method.JDoWhileBlock, jreversepro.reflect.method.JElseBlock, jreversepro.reflect.method.JElseIfBlock, jreversepro.reflect.method.JFinallyBlock, jreversepro.reflect.method.JForBlock, jreversepro.reflect.method.JIfBlock, jreversepro.reflect.method.JMethodBlock, jreversepro.reflect.method.JSwitchBlock, jreversepro.reflect.method.JSynchBlock, jreversepro.reflect.method.JTryBlock],[String getEntryCode(), String getExitCode()]]
	  FEATURE TYPE: FULL_EXTENT_FULL_BEHAVIOR_EXPLICIT_CLASS_SUBCLASS_REDEFINITIONS; ANCHOR: [jreversepro.reflect.method.JBlockObject]; ANCHOR TYPE BEHAVIOR COVERAGE: [0.16666667 ]##
	->NODE_24[[jreversepro.awtui.JClassEditPanel, jreversepro.gui.JClassEditPanel],[Font getEditorFont(), void JClassEditPanel(), void setEditorFont(Font aFont), void writeCode(String aCode)]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_25[[jreversepro.awtui.JDlgFont, jreversepro.gui.JDlgFont],[Font getChosenFont(), int showFontDialog(), void JDlgFont(Frame owner, String title)]]
	  FEATURE TYPE:  ## ADHOC
	->NODE_26[[jreversepro.reflect.JMember, jreversepro.runtime.JLocalEntry],[String getName()]]
	  FEATURE TYPE:  ## ADHOC
Done printing candidate nodes!
true
